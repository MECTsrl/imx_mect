diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/serial/mxs-auart.c linux-2.6.35.3.modified/drivers/serial/mxs-auart.c
--- linux-2.6.35.3/drivers/serial/mxs-auart.c	2011-09-21 13:13:16.885586983 +0200
+++ linux-2.6.35.3.modified/drivers/serial/mxs-auart.c	2011-09-21 12:57:30.728744817 +0200
@@ -48,6 +48,14 @@
 #define MXS_AUART_MAJOR	242
 #define MXS_AUART_RX_THRESHOLD 16
 
+#define MECT_RTS_MANAGEMENT
+
+#ifdef MECT_RTS_MANAGEMENT
+//for ewk board
+//#define MECT_RTS_TX_ACTIVE_LOW
+//#define MECT_RTS_MANAGEMENT_DBG
+#endif
+
 static struct uart_driver auart_driver;
 
 struct mxs_auart_port {
@@ -74,6 +82,9 @@
 static void mxs_auart_stop_tx(struct uart_port *u);
 static void mxs_auart_submit_tx(struct mxs_auart_port *s, int size);
 static void mxs_auart_submit_rx(struct mxs_auart_port *s);
+static void mxs_auart_set_mctrl(struct uart_port *u, unsigned mctrl);
+static u32 mxs_auart_get_mctrl(struct uart_port *u);
+static unsigned int mxs_auart_tx_empty(struct uart_port *u);
 
 static inline struct mxs_auart_port *to_auart_port(struct uart_port *u)
 {
@@ -135,11 +146,37 @@
 			break;
 	}
 	if (uart_circ_empty(&(s->port.state->xmit)))
+	{
+#ifdef MECT_RTS_MANAGEMENT_DBG
+		printk(KERN_INFO "%s: uart_circ_empty\n", __func__);
+#endif
 		__raw_writel(BM_UARTAPP_INTR_TXIEN,
-			     s->port.membase + HW_UARTAPP_INTR_CLR);
+				s->port.membase + HW_UARTAPP_INTR_CLR);
+#ifdef MECT_RTS_MANAGEMENT
+		/*
+		 *      Finally, wait for transmitter to become empty
+		 *      and restore the RTS
+		 */
+		{
+			int status;
+			do {
+				status = __raw_readl(s->port.membase + HW_UARTAPP_STAT);
+			} while (status & BM_UARTAPP_STAT_BUSY);
+		}
+#ifdef MECT_RTS_MANAGEMENT_DBG
+		printk(KERN_INFO "%s: Release RTS\n", __func__);
+#endif
+#ifdef MECT_RTS_TX_ACTIVE_LOW
+	mxs_auart_set_mctrl(&s->port, TIOCM_RTS);
+#else
+	mxs_auart_set_mctrl(&s->port, 0);
+#endif
+#endif
+
+	}
 	else
 		__raw_writel(BM_UARTAPP_INTR_TXIEN,
-			     s->port.membase + HW_UARTAPP_INTR_SET);
+				s->port.membase + HW_UARTAPP_INTR_SET);
 
 	if (uart_tx_stopped(&s->port))
 		mxs_auart_stop_tx(&s->port);
@@ -453,10 +490,29 @@
 	struct mxs_auart_port *s = to_auart_port(u);
 
 	u32 ctrl = __raw_readl(u->membase + HW_UARTAPP_CTRL2);
+#ifdef MECT_RTS_MANAGEMENT_DBG
+	printk(KERN_INFO "EGB %s - mctrl %d\n", __func__, mctrl);
+	printk(KERN_INFO "EGB %s - get RTS %d\n", __func__,  mxs_auart_get_mctrl(u));
+#endif
 
 	ctrl &= ~BM_UARTAPP_CTRL2_RTS;
+#ifdef MECT_RTS_MANAGEMENT
+	if ((mctrl & TIOCM_RTS) == TIOCM_RTS)
+#else
 	if (mctrl & TIOCM_RTS)
+#endif
+	{
 		ctrl |= BM_UARTAPP_CTRL2_RTS;
+#ifdef MECT_RTS_MANAGEMENT_DBG
+				printk(KERN_INFO "EGB %s - RTS 1\n", __func__);
+#endif
+	}
+#ifdef MECT_RTS_MANAGEMENT_DBG
+	else
+	{
+				printk(KERN_INFO "EGB %s - RTS 0\n", __func__);
+	}
+#endif
 	s->ctrl = mctrl;
 	__raw_writel(ctrl, u->membase + HW_UARTAPP_CTRL2);
 }
@@ -492,7 +548,10 @@
 
 	cflag = termios->c_cflag;
 
+	/* enabling fifo */
 	ctrl = BM_UARTAPP_LINECTRL_FEN;
+	/* disabling fifo */
+	/* ctrl &= ~BM_UARTAPP_LINECTRL_FEN; */
 	ctrl2 = __raw_readl(u->membase + HW_UARTAPP_CTRL2);
 
 	/* byte size */
@@ -738,15 +797,33 @@
 static void mxs_auart_start_tx(struct uart_port *u)
 {
 	struct mxs_auart_port *s = to_auart_port(u);
+#ifdef MECT_RTS_MANAGEMENT_DBG
+	printk(KERN_INFO "%s: ENTER", __func__);
+	printk(KERN_INFO "%s: Occupy RTS\n", __func__);
+#endif
+#ifdef MECT_RTS_MANAGEMENT
+	/* RTS set */
+#ifdef MECT_RTS_TX_ACTIVE_LOW
+	mxs_auart_set_mctrl(&s->port, 0);
+#else
+	mxs_auart_set_mctrl(&s->port, TIOCM_RTS);
+#endif
+#endif
 
 	/* enable transmitter */
 	__raw_writel(BM_UARTAPP_CTRL2_TXE, u->membase + HW_UARTAPP_CTRL2_SET);
 
 	mxs_auart_tx_chars(s);
+#ifdef MECT_RTS_MANAGEMENT_DBG
+	printk (KERN_INFO "EGB: %s - EXIT", __func__);
+#endif
 }
 
 static void mxs_auart_stop_tx(struct uart_port *u)
 {
+#ifdef MECT_RTS_MANAGEMENT_DBG
+	printk (KERN_INFO ".... EGB: %s - ENTER", __func__);
+#endif
 	__raw_writel(BM_UARTAPP_CTRL2_TXE, u->membase + HW_UARTAPP_CTRL2_CLR);
 }
 
