diff --exclude CVS --exclude .git -uNr qwt-6.0.1/src/qwt_plot.cpp qwt-6.0.1.modified/src/qwt_plot.cpp
--- qwt-6.0.1/src/qwt_plot.cpp	2011-08-01 16:33:53.000000000 +0200
+++ qwt-6.0.1.modified/src/qwt_plot.cpp	2014-04-15 08:45:16.337568928 +0200
@@ -268,7 +268,7 @@
             const QwtScaleDiv &scaleDiv = scaleWidget->scaleDraw()->scaleDiv();
             const int majCnt = scaleDiv.ticks( QwtScaleDiv::MajorTick ).count();
 
-            if ( axisId == yLeft || axisId == yRight )
+            if ((axisId >= yLeft) && (axisId <= yRightMax))
             {
                 int hDiff = ( majCnt - 1 ) * niceDist
                     - scaleWidget->minimumSizeHint().height();
@@ -370,13 +370,16 @@
         {
             axisWidget( axisId )->setGeometry( scaleRect[axisId] );
 
-            if ( axisId == xBottom || axisId == xTop )
+            if ((axisId >= xBottom) && (axisId <= xTopMax))
             {
                 QRegion r( scaleRect[axisId] );
-                if ( axisEnabled( yLeft ) )
-                    r = r.subtract( QRegion( scaleRect[yLeft] ) );
-                if ( axisEnabled( yRight ) )
-                    r = r.subtract( QRegion( scaleRect[yRight] ) );
+                for (int iIdxYAxis=yLeft; iIdxYAxis<= yRightMax; iIdxYAxis++)
+                {
+                    if (axisEnabled(iIdxYAxis))
+                    {
+                        r = r.subtract(QRegion(scaleRect[iIdxYAxis]));
+                    }
+                }
                 r.translate( -d_data->layout->scaleRect( axisId ).x(),
                     -scaleRect[axisId].y() );
 
@@ -537,7 +540,7 @@
     if ( axisEnabled( axisId ) )
     {
         const QwtScaleWidget *s = axisWidget( axisId );
-        if ( axisId == yLeft || axisId == yRight )
+        if ((axisId >= yLeft) && (axisId <= yRightMax))
         {
             double y = s->y() + s->startBorderDist() - d_data->canvas->y();
             double h = s->height() - s->startBorderDist() - s->endBorderDist();
@@ -557,7 +560,7 @@
             margin = plotLayout()->canvasMargin( axisId );
 
         const QRect &canvasRect = d_data->canvas->contentsRect();
-        if ( axisId == yLeft || axisId == yRight )
+        if ((axisId >= yLeft) && (axisId <= yRightMax))
         {
             map.setPaintInterval( canvasRect.bottom() - margin,
                 canvasRect.top() + margin );
diff --exclude CVS --exclude .git -uNr qwt-6.0.1/src/qwt_plot.h qwt-6.0.1.modified/src/qwt_plot.h
--- qwt-6.0.1/src/qwt_plot.h	2011-08-01 16:33:52.000000000 +0200
+++ qwt-6.0.1.modified/src/qwt_plot.h	2014-04-15 08:45:16.345564500 +0200
@@ -75,23 +75,16 @@
 
 public:
     //! \brief Axis index
-    enum Axis
-    {
-        //! Y axis left of the canvas
-        yLeft,
-
-        //! Y axis right of the canvas
-        yRight,
-
-        //! X axis below the canvas
-        xBottom,
-
-        //! X axis above the canvas
-        xTop,
-
-        //! Number of axes
-        axisCnt
-    };
+    static const int axisCntBySide = 10;
+    static const int yLeft         = 0;
+    static const int yLeftMax      = yLeft      + axisCntBySide - 1;
+    static const int yRight        = yLeftMax   + 1;
+    static const int yRightMax     = yRight     + axisCntBySide - 1;
+    static const int xBottom       = yRightMax  + 1;
+    static const int xBottomMax    = xBottom    + axisCntBySide - 1;
+    static const int xTop          = xBottomMax + 1;
+    static const int xTopMax       = xTop       + axisCntBySide - 1;
+    static const int axisCnt       = xTopMax    + 1;
 
     /*!
         Position of the legend, relative to the canvas.
diff --exclude CVS --exclude .git -uNr qwt-6.0.1/src/qwt_plot_axis.cpp qwt-6.0.1.modified/src/qwt_plot_axis.cpp
--- qwt-6.0.1/src/qwt_plot_axis.cpp	2011-08-01 16:33:53.000000000 +0200
+++ qwt-6.0.1.modified/src/qwt_plot_axis.cpp	2014-04-15 08:45:16.341566718 +0200
@@ -39,19 +39,33 @@
     for ( axisId = 0; axisId < axisCnt; axisId++ )
         d_axisData[axisId] = new AxisData;
 
-    d_axisData[yLeft]->scaleWidget =
-        new QwtScaleWidget( QwtScaleDraw::LeftScale, this );
-    d_axisData[yRight]->scaleWidget =
-        new QwtScaleWidget( QwtScaleDraw::RightScale, this );
-    d_axisData[xTop]->scaleWidget =
-        new QwtScaleWidget( QwtScaleDraw::TopScale, this );
-    d_axisData[xBottom]->scaleWidget =
-        new QwtScaleWidget( QwtScaleDraw::BottomScale, this );
-
-    d_axisData[yLeft]->scaleWidget->setObjectName( "QwtPlotAxisYLeft" );
-    d_axisData[yRight]->scaleWidget->setObjectName( "QwtPlotAxisYRight" );
-    d_axisData[xTop]->scaleWidget->setObjectName( "QwtPlotAxisXTop" );
-    d_axisData[xBottom]->scaleWidget->setObjectName( "QwtPlotAxisXBottom" );
+    for( axisId = 0; axisId < axisCnt; axisId++)
+    {
+      if ((axisId>=yLeft) && (axisId<=yLeftMax))
+      {
+        d_axisData[axisId]->scaleWidget =
+            new QwtScaleWidget(QwtScaleDraw::LeftScale, this);
+        d_axisData[axisId]->scaleWidget->setObjectName("QwtPlotAxis[" + QString::number(axisId) + "]_YLeft");
+      }
+      else if ((axisId>=yRight) && (axisId<=yRightMax))
+      {
+        d_axisData[axisId]->scaleWidget =
+            new QwtScaleWidget(QwtScaleDraw::RightScale, this);
+        d_axisData[axisId]->scaleWidget->setObjectName("QwtPlotAxis[" + QString::number(axisId) + "]_YRight");
+      }
+      else if ((axisId>=xBottom) && (axisId<=xBottomMax))
+      {
+        d_axisData[axisId]->scaleWidget =
+            new QwtScaleWidget(QwtScaleDraw::BottomScale, this);
+        d_axisData[axisId]->scaleWidget->setObjectName("QwtPlotAxis[" + QString::number(axisId) + "]_XBottom");
+      }
+      else if ((axisId>=xTop) && (axisId<=xTopMax))
+      {
+        d_axisData[axisId]->scaleWidget =
+            new QwtScaleWidget(QwtScaleDraw::TopScale, this);
+        d_axisData[axisId]->scaleWidget->setObjectName("QwtPlotAxis[" + QString::number(axisId) + "]_XTop");
+      }
+    }
 
     QFont fscl( fontInfo().family(), 10 );
     QFont fttl( fontInfo().family(), 12, QFont::Bold );
@@ -81,10 +95,12 @@
         d.scaleDiv.invalidate();
     }
 
+    for( axisId = 0; axisId < axisCnt; axisId++)
+    {
+      d_axisData[axisId]->isEnabled = false;
+    }
     d_axisData[yLeft]->isEnabled = true;
-    d_axisData[yRight]->isEnabled = false;
     d_axisData[xBottom]->isEnabled = true;
-    d_axisData[xTop]->isEnabled = false;
 }
 
 void QwtPlot::deleteAxesData()
diff --exclude CVS --exclude .git -uNr qwt-6.0.1/src/qwt_plot_item.cpp qwt-6.0.1.modified/src/qwt_plot_item.cpp
--- qwt-6.0.1/src/qwt_plot_item.cpp	2011-08-01 16:33:53.000000000 +0200
+++ qwt-6.0.1.modified/src/qwt_plot_item.cpp	2014-04-15 08:45:16.345564500 +0200
@@ -334,11 +334,11 @@
 */
 void QwtPlotItem::setAxes( int xAxis, int yAxis )
 {
-    if ( xAxis == QwtPlot::xBottom || xAxis == QwtPlot::xTop )
-        d_data->xAxis = xAxis;
+    if ((xAxis >= QwtPlot::xBottom) && (xAxis <= QwtPlot::xTopMax))
+         d_data->xAxis = xAxis;
 
-    if ( yAxis == QwtPlot::yLeft || yAxis == QwtPlot::yRight )
-        d_data->yAxis = yAxis;
+    if ((yAxis >= QwtPlot::yLeft) && (yAxis <= QwtPlot::yRightMax))
+         d_data->yAxis = yAxis;
 
     itemChanged();
 }
@@ -353,7 +353,7 @@
 */
 void QwtPlotItem::setXAxis( int axis )
 {
-    if ( axis == QwtPlot::xBottom || axis == QwtPlot::xTop )
+    if ((axis >= QwtPlot::xBottom) && (axis <= QwtPlot::xTopMax))
     {
         d_data->xAxis = axis;
         itemChanged();
@@ -370,7 +370,7 @@
 */
 void QwtPlotItem::setYAxis( int axis )
 {
-    if ( axis == QwtPlot::yLeft || axis == QwtPlot::yRight )
+    if ((axis >= QwtPlot::yLeft) && (axis <= QwtPlot::yRightMax))
     {
         d_data->yAxis = axis;
         itemChanged();
diff --exclude CVS --exclude .git -uNr qwt-6.0.1/src/qwt_plot_layout.cpp qwt-6.0.1.modified/src/qwt_plot_layout.cpp
--- qwt-6.0.1/src/qwt_plot_layout.cpp	2011-08-01 16:33:53.000000000 +0200
+++ qwt-6.0.1.modified/src/qwt_plot_layout.cpp	2014-04-15 08:45:16.341566718 +0200
@@ -478,47 +478,111 @@
     for ( axis = 0; axis < QwtPlot::axisCnt; axis++ )
     {
         ScaleData &sd = scaleData[axis];
-        if ( sd.w && ( axis == QwtPlot::xBottom || axis == QwtPlot::xTop ) )
+        if (sd.w && ((axis >= QwtPlot::xBottom) && (axis <= QwtPlot::xTopMax)))
         {
-            if ( ( sd.minLeft > canvasBorder[QwtPlot::yLeft] )
-                && scaleData[QwtPlot::yLeft].w )
-            {
-                int shiftLeft = sd.minLeft - canvasBorder[QwtPlot::yLeft];
-                if ( shiftLeft > scaleData[QwtPlot::yLeft].w )
-                    shiftLeft = scaleData[QwtPlot::yLeft].w;
+        // Loop on YLeft
+            for (int iIdxYLeft=QwtPlot::yLeft; iIdxYLeft<=QwtPlot::yLeftMax; iIdxYLeft++)
+             {
+              //
+              if ((sd.minLeft > canvasBorder[QwtPlot::yLeftMax]) && scaleData[iIdxYLeft].w)
+              {
+                int shiftLeft = sd.minLeft - canvasBorder[QwtPlot::yLeftMax];
+                int count     = scaleData[QwtPlot::yLeftMax].w;
+ 
+                for (int iIdxYLeftBis=QwtPlot::yLeftMax; iIdxYLeftBis>iIdxYLeft; iIdxYLeftBis--)
+                {
+                  shiftLeft = shiftLeft - scaleData[iIdxYLeftBis].w;
+                  count     = count     + scaleData[iIdxYLeftBis].w;
+                }
+
+                if (shiftLeft > count)
+                {
+                  shiftLeft = count;
+                }
 
                 sd.w -= shiftLeft;
+              }
             }
-            if ( ( sd.minRight > canvasBorder[QwtPlot::yRight] )
-                && scaleData[QwtPlot::yRight].w )
-            {
-                int shiftRight = sd.minRight - canvasBorder[QwtPlot::yRight];
-                if ( shiftRight > scaleData[QwtPlot::yRight].w )
-                    shiftRight = scaleData[QwtPlot::yRight].w;
+            // Loop on Y Right
+            for (int iIdxYRight=QwtPlot::yRight; iIdxYRight<=QwtPlot::yRightMax; iIdxYRight++)
+             {
+              //
+              if ( (sd.minRight > canvasBorder[QwtPlot::yRightMax])&& scaleData[iIdxYRight].w )
+              {
+ 
+                int shiftRight = sd.minRight - canvasBorder[QwtPlot::yRightMax];
+                int count      = 0;
+
+                for (int iIdxYRightBis=QwtPlot::yRightMax; iIdxYRight>iIdxYRight; iIdxYRight--)
+                {
+                  shiftRight = shiftRight - scaleData[iIdxYRightBis].w ;
+                  count      = count      + scaleData[iIdxYRightBis].w;
+                }
+                count = count + scaleData[iIdxYRight].w;
+
+                if (shiftRight > count)
+                {
+                  shiftRight = count;
+                }
 
                 sd.w -= shiftRight;
             }
+            }
         }
 
-        if ( sd.h && ( axis == QwtPlot::yLeft || axis == QwtPlot::yRight ) )
-        {
-            if ( ( sd.minLeft > canvasBorder[QwtPlot::xBottom] ) &&
-                scaleData[QwtPlot::xBottom].h )
-            {
-                int shiftBottom = sd.minLeft - canvasBorder[QwtPlot::xBottom];
-                if ( shiftBottom > scaleData[QwtPlot::xBottom].tickOffset )
-                    shiftBottom = scaleData[QwtPlot::xBottom].tickOffset;
+        // Is Vertical axis (Y)
+        if (sd.h && ((axis >= QwtPlot::yLeft) && (axis <= QwtPlot::yRightMax)))
+         {
+            // Loop on X Bottom
+            for (int iIdxXBot=QwtPlot::xBottom; iIdxXBot<=QwtPlot::xBottomMax; iIdxXBot++)
+             {
+              //
+              if ( (sd.minLeft > canvasBorder[QwtPlot::xBottomMax])&& scaleData[iIdxXBot].w )
+              {
+ 
+                int shiftBottom = sd.minLeft - canvasBorder[QwtPlot::xBottomMax];
+                int count      = 0;
 
-                sd.h -= shiftBottom;
-            }
-            if ( ( sd.minLeft > canvasBorder[QwtPlot::xTop] ) &&
-                scaleData[QwtPlot::xTop].h )
-            {
-                int shiftTop = sd.minRight - canvasBorder[QwtPlot::xTop];
-                if ( shiftTop > scaleData[QwtPlot::xTop].tickOffset )
-                    shiftTop = scaleData[QwtPlot::xTop].tickOffset;
+                for (int iIdxXBotBis=QwtPlot::xBottomMax; iIdxXBotBis>iIdxXBot; iIdxXBotBis--)
+                {
+                  shiftBottom = shiftBottom - scaleData[iIdxXBotBis].tickOffset ;
+                  count      = count      + scaleData[iIdxXBotBis].tickOffset;
+                }
+                count = count + scaleData[iIdxXBot].tickOffset;
+
+                if (shiftBottom > count)
+                {
+                  shiftBottom = count;
+                }
+
+                 sd.h -= shiftBottom;
+              }
+             }
+
+
+            // Loop on XTop
+            for (int iIdxXTop=QwtPlot::yLeft; iIdxXTop<=QwtPlot::xTopMax; iIdxXTop++)
+             {
+
+              //
+              if ((sd.minLeft > canvasBorder[QwtPlot::xTopMax]) && scaleData[iIdxXTop].h)
+              {
+                int shiftTop = sd.minRight - canvasBorder[QwtPlot::xTopMax];
+                int count     = scaleData[QwtPlot::xTopMax].tickOffset;
+ 
+                for (int iIdxXTopBis=QwtPlot::xTopMax; iIdxXTopBis>iIdxXTop; iIdxXTopBis--)
+                {
+                  shiftTop = shiftTop - scaleData[iIdxXTopBis].tickOffset;
+                  count     = count     + scaleData[iIdxXTopBis].tickOffset;
+                }
 
-                sd.h -= shiftTop;
+                if (shiftTop > count)
+                {
+                  shiftTop = count;
+                }
+
+                 sd.h -= shiftTop;
+              }
             }
         }
     }
@@ -526,14 +590,34 @@
     const QwtPlotCanvas *canvas = plot->canvas();
     const QSize minCanvasSize = canvas->minimumSize();
 
-    int w = scaleData[QwtPlot::yLeft].w + scaleData[QwtPlot::yRight].w;
-    int cw = qMax( scaleData[QwtPlot::xBottom].w, scaleData[QwtPlot::xTop].w )
-        + 2 * ( canvas->frameWidth() + 1 );
+    int w=0;
+    for(int iIdxYaxis=QwtPlot::yLeft; iIdxYaxis<=QwtPlot::yRightMax ; iIdxYaxis++)
+    {
+      w = w + scaleData[iIdxYaxis].w;
+    }
+    
+    int cw = 2 * (canvas->frameWidth()) + 1;
+    int XwMax = 0;
+    for(int iIdxXaxis=QwtPlot::xBottom; iIdxXaxis<=QwtPlot::xTopMax ; iIdxXaxis++)
+    {
+      XwMax = qMax(XwMax,scaleData[iIdxXaxis].w);
+    }
+    cw = cw + XwMax;
     w += qMax( cw, minCanvasSize.width() );
 
-    int h = scaleData[QwtPlot::xBottom].h + scaleData[QwtPlot::xTop].h;
-    int ch = qMax( scaleData[QwtPlot::yLeft].h, scaleData[QwtPlot::yRight].h )
-        + 2 * ( canvas->frameWidth() + 1 );
+    int h =0;
+    for(int iIdxXaxis=QwtPlot::xBottom; iIdxXaxis<=QwtPlot::xTopMax ; iIdxXaxis++)
+    {
+      h = h + scaleData[iIdxXaxis].h;
+    }
+
+    int ch = 2 * (canvas->frameWidth() + 1);
+    int YhMax = 0;
+    for(int iIdxYaxis=QwtPlot::yLeft; iIdxYaxis<=QwtPlot::yRightMax ; iIdxYaxis++)
+    {
+      YhMax = qMax(YhMax,  scaleData[iIdxYaxis].h);
+    }
+    ch = ch + YhMax;
     h += qMax( ch, minCanvasSize.height() );
 
     const QwtTextLabel *title = plot->titleLabel();
@@ -863,156 +947,239 @@
 
         QRectF &axisRect = scaleRect[axis];
 
-        if ( axis == QwtPlot::xTop || axis == QwtPlot::xBottom )
-        {
-            const QRectF &leftScaleRect = scaleRect[QwtPlot::yLeft];
-            const int leftOffset =
-                backboneOffset[QwtPlot::yLeft] - startDist;
-
-            if ( leftScaleRect.isValid() )
-            {
-                const int dx = leftOffset + leftScaleRect.width();
-                if ( d_data->alignCanvasToScales && dx < 0 )
-                {
-                    /*
-                      The axis needs more space than the width
-                      of the left scale.
-                     */
-                    canvasRect.setLeft( qMax( canvasRect.left(),
-                        axisRect.left() - dx ) );
-                }
-                else
-                {
-                    const double minLeft = leftScaleRect.left();
-                    const double left = axisRect.left() + leftOffset;
-                    axisRect.setLeft( qMax( left, minLeft ) );
-                }
-            }
-            else
-            {
-                if ( d_data->alignCanvasToScales && leftOffset < 0 )
-                {
-                    canvasRect.setLeft( qMax( canvasRect.left(),
-                        axisRect.left() - leftOffset ) );
-                }
-                else
-                {
-                    if ( leftOffset > 0 )
-                        axisRect.setLeft( axisRect.left() + leftOffset );
-                }
-            }
-
-            const QRectF &rightScaleRect = scaleRect[QwtPlot::yRight];
-            const int rightOffset =
-                backboneOffset[QwtPlot::yRight] - endDist + 1;
+        if ( (axis >= QwtPlot::xBottom) && (axis <= QwtPlot::xTopMax) )
+         {
 
-            if ( rightScaleRect.isValid() )
-            {
-                const int dx = rightOffset + rightScaleRect.width();
-                if ( d_data->alignCanvasToScales && dx < 0 )
-                {
-                    /*
-                      The axis needs more space than the width
-                      of the right scale.
-                     */
-                    canvasRect.setRight( qMin( canvasRect.right(),
-                        axisRect.right() + dx ) );
-                }   
-
-                const double maxRight = rightScaleRect.right();
-                const double right = axisRect.right() - rightOffset;
-                axisRect.setRight( qMin( right, maxRight ) );
-            }
-            else
-            {
-                if ( d_data->alignCanvasToScales && rightOffset < 0 )
-                {
-                    canvasRect.setRight( qMin( canvasRect.right(),
-                        axisRect.right() + rightOffset ) );
-                }
-                else
-                {
-                    if ( rightOffset > 0 )
-                        axisRect.setRight( axisRect.right() - rightOffset );
-                }
-            }
-        }
-        else // QwtPlot::yLeft, QwtPlot::yRight
-        {
-            const QRectF &bottomScaleRect = scaleRect[QwtPlot::xBottom];
-            const int bottomOffset =
-                backboneOffset[QwtPlot::xBottom] - endDist + 1;
-
-            if ( bottomScaleRect.isValid() )
-            {
-                const int dy = bottomOffset + bottomScaleRect.height();
-                if ( d_data->alignCanvasToScales && dy < 0 )
-                {
-                    /*
-                      The axis needs more space than the height
-                      of the bottom scale.
-                     */
-                    canvasRect.setBottom( qMin( canvasRect.bottom(),
-                        axisRect.bottom() + dy ) );
-                }
-                else
-                {
-                    const double maxBottom = bottomScaleRect.top() +
-                        d_data->layoutData.scale[QwtPlot::xBottom].tickOffset;
-                    const double bottom = axisRect.bottom() - bottomOffset;
-                    axisRect.setBottom( qMin( bottom, maxBottom ) );
-                }
-            }
-            else
-            {
-                if ( d_data->alignCanvasToScales && bottomOffset < 0 )
-                {
-                    canvasRect.setBottom( qMin( canvasRect.bottom(),
-                        axisRect.bottom() + bottomOffset ) );
-                }
-                else
-                {
-                    if ( bottomOffset > 0 )
-                        axisRect.setBottom( axisRect.bottom() - bottomOffset );
-                }
-            }
-
-            const QRectF &topScaleRect = scaleRect[QwtPlot::xTop];
-            const int topOffset = backboneOffset[QwtPlot::xTop] - startDist;
-
-            if ( topScaleRect.isValid() )
-            {
-                const int dy = topOffset + topScaleRect.height();
-                if ( d_data->alignCanvasToScales && dy < 0 )
-                {
-                    /*
-                      The axis needs more space than the height
-                      of the top scale.
-                     */
-                    canvasRect.setTop( qMax( canvasRect.top(),
-                        axisRect.top() - dy ) );
-                }
-                else
-                {
-                    const double minTop = topScaleRect.bottom() -
-                        d_data->layoutData.scale[QwtPlot::xTop].tickOffset;
-                    const double top = axisRect.top() + topOffset;
-                    axisRect.setTop( qMax( top, minTop ) );
-                }
-            }
-            else
-            {
-                if ( d_data->alignCanvasToScales && topOffset < 0 )
-                {
-                    canvasRect.setTop( qMax( canvasRect.top(),
-                        axisRect.top() - topOffset ) );
-                }
-                else
-                {
-                    if ( topOffset > 0 )
-                        axisRect.setTop( axisRect.top() + topOffset );
-                }
-            }
+          int axisApplyRectLeft   = 0;
+          int axisApplyLeftOffset = 0;
+ 
+
+           // Loop on left axis
+           for (int leftAxis = QwtPlot::yLeft; leftAxis <= QwtPlot::yLeftMax; leftAxis++)
+           {
+              const QRectF &leftScaleRect = scaleRect[leftAxis];
+              const int        leftOffset = backboneOffset[leftAxis] - startDist;
+
+             if ( leftScaleRect.isValid() )
+              {
+
+                  const int dx = leftOffset + leftScaleRect.width();
+                  if ( d_data->alignCanvasToScales && dx < 0 )
+                  {
+                      /*
+                        The axis needs more space than the width
+                        of the left scale.
+                       */
+                      canvasRect.setLeft( qMax( canvasRect.left(),
+                          axisRect.left() - dx ) );
+                  }
+                  else
+                  {
+                      const double minLeft = leftScaleRect.left();
+                      const double left = axisRect.left() + leftOffset;
+                      axisApplyRectLeft = qMax( left, minLeft );
+                      //axisRect.setLeft( qMax( left, minLeft ) );
+                  }
+              }
+              else
+              {
+
+                  if ( d_data->alignCanvasToScales && leftOffset < 0 )
+                  {
+                      canvasRect.setLeft( qMax( canvasRect.left(),
+                          axisRect.left() - leftOffset ) );
+                  }
+                  else
+                  {
+                      if ( leftOffset > 0 )
+                        axisApplyLeftOffset = qMax(axisApplyLeftOffset,leftOffset);
+                          //axisRect.setLeft( axisRect.left() + leftOffset );
+                  }
+              }
+
+
+           if (axisApplyRectLeft != 0)
+           {
+             axisRect.setLeft(axisApplyRectLeft);
+           }
+           else if(axisApplyLeftOffset != 0)
+           {
+             axisRect.setLeft(axisRect.left() + axisApplyLeftOffset);
+           }
+ 
+           int axisApplyRectRight = 0;
+           int axisApplyRightOffset = 0;
+
+           // Loop on right axis
+          for (int rightAxis = QwtPlot::yRight; rightAxis <= QwtPlot::yRightMax; rightAxis++)
+           {
+              const QRectF &rightScaleRect = scaleRect[rightAxis];
+              const int rightOffset =
+                  backboneOffset[QwtPlot::yRight] - endDist + 1;
+
+              if ( rightScaleRect.isValid() )
+              {
+                  const int dx = rightOffset + rightScaleRect.width();
+                  if ( d_data->alignCanvasToScales && dx < 0 )
+                  {
+                      /*
+                        The axis needs more space than the width
+                        of the right scale.
+                       */
+                      canvasRect.setRight( qMin( canvasRect.right(),
+                          axisRect.right() + dx ) );
+                  }   
+
+                  const double maxRight = rightScaleRect.right();
+                  const double right = axisRect.right() - rightOffset;
+                  //axisRect.setRight( qMin( right, maxRight ) );
+                  axisApplyRectRight = qMin( right, maxRight);
+              }
+              else
+              {
+                  if ( d_data->alignCanvasToScales && rightOffset < 0 )
+                  {
+                      canvasRect.setRight( qMin( canvasRect.right(),
+                          axisRect.right() + rightOffset ) );
+                  }
+                  else
+                  {
+                      if ( rightOffset > 0 )
+                          //axisRect.setRight( axisRect.right() - rightOffset );
+                        axisApplyRightOffset = qMin(axisApplyRightOffset,rightOffset);
+                  }
+              }
+          }
+
+
+          if (axisApplyRectRight != 0)
+          {
+            axisRect.setRight(axisApplyRectRight);
+          }
+          else if(axisApplyRightOffset != 0)
+          {
+            axisRect.setRight(axisRect.right() - axisApplyRightOffset);
+          }
+
+         }
+         
+        } else // vertical axis
+         {
+
+          int axisApplyRectBottom   = 0;
+          int axisApplyBottomOffset = 0;
+ 
+
+          // Loop on bottom axis
+          for (int bottomAxis = QwtPlot::xBottom; bottomAxis <= QwtPlot::xBottomMax; bottomAxis++)
+          {
+              const QRectF &bottomScaleRect = scaleRect[bottomAxis];
+              const int bottomOffset =
+                  backboneOffset[bottomAxis] - endDist + 1;
+
+              if ( bottomScaleRect.isValid() )
+              {
+                  const int dy = bottomOffset + bottomScaleRect.height();
+                  if ( d_data->alignCanvasToScales && dy < 0 )
+                  {
+                      /*
+                        The axis needs more space than the height
+                        of the bottom scale.
+                       */
+                      canvasRect.setBottom( qMin( canvasRect.bottom(),
+                          axisRect.bottom() + dy ) );
+                  }
+                  else
+                  {
+                      const double maxBottom = bottomScaleRect.top() +
+                          d_data->layoutData.scale[bottomAxis].tickOffset;
+                      const double bottom = axisRect.bottom() - bottomOffset;
+                      //axisRect.setBottom( qMin( bottom, maxBottom ) );
+                      axisApplyRectBottom = qMin( bottom, maxBottom );
+                  }
+              }
+              else
+              {
+                  if ( d_data->alignCanvasToScales && bottomOffset < 0 )
+                  {
+                      canvasRect.setBottom( qMin( canvasRect.bottom(),
+                          axisRect.bottom() + bottomOffset ) );
+                  }
+                  else
+                  {
+                      if ( bottomOffset > 0 )
+                          //axisRect.setBottom( axisRect.bottom() - bottomOffset );
+                        axisApplyBottomOffset = qMin(axisApplyBottomOffset,bottomOffset);
+                  }
+              }
+         }
+
+          if (axisApplyRectBottom != 0)
+          {
+            axisRect.setBottom(axisApplyRectBottom);
+          }
+          else if(axisApplyBottomOffset != 0)
+          {
+            axisRect.setBottom(axisRect.bottom() - axisApplyBottomOffset);
+          }
+
+
+
+          int axisApplyRectTop   = 0;
+          int axisApplyTopOffset = 0;
+
+
+          // Loop on top axis
+          for (int topAxis = QwtPlot::xTop; topAxis <= QwtPlot::xTopMax; topAxis++)
+          {
+              const QRectF &topScaleRect = scaleRect[topAxis];
+              const int topOffset = backboneOffset[topAxis] - startDist;
+
+              if ( topScaleRect.isValid() )
+              {
+                  const int dy = topOffset + topScaleRect.height();
+                  if ( d_data->alignCanvasToScales && dy < 0 )
+                  {
+                      /*
+                        The axis needs more space than the height
+                        of the top scale.
+                       */
+                      canvasRect.setTop( qMax( canvasRect.top(),
+                          axisRect.top() - dy ) );
+                  }
+                  else
+                  {/* TODO TOP ICITTE                      !!! */
+                      const double minTop = topScaleRect.bottom() -
+                          d_data->layoutData.scale[topAxis].tickOffset;
+                      const double top = axisRect.top() + topOffset;
+                      //axisRect.setTop( qMax( top, minTop ) );
+                      axisApplyRectTop = qMax( top, minTop );
+                  }
+              }
+              else
+              {
+                  if ( d_data->alignCanvasToScales && topOffset < 0 )
+                  {
+                      canvasRect.setTop( qMax( canvasRect.top(),
+                          axisRect.top() - topOffset ) );
+                  }
+                  else
+                  {
+                      if ( topOffset > 0 )
+                          //axisRect.setTop( axisRect.top() + topOffset );
+                        axisApplyTopOffset = qMax(axisApplyTopOffset,topOffset);
+                  }
+              }
+          }
+
+          if (axisApplyRectTop != 0)
+          {
+            axisRect.setTop(axisApplyRectTop);
+          }
+          else if(axisApplyTopOffset != 0)
+          {
+            axisRect.setTop(axisRect.top() + axisApplyTopOffset);
+          }
         }
     }
 
@@ -1032,7 +1199,7 @@
             if ( !scaleRect[axis].isValid() )
                 continue;
 
-            if ( axis == QwtPlot::xBottom || axis == QwtPlot::xTop )
+            if ( (axis >= QwtPlot::xBottom) && (axis <= QwtPlot::xTopMax) )
             {
                 scaleRect[axis].setLeft( canvasRect.left() + fw
                     - d_data->layoutData.scale[axis].start );
@@ -1047,15 +1214,6 @@
                     + d_data->layoutData.scale[axis].end );
             }
         }
-
-        if ( scaleRect[QwtPlot::xTop].isValid() )
-            scaleRect[QwtPlot::xTop].setBottom( canvasRect.top() );
-        if ( scaleRect[QwtPlot::xBottom].isValid() )
-            scaleRect[QwtPlot::xBottom].setTop( canvasRect.bottom() );
-        if ( scaleRect[QwtPlot::yLeft].isValid() )
-            scaleRect[QwtPlot::yLeft].setRight( canvasRect.left() );
-        if ( scaleRect[QwtPlot::yRight].isValid() )
-            scaleRect[QwtPlot::yRight].setLeft( canvasRect.right() );
     }
 }
 
@@ -1156,11 +1314,37 @@
         rect.setTop( rect.top() + dimTitle + d_data->spacing );
     }
 
-    d_data->canvasRect.setRect(
-        rect.x() + dimAxes[QwtPlot::yLeft],
-        rect.y() + dimAxes[QwtPlot::xTop],
-        rect.width() - dimAxes[QwtPlot::yRight] - dimAxes[QwtPlot::yLeft],
-        rect.height() - dimAxes[QwtPlot::xBottom] - dimAxes[QwtPlot::xTop] );
+    int x = rect.x();
+    for (int iIdxLeft=QwtPlot::yLeft; iIdxLeft<=QwtPlot::yLeftMax; iIdxLeft++)
+    {
+      x = x +dimAxes[iIdxLeft];
+    }
+    int y = rect.y();
+    for (int iIdxTop = QwtPlot::xTop; iIdxTop<=QwtPlot::xTopMax; iIdxTop++)
+    {
+      y = y + dimAxes[iIdxTop];
+    }
+
+    int w = rect.width();
+    for (int iIdxRight=QwtPlot::yRight; iIdxRight<=QwtPlot::yRightMax; iIdxRight++)
+    {
+      w = w - dimAxes[iIdxRight];
+    }
+    for (int iIdxLeft=QwtPlot::yLeft; iIdxLeft<=QwtPlot::yLeftMax; iIdxLeft++)
+    {
+      w = w - dimAxes[iIdxLeft];
+    }
+
+    int h = rect.height();
+    for (int iIdxBottom = QwtPlot::xBottom; iIdxBottom<=QwtPlot::xBottomMax; iIdxBottom++)
+    {
+      h = h - dimAxes[iIdxBottom];
+    }
+    for (int iIdxTop = QwtPlot::xTop; iIdxTop<=QwtPlot::xTopMax; iIdxTop++)
+    {
+      h = h - dimAxes[iIdxTop];
+    }
+    d_data->canvasRect.setRect(x,y,w,h);
 
     for ( int axis = 0; axis < QwtPlot::axisCnt; axis++ )
     {
@@ -1172,24 +1356,46 @@
             QRectF &scaleRect = d_data->scaleRect[axis];
 
             scaleRect = d_data->canvasRect;
-            switch ( axis )
+            
+            if ((axis>=QwtPlot::yLeft) && (axis<=QwtPlot::yLeftMax))
             {
-                case QwtPlot::yLeft:
-                    scaleRect.setX( d_data->canvasRect.left() - dim );
-                    scaleRect.setWidth( dim );
-                    break;
-                case QwtPlot::yRight:
-                    scaleRect.setX( d_data->canvasRect.right() );
-                    scaleRect.setWidth( dim );
-                    break;
-                case QwtPlot::xBottom:
-                    scaleRect.setY( d_data->canvasRect.bottom() );
-                    scaleRect.setHeight( dim );
-                    break;
-                case QwtPlot::xTop:
-                    scaleRect.setY( d_data->canvasRect.top() - dim );
-                    scaleRect.setHeight( dim );
-                    break;
+              int x = d_data->canvasRect.left() - dim;
+              for(int iIdxYLeft=axis-1; iIdxYLeft>=QwtPlot::yLeft; iIdxYLeft--)
+              {
+                x = x - dimAxes[iIdxYLeft];
+              }
+              scaleRect.setX(x);
+              scaleRect.setWidth(dim);
+            }
+            else if ((axis>=QwtPlot::yRight) && (axis<=QwtPlot::yRightMax))
+            {
+              int x = d_data->canvasRect.right();
+              for(int iIdxYRight=QwtPlot::yRight; iIdxYRight<=axis-1; iIdxYRight++)
+              {
+                x = x + dimAxes[iIdxYRight];
+              }
+              scaleRect.setX(x);
+              scaleRect.setWidth(dim);
+            }
+            else if ((axis>=QwtPlot::xBottom) && (axis<=QwtPlot::xBottomMax))
+            {
+              int y = d_data->canvasRect.bottom();
+              for(int iIdxXBottom=QwtPlot::xBottom; iIdxXBottom<=axis-1; iIdxXBottom++)
+              {
+                y = y + dimAxes[iIdxXBottom];
+              }
+              scaleRect.setY(y);
+              scaleRect.setHeight(dim);
+            }
+            else if ((axis>=QwtPlot::xTop) && (axis<=QwtPlot::xTopMax))
+            {
+              int y = d_data->canvasRect.top() - dim;
+              for(int iIdxXTop=axis-1; iIdxXTop>=QwtPlot::xTop; iIdxXTop--)
+              {
+                y = y - dimAxes[iIdxXTop];
+              }
+              scaleRect.setY(y);
+              scaleRect.setHeight(dim);
             }
             scaleRect = scaleRect.normalized();
         }
diff --exclude CVS --exclude .git -uNr qwt-6.0.1/src/qwt_plot_panner.cpp qwt-6.0.1.modified/src/qwt_plot_panner.cpp
--- qwt-6.0.1/src/qwt_plot_panner.cpp	2011-08-01 16:33:53.000000000 +0200
+++ qwt-6.0.1.modified/src/qwt_plot_panner.cpp	2014-04-15 08:45:16.337568928 +0200
@@ -144,7 +144,7 @@
         const double p2 = map.transform( plot->axisScaleDiv( axis )->upperBound() );
 
         double d1, d2;
-        if ( axis == QwtPlot::xBottom || axis == QwtPlot::xTop )
+        if ( ( axis >= QwtPlot::xBottom && axis <= QwtPlot::xBottomMax ) || ( axis >= QwtPlot::xTop && axis <= QwtPlot::xTopMax ) )
         {
             d1 = map.invTransform( p1 - dx );
             d2 = map.invTransform( p2 - dx );
diff --exclude CVS --exclude .git -uNr qwt-6.0.1/src/qwt_plot_renderer.cpp qwt-6.0.1.modified/src/qwt_plot_renderer.cpp
--- qwt-6.0.1/src/qwt_plot_renderer.cpp	2011-08-01 16:33:53.000000000 +0200
+++ qwt-6.0.1.modified/src/qwt_plot_renderer.cpp	2014-04-15 08:45:16.337568928 +0200
@@ -647,42 +647,34 @@
     QwtScaleDraw::Alignment align;
     double x, y, w;
 
-    switch ( axisId )
-    {
-        case QwtPlot::yLeft:
-        {
-            x = rect.right() - 1.0 - baseDist;
-            y = rect.y() + startDist;
-            w = rect.height() - startDist - endDist;
-            align = QwtScaleDraw::LeftScale;
-            break;
-        }
-        case QwtPlot::yRight:
-        {
-            x = rect.left() + baseDist;
-            y = rect.y() + startDist;
-            w = rect.height() - startDist - endDist;
-            align = QwtScaleDraw::RightScale;
-            break;
-        }
-        case QwtPlot::xTop:
-        {
-            x = rect.left() + startDist;
-            y = rect.bottom() - 1.0 - baseDist;
-            w = rect.width() - startDist - endDist;
-            align = QwtScaleDraw::TopScale;
-            break;
-        }
-        case QwtPlot::xBottom:
-        {
-            x = rect.left() + startDist;
-            y = rect.top() + baseDist;
-            w = rect.width() - startDist - endDist;
-            align = QwtScaleDraw::BottomScale;
-            break;
-        }
-        default:
-            return;
+    if( (axisId >= QwtPlot::yLeft) && (axisId <= QwtPlot::yLeftMax) ) {
+
+        x = rect.right() - 1.0 - baseDist;
+        y = rect.y() + startDist;
+        w = rect.height() - startDist - endDist;
+        align = QwtScaleDraw::LeftScale;
+
+        
+    } else if( (axisId >= QwtPlot::yRight) && (axisId <= QwtPlot::yRightMax) ) {
+     
+        x = rect.left() + baseDist;
+        y = rect.y() + startDist;
+        w = rect.height() - startDist - endDist;
+        align = QwtScaleDraw::RightScale;
+
+    } else if( (axisId >= QwtPlot::xTop) && (axisId <= QwtPlot::xTopMax) ) {
+
+        x = rect.left() + startDist;
+        y = rect.bottom() - 1.0 - baseDist;
+        w = rect.width() - startDist - endDist;
+        align = QwtScaleDraw::TopScale;
+
+    } else if( (axisId >= QwtPlot::xBottom) && (axisId <= QwtPlot::xBottomMax) ) {
+
+        x = rect.left() + startDist;
+        y = rect.top() + baseDist;
+        w = rect.width() - startDist - endDist;
+        align = QwtScaleDraw::BottomScale;
     }
 
     scaleWidget->drawTitle( painter, align, rect );
@@ -803,7 +795,7 @@
             const int eDist = plot->axisWidget( axisId )->endBorderDist();
             const QRectF &scaleRect = plot->plotLayout()->scaleRect( axisId );
 
-            if ( axisId == QwtPlot::xTop || axisId == QwtPlot::xBottom )
+            if ( ( axisId >= QwtPlot::xTop && axisId <= QwtPlot::xTopMax ) || ( axisId >= QwtPlot::xBottom && axisId <= QwtPlot::xBottomMax ) )
             {
                 from = scaleRect.left() + sDist;
                 to = scaleRect.right() - eDist;
@@ -816,8 +808,10 @@
         }
         else
         {
-            int margin = plot->plotLayout()->canvasMargin( axisId );
-            if ( axisId == QwtPlot::yLeft || axisId == QwtPlot::yRight )
+            int margin = 0;
+            if ( !plot->plotLayout()->alignCanvasToScales() )
+                margin = plot->plotLayout()->canvasMargin( axisId );
+            if ( ( axisId >= QwtPlot::yLeft && axisId <= QwtPlot::yLeftMax ) || ( axisId >= QwtPlot::yRight && axisId <= QwtPlot::yRightMax ) )
             {
                 from = canvasRect.bottom() - margin;
                 to = canvasRect.top() + margin;
