export LC_ALL = C

TOOLCHAIN_FLAG := SOURCERY_GCC=1

# Export RFSDIR to be used in the Makefiles generated by qmake.
export RFSDIR = $(LTIB_RFSDIR)

LDIR := $(CURDIR)/localfs
SPECDIR := $(CURDIR)/rpm/SPECS

QMAKE = $(QT_INSTALL_DIR)/bin/qmake

SMP_FLAG := -j$(shell grep -c ^processor /proc/cpuinfo)

# Use ccache.
export PATH := /usr/lib/ccache:$(PATH)

# All build targets
ALL_TARGETS = \
	local_prepare \
	setup_time \
	splash \
	cgic_work \
	ATCMcontrol_RunTimeSystem \
	plugins

ifneq ($(wildcard factory_test/trunk/.*),)
ALL_TARGETS += factory_test
endif

ifneq ($(wildcard key_generator/trunk/.*),)
ALL_TARGETS += key_generator
endif

ALL_TARGETS += \
	factory_data \
	localfs_rpm

# All clean targets
CLEAN_TARGETS = \
	local_prepare_clean \
	setup_time_clean \
	splash_clean \
	cgic_work_clean \
	ATCMcontrol_RunTimeSystem_clean \

ifneq ($(wildcard factory_test/trunk/.*),)
CLEAN_TARGETS += factory_test_clean
endif

ifneq ($(wildcard key_generator/trunk/.*),)
CLEAN_TARGETS += key_generator_clean
endif

CLEAN_TARGETS += \
	factory_data_clean \
	localfs_rpm_clean


# ##########################
#
# Build/deploy all projects

.PHONY: all
all: $(ALL_TARGETS)



# ##########################
#
# local_prepare
#

.PHONY: local_prepare
local_prepare: local_prepare_clean local_prepare_build local_prepare_install

.PHONY: local_prepare_build
local_prepare_build:
	mkdir -p $(LDIR)

.PHONY: local_prepare_install
local_prepare_install:
	sudo rpm --nodeps --root $(LDIR) --dbpath /var/lib/rpm --prefix / --ignorearch -Uvh --define '_tmppath /tmp/rpm' $(RPMBASEDIR)/RPMS/arm/skell-lfs-1.18-2.arm.rpm
	sudo chown -R $(USER) $(LDIR)
	sudo rm -rf $(LDIR)/var/lib/rpm
	-sudo rmdir $(LDIR)/var/lib
	-sudo rmdir $(LDIR)/var

.PHONY: local_prepare_clean
local_prepare_clean:
	sudo rm -rf $(LDIR)

# ##########################
#
# setup_time
#

.PHONY: setup_time
setup_time: setup_time_clean setup_time_build setup_time_install

.PHONY: setup_time_build
setup_time_build: PRJDIR := $(CURDIR)/setup_time
setup_time_build:
	test -n $(PRJDIR)
	cd $(PRJDIR); $(QMAKE) -spec qws/linux-g++-mx
	$(MAKE) $(SMP_FLAG) -C $(PRJDIR)

.PHONY: setup_time_install
setup_time_install: PRJDIR := $(CURDIR)/setup_time
setup_time_install:
	test -n $(PRJDIR)
	install -D -m 0755 $(PRJDIR)/setup_time $(LDIR)/root/setup_time

.PHONY: setup_time_clean
setup_time_clean: PRJDIR := $(CURDIR)/setup_time
setup_time_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && $(MAKE) -C $(PRJDIR) distclean

# ##########################
#
# plugins
#

.PHONY: plugins
plugins: PRJVER := 1.0
plugins: plugins_clean plugins_build plugins_install

.PHONY: plugins_build
plugins_build: PRJDIR := $(CURDIR)/mect_plugins
plugins_build:
	test -n $(PRJDIR)
	cd $(PRJDIR); git archive -o $(RPMBASEDIR)/SOURCES/mect_plugins-$(PRJVER).tar --format=tar --prefix=mect_plugins-$(PRJVER)/ HEAD
	rpmbuild --define 'ver $(PRJVER)' --define 'rel $(BUILD_RELEASE)' --define 'RFSDIR $(RFSDIR)' --define 'QMAKE $(QMAKE)' --define '_topdir $(RPMBASEDIR)' --dbpath $(RPMTMPDIR)/rpmdb --target arm --define '_target_cpu arm' --define '_arch arm' --define '_prefix /' --define '_rpmdir $(RPMBASEDIR)/RPMS' -bb --clean --rmsource $(SPECDIR)/mect_plugins.spec

.PHONY: plugins_install
plugins_install: PRJDIR := $(CURDIR)/mect_plugins
plugins_install:
	test -n $(PRJDIR)
	-sudo $(RPMBIN) --root $(RFSDIR) --dbpath /var/lib/rpm -e --allmatches --nodeps --define '_tmppath /tmp/ltib' mect_plugins 2>/dev/null
	sudo $(RPMBIN) --root $(RFSDIR) --dbpath /var/lib/rpm --prefix / --ignorearch -ivh --force --excludedocs --define '_tmppath /tmp/ltib' $(RPMDIR)/mect_plugins-$(PRJVER)-*.$(TARGET_ARCH).rpm

.PHONY: plugins_clean
plugins_clean: PRJDIR := $(CURDIR)/mect_plugins
plugins_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && $(MAKE) -C $(PRJDIR) distclean

# ##########################
#
# splash
#

.PHONY: splash
splash: splash_clean splash_build splash_install

.PHONY: splash_build
splash_build: PRJDIR := $(CURDIR)/splash
splash_build:
	test -n $(PRJDIR)
	cd $(PRJDIR); $(QMAKE) -spec qws/linux-g++-mx
	$(MAKE) $(SMP_FLAG) -C $(PRJDIR)

.PHONY: splash_install
splash_install: PRJDIR := $(CURDIR)/splash
splash_install:
	test -n $(PRJDIR)
	install -D -m 0755 $(PRJDIR)/splash $(LDIR)/root/splash

.PHONY: splash_clean
splash_clean: PRJDIR := $(CURDIR)/splash
splash_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && $(MAKE) -C $(PRJDIR) distclean

# ##########################
#
# cgic_work
#

.PHONY: cgic_work
cgic_work: cgic_work_clean cgic_work_build cgic_work_install

.PHONY: cgic_work_build
cgic_work_build: PRJDIR := $(CURDIR)/cgic_work
cgic_work_build:
	test -n $(PRJDIR)
	$(MAKE) $(SMP_FLAG) -C $(PRJDIR) $(TOOLCHAIN_FLAG)

.PHONY: cgic_work_install
cgic_work_install: PRJDIR := $(CURDIR)/cgic_work
cgic_work_install:
	test -n $(PRJDIR)
	$(MAKE) -C $(PRJDIR) $(TOOLCHAIN_FLAG) install

.PHONY: cgic_work_clean
cgic_work_clean: PRJDIR := $(CURDIR)/cgic_work
cgic_work_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && $(MAKE) -C $(PRJDIR) $(TOOLCHAIN_FLAG) clobber

# ##########################
#
# ATCMcontrol_RunTimeSystem
#

.PHONY: ATCMcontrol_RunTimeSystem
ATCMcontrol_RunTimeSystem: ATCMcontrol_RunTimeSystem_clean ATCMcontrol_RunTimeSystem_build ATCMcontrol_RunTimeSystem_install

.PHONY: ATCMcontrol_RunTimeSystem_build
ATCMcontrol_RunTimeSystem_build: PRJDIR := $(CURDIR)/ATCMcontrol_RunTimeSystem
ATCMcontrol_RunTimeSystem_build:
	test -n $(PRJDIR)
	$(MAKE) -j1 -C $(PRJDIR) -f _fcrts.mak TARGET=4CPC DEBUG=0 PRODUCT="USE_CROSSTABLE" $(TOOLCHAIN_FLAG) ROOTFS='$(LTIB_RFSDIR)' CC_VERSION='$(CC_VERSION)' CC_DIRECTORY='$(CC_DIRECTORY)' CC_RADIX='$(CC_RADIX)' all

.PHONY: ATCMcontrol_RunTimeSystem_install
ATCMcontrol_RunTimeSystem_install: PRJDIR := $(CURDIR)/ATCMcontrol_RunTimeSystem
ATCMcontrol_RunTimeSystem_install:
	test -n $(PRJDIR)
	install -D -m 0755 $(PRJDIR)/bin/fcrts $(LDIR)/root/fcrts

.PHONY: ATCMcontrol_RunTimeSystem_clean
ATCMcontrol_RunTimeSystem_clean: PRJDIR := $(CURDIR)/ATCMcontrol_RunTimeSystem
ATCMcontrol_RunTimeSystem_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && $(MAKE) -j1 -C $(PRJDIR) -f _fcrts.mak TARGET=4CPC DEBUG=0 PRODUCT="USE_CROSSTABLE" $(TOOLCHAIN_FLAG) ROOTFS='$(LTIB_RFSDIR)' CC_VERSION='$(CC_VERSION)' CC_DIRECTORY='$(CC_DIRECTORY)' CC_RADIX='$(CC_RADIX)' clobber

# ##########################
#
# factory_data
#

.PHONY: factory_data
factory_data: factory_data_clean factory_data_build factory_data_install

.PHONY: factory_data_build
factory_data_build: PRJDIR := $(CURDIR)
factory_data_build:
	test -n $(PRJDIR)
	tar czvf $(PRJDIR)/factory_data.tar.gz --exclude=.svn --exclude=.git -C $(PRJDIR)/localfs .

.PHONY: factory_data_install
factory_data_install: PRJDIR := $(CURDIR)
factory_data_install:
	test -n $(PRJDIR)
	mv $(PRJDIR)/factory_data.tar.gz $(LDIR)

.PHONY: factory_data_clean
factory_data_clean: PRJDIR := $(CURDIR)
factory_data_clean:
	test -n $(PRJDIR)
	rm -f $(LDIR)/factory_data.tar.gz

# ##########################
#
# localfs_rpm
#

.PHONY: localfs_rpm
localfs_rpm: localfs_rpm_clean localfs_rpm_build localfs_rpm_install

.PHONY: localfs_rpm_build
localfs_rpm_build: PRJDIR := $(CURDIR)
localfs_rpm_build:
	test -n $(PRJDIR)

.PHONY: localfs_rpm_install
localfs_rpm_install: PRJDIR := $(CURDIR)
localfs_rpm_install:
	test -n $(PRJDIR)
	tar cjvf $(RPMBASEDIR)/SOURCES/local.tar.bz2 --exclude=.svn -C $(LDIR) .
	rm -rf $(RPMTMPDIR)/{*,.??*}
	rpmbuild --define 'rel $(BUILD_RELEASE)' --define '_topdir $(RPMBASEDIR)' --dbpath $(RPMTMPDIR)/rpmdb --target arm --define '_target_cpu arm' --define '_arch arm' --define '_prefix /' --define '_rpmdir $(RPMBASEDIR)/RPMS' -bb --clean --rmsource $(SPECDIR)/local.spec

.PHONY: localfs_rpm_clean
localfs_rpm_clean: PRJDIR := $(CURDIR)
localfs_rpm_clean:
	test -n $(PRJDIR)

# ##########################
#
# factory_test
#

ifneq ($(wildcard factory_test/trunk/.*),)

.PHONY: factory_test
factory_test: factory_test_clean factory_test_build factory_test_install

.PHONY: factory_test_build
factory_test_build: PRJDIR := $(CURDIR)/factory_test/trunk
factory_test_build:
	test -n $(PRJDIR)
	cd $(PRJDIR); $(QMAKE) -spec qws/linux-g++-mx -config codesourcery
	$(MAKE) $(SMP_FLAG) -C $(PRJDIR)

.PHONY: factory_test_install
factory_test_install: PRJDIR := $(CURDIR)/factory_test/trunk
factory_test_install:
	test -n $(PRJDIR)
	install -D -m 755 $(PRJDIR)/factory_test $(LDIR)/root/factory_test

.PHONY: factory_test_clean
factory_test_clean: PRJDIR := $(CURDIR)/factory_test/trunk
factory_test_clean:
	test -n $(PRJDIR)
	-make -C $(PRJDIR) distclean
	make -C $(PRJDIR)/trama $(TOOLCHAIN_FLAG) distclean

endif

# ##########################
#
# key_generator
#

ifneq ($(wildcard key_generator/trunk/.*),)

.PHONY: key_generator
key_generator: key_generator_clean key_generator_build key_generator_install

.PHONY: key_generator_build
key_generator_build: PRJDIR := $(CURDIR)/key_generator/trunk
key_generator_build:
	test -n $(PRJDIR)
	cd $(PRJDIR); $(QMAKE) -spec qws/linux-g++-mx
	make $(SMP_FLAG) -C $(PRJDIR)

.PHONY: key_generator_install
key_generator_install: PRJDIR := $(CURDIR)/key_generator/trunk
key_generator_install:
	test -n $(PRJDIR)
	install -D -m 755 $(PRJDIR)/keyGenerator $(LDIR)/root/key_generator

.PHONY: key_generator_clean
key_generator_clean: PRJDIR := $(CURDIR)/key_generator/trunk
key_generator_clean:
	test -n $(PRJDIR)
	-make -C $(PRJDIR) distclean

endif



# ##########################
# Utils

.PHONY: clean
clean: $(CLEAN_TARGETS)
	sudo rm -rf $(LDIR)
