TARGET := tpac_1007
RELEASE := rel5.3rc2
TOOLCHAIN_FLAG := SOURCERY_GCC=1
TOOLCHAIN := codesourcery

# TODO Get these from parent make
# Export RFSDIR for the Makefiles generated by qmake
export RFSDIR := $(HOME)/mect.development/ltib/rootfs
RPMDIR := ~/mect.development/ltib/rpm

LFSDIR := $(RFSDIR)/../../images-all/$(TARGET)/localfs
LDIR := $(CURDIR)/atn01/file_system/local
RPMROOTDIR := $(CURDIR)/rpmbuild_root
RPMTMPDIR := $(CURDIR)/tmp/rpm

SMP_FLAG := -j$(shell grep -c ^processor /proc/cpuinfo)

export PATH := /usr/lib/ccache:/opt/CodeSourcery/bin:/opt/Trolltech/bin:$(PATH)



# ##########################
#
# Build/deploy what creates build_img.sh

.PHONY: build_img
build_img: local_prepare keyGenerator setup_time factory_test splash cgic_work systool fcrts factory_data splashscreen localfs_patch

# ##########################
#
# Build/deploy all GPL stuff

.PHONY: gpl
gpl: local_prepare setup_time splash cgic_work systool fcrts factory_data splashscreen localfs_patch

# ##########################
#
# Build/deploy all stuff

.PHONY: all
all: gpl factory_test



# ##########################
#
# local_prepare
#

.PHONY: local_prepare
local_prepare: local_prepare_clean local_prepare_build local_prepare_install

.PHONY: local_prepare_build
local_prepare_build: PRJDIR := $(CURDIR)/atn01/file_system
local_prepare_build:
	test -n "$(PRJDIR)"
	test -d "$(PRJDIR)"/local/flash || mkdir "$(PRJDIR)"/local/flash
	for d in control etc root data; do \
		test -h "$(PRJDIR)"/local/$$d && rm "$(PRJDIR)"/local/$$d; \
		test -d "$(PRJDIR)"/local/$$d && mv "$(PRJDIR)"/local/$$d "$(PRJDIR)"/local/flash; \
		ln -sf flash/$$d "$(PRJDIR)"/local/$$d; \
	done

.PHONY: local_prepare_install
local_prepare_install: PRJDIR := $(CURDIR)/atn01/file_system
local_prepare_install:
	test -n "$(PRJDIR)"
	sudo rpm --nodeps --root "$(PRJDIR)" --dbpath /var/lib/rpm --prefix / --ignorearch -Uvh --force --define '_tmppath /tmp/rpm' $(RPMDIR)/RPMS/arm/skell-local-1.18-2.arm.rpm
	sudo chown -R $(USER) "$(PRJDIR)"/local
	sudo rm -rf "$(PRJDIR)"/var/lib/rpm
	-sudo rmdir "$(PRJDIR)"/var/lib
	-sudo rmdir "$(PRJDIR)"/var

.PHONY: local_prepare_clean
local_prepare_clean: PRJDIR := $(CURDIR)/atn01/file_system
local_prepare_clean:
	test -n "$(PRJDIR)"
	#sudo rm -rf "$(PRJDIR)"/* "$(PRJDIR)"/.??*

# ##########################
#
# keyGenerator
#

.PHONY: keyGenerator
keyGenerator: keyGenerator_clean keyGenerator_build keyGenerator_install

.PHONY: keyGenerator_build
keyGenerator_build: PRJDIR := $(CURDIR)/atn01/keyGenerator
keyGenerator_build:
	test -n "$(PRJDIR)"
	cd "$(PRJDIR)"; qmake -spec qws/linux-arm-gnueabi-g++
	make $(SMP_FLAG) -C "$(PRJDIR)"

.PHONY: keyGenerator_install
keyGenerator_install: PRJDIR := $(CURDIR)/atn01/keyGenerator
keyGenerator_install:
	test -n "$(PRJDIR)"
	install -D -m 755 "$(PRJDIR)"/keyGenerator "$(LDIR)"/root/keyGenerator

.PHONY: keyGenerator_clean
keyGenerator_clean: PRJDIR := $(CURDIR)/atn01/keyGenerator
keyGenerator_clean:
	test -n "$(PRJDIR)"
	-make -C "$(PRJDIR)" distclean

# ##########################
#
# setup_time
#

.PHONY: setup_time
setup_time: setup_time_clean setup_time_build setup_time_install

.PHONY: setup_time_build
setup_time_build: PRJDIR := $(CURDIR)/setup_time
setup_time_build:
	test -n "$(PRJDIR)"
	cd "$(PRJDIR)"; qmake -spec qws/linux-arm-gnueabi-g++
	make $(SMP_FLAG) -C "$(PRJDIR)"

.PHONY: setup_time_install
setup_time_install: PRJDIR := $(CURDIR)/setup_time
setup_time_install:
	test -n "$(PRJDIR)"
	install -D -m 755 "$(PRJDIR)"/setup_time "$(LDIR)"/root/setup_time

.PHONY: setup_time_clean
setup_time_clean: PRJDIR := $(CURDIR)/setup_time
setup_time_clean:
	test -n "$(PRJDIR)"
	-make -C "$(PRJDIR)" distclean

# ##########################
#
# splash
#

.PHONY: splash
splash: splash_clean splash_build splash_install

.PHONY: splash_build
splash_build: PRJDIR := $(CURDIR)/splash
splash_build:
	test -n "$(PRJDIR)"
	cd "$(PRJDIR)"; qmake -spec qws/linux-arm-gnueabi-g++
	make $(SMP_FLAG) -C "$(PRJDIR)"

.PHONY: splash_install
splash_install: PRJDIR := $(CURDIR)/splash
splash_install:
	test -n "$(PRJDIR)"
	install -D -m 0755 "$(PRJDIR)"/splash "$(LDIR)"/root/splash

.PHONY: splash_clean
splash_clean: PRJDIR := $(CURDIR)/splash
splash_clean:
	test -n "$(PRJDIR)"

# ##########################
#
# cgic_work
#

.PHONY: cgic_work
cgic_work: cgic_work_clean cgic_work_build cgic_work_install

.PHONY: cgic_work_build
cgic_work_build: PRJDIR := $(CURDIR)/cgic_work
cgic_work_build:
	test -n "$(PRJDIR)"
	make $(SMP_FLAG) -C "$(PRJDIR)" $(TOOLCHAIN_FLAG)

.PHONY: cgic_work_install
cgic_work_install: PRJDIR := $(CURDIR)/cgic_work
cgic_work_install:
	test -n "$(PRJDIR)"
	make -C "$(PRJDIR)" $(TOOLCHAIN_FLAG) install

.PHONY: cgic_work_clean
cgic_work_clean: PRJDIR := $(CURDIR)/cgic_work
cgic_work_clean:
	test -n "$(PRJDIR)"
	-make -C "$(PRJDIR)" $(TOOLCHAIN_FLAG) distclean

# ##########################
#
# systool
#

.PHONY: systool
systool: systool_clean systool_build systool_install

.PHONY: systool_build
systool_build: PRJDIR := $(CURDIR)/atn01
systool_build:
	test -n "$(PRJDIR)"
	make $(SMP_FLAG) -C "$(PRJDIR)" $(TOOLCHAIN_FLAG) systool

.PHONY: systool_install
systool_install: PRJDIR := $(CURDIR)/atn01
systool_install:
	test -n "$(PRJDIR)"
	make -C "$(PRJDIR)" $(TOOLCHAIN_FLAG) systoolIN
	if test "$(TARGET)" = "ATN01"; then \
		chmod a+x "$(PRJDIR)"/file_system/local/root/systool; \
	else \
		chmod a-x "$(PRJDIR)"/file_system/local/root/systool; \
	fi

.PHONY: systool_clean
systool_clean: PRJDIR := $(CURDIR)/atn01
systool_clean:
	test -n "$(PRJDIR)"
	-make -C "$(PRJDIR)" $(TOOLCHAIN_FLAG) systoolDC

# ##########################
#
# fcrts
#

.PHONY: fcrts
fcrts: fcrts_clean fcrts_build fcrts_install

.PHONY: fcrts_build
fcrts_build: PRJDIR := $(CURDIR)/ATCMControl_runtime_system
fcrts_build:
	test -n "$(PRJDIR)"
	make -j1 -C "$(PRJDIR)" -f _fcrts.mak TARGET=4CPC DEBUG=0 PRODUCT="USE_CROSSTABLE" $(TOOLCHAIN_FLAG) all

.PHONY: fcrts_install
fcrts_install: PRJDIR := $(CURDIR)/ATCMControl_runtime_system
fcrts_install:
	test -n "$(PRJDIR)"
	install -D -m 0755 "$(PRJDIR)"/bin/fcrts "$(LDIR)"/root/fcrts
	rm -rf "$(LDIR)"/control/*

.PHONY: fcrts_clean
fcrts_clean: PRJDIR := $(CURDIR)/ATCMControl_runtime_system
fcrts_clean:
	test -n "$(PRJDIR)"
	make -j1 -C "$(PRJDIR)" -f _fcrts.mak TARGET=4CPC DEBUG=0 PRODUCT="USE_CROSSTABLE" $(TOOLCHAIN_FLAG) clobber

# ##########################
#
# factory_data
#

.PHONY: factory_data
factory_data: factory_data_clean factory_data_build factory_data_install

.PHONY: factory_data_build
factory_data_build: PRJDIR := $(CURDIR)/atn01/file_system
factory_data_build:
	test -n "$(PRJDIR)"
	tar czvf "$(PRJDIR)"/factory_data.tar.gz --exclude=.svn -C "$(PRJDIR)" local

.PHONY: factory_data_install
factory_data_install: PRJDIR := $(CURDIR)/atn01/file_system
factory_data_install:
	test -n "$(PRJDIR)"
	mv "$(PRJDIR)"/factory_data.tar.gz "$(LDIR)"

.PHONY: factory_data_clean
factory_data_clean: PRJDIR := $(CURDIR)/atn01/file_system
factory_data_clean:
	test -n "$(PRJDIR)"
	rm -f "$(LDIR)"/factory_data.tar.gz

# ##########################
#
# localfs_patch
#

.PHONY: localfs_patch
localfs_patch: localfs_patch_clean localfs_patch_build localfs_patch_install localfs_patch_rpm

.PHONY: localfs_patch_build
localfs_patch_build: PRJDIR := $(CURDIR)/atn01/file_system/local
localfs_patch_build:
	test -n "$(PRJDIR)"
	mkdir -p "$(LFSDIR)"

.PHONY: localfs_patch_install
localfs_patch_install: PRJDIR := $(CURDIR)/atn01/file_system/local
localfs_patch_install:
	test -n "$(PRJDIR)"
	tar cjvf "$(LFSDIR)"/../local_patch.tar.bz2 --exclude=.svn -C "$(PRJDIR)" .

.PHONY: localfs_patch_rpm
localfs_patch_rpm: PRJDIR := $(CURDIR)/atn01/file_system/local
localfs_patch_rpm:
	test -n "$(PRJDIR)"
	rm -rf "$(RPMROOTDIR)"; mkdir -p "$(RPMROOTDIR)"/SOURCES
	rm -rf "$(RPMTMPDIR)"; mkdir -p "$(RPMTMPDIR)"
	cp "$(LFSDIR)"/../local_patch.tar.bz2 "$(RPMROOTDIR)"/SOURCES
	rpmbuild --define '_topdir $(RPMROOTDIR)' --dbpath $(RPMTMPDIR)/rpmdb --target arm --define '_target_cpu arm' --define '_arch arm' --define '_prefix /' --define '_rpmdir $(RPMTMPDIR)/RPMS' -bb --clean --rmsource rpm_specs/local.spec

.PHONY: localfs_patch_clean
localfs_patch_clean: PRJDIR := $(CURDIR)/atn01/file_system/local
localfs_patch_clean:
	test -n "$(PRJDIR)"

# ##########################
#
# splashscreen
#

.PHONY: splashscreen
splashscreen: splashscreen_clean splashscreen_build splashscreen_install

.PHONY: splashscreen_build
splashscreen_build: PRJDIR := $(CURDIR)/qt_atcm/qt_templates/ATCM-template-project/config
splashscreen_build:
	test -n "$(PRJDIR)"

.PHONY: splashscreen_install
splashscreen_install: PRJDIR := $(CURDIR)/qt_atcm/qt_templates/ATCM-template-project/config
splashscreen_install:
	test -n "$(PRJDIR)"
	install -D -m 0644 "$(PRJDIR)"/splash.png "$(LDIR)"/etc/sysconfig/img/splash.png
	install -D -m 0644 "$(PRJDIR)"/systool.png "$(LDIR)"/etc/sysconfig/img/systool.png

.PHONY: splashscreen_clean
splashscreen_clean: PRJDIR := $(CURDIR)/qt_atcm/qt_templates/ATCM-template-project/config
splashscreen_clean:
	test -n "$(PRJDIR)"

# ##########################
#
# factory_test
#
# NOTE: Proprietary code (Trama)
#

.PHONY: factory_test
factory_test: factory_test_clean factory_test_build factory_test_install

.PHONY: factory_test_build
factory_test_build: PRJDIR := $(CURDIR)/atn01/factory_test
factory_test_build:
	test -n "$(PRJDIR)"
	cd "$(PRJDIR)"; qmake -spec qws/linux-arm-gnueabi-g++ -config $(TOOLCHAIN)
	make $(SMP_FLAG) -C "$(PRJDIR)"

.PHONY: factory_test_install
factory_test_install: PRJDIR := $(CURDIR)/atn01/factory_test
factory_test_install:
	test -n "$(PRJDIR)"
	install -D -m 0755 "$(PRJDIR)"/factory_test "$(LDIR)"/root/factory_test

.PHONY: factory_test_clean
factory_test_clean: PRJDIR := $(CURDIR)/atn01/factory_test
factory_test_clean:
	test -n "$(PRJDIR)"
	-make -C "$(PRJDIR)" distclean
	make -C "$(PRJDIR)"/trama $(TOOLCHAIN_FLAG) distclean


# ##########################
#
# Housekeeping

.PHONY: clean
clean:
	sudo rm -rf "$(LFSDIR)"

.PHONY: upload
upload:
	scp Makefile mihai@10.0.2.2:public_html/mect/ftp/Makefile.ltib-local
