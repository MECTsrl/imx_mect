TARGET := tpac_1007
RELEASE := 6.6rc0
TOOLCHAIN_FLAG := SOURCERY_GCC=1
TOOLCHAIN := codesourcery

# TODO Get these from parent make
# Export RFSDIR for the Makefiles generated by qmake
export RFSDIR := $(CURDIR)/../ltib/rootfs
RPMDIR := $(CURDIR)/../ltib/rpm

LFSDIR := $(RFSDIR)/../../images-all/$(TARGET)/localfs
LDIR := $(CURDIR)/localfs
SPECDIR := $(CURDIR)/rpm/SPECS

SMP_FLAG := -j$(shell grep -c ^processor /proc/cpuinfo)

export PATH := /usr/lib/ccache:/opt/CodeSourcery/bin:/opt/Trolltech/bin:$(PATH)


# ##########################
#
# Build/deploy all projects

.PHONY: all
all: local_prepare setup_time splash cgic_work ATCMControl_runtime_system factory_data localfs_rpm



# ##########################
#
# local_prepare
#

.PHONY: local_prepare
local_prepare: local_prepare_clean local_prepare_build local_prepare_install

.PHONY: local_prepare_build
local_prepare_build:
	mkdir -p $(LDIR)

.PHONY: local_prepare_install
local_prepare_install:
	sudo rpm --nodeps --root $(LDIR) --dbpath /var/lib/rpm --prefix / --ignorearch -Uvh --define '_tmppath /tmp/rpm' $(RPMDIR)/RPMS/arm/skell-lfs-1.18-2.arm.rpm
	sudo chown -R $(USER) $(LDIR)
	sudo rm -rf $(LDIR)/var/lib/rpm
	-sudo rmdir $(LDIR)/var/lib
	-sudo rmdir $(LDIR)/var

.PHONY: local_prepare_clean
local_prepare_clean:
	sudo rm -rf $(LDIR)

# ##########################
#
# setup_time
#

.PHONY: setup_time
setup_time: setup_time_clean setup_time_build setup_time_install

.PHONY: setup_time_build
setup_time_build: PRJDIR := $(CURDIR)/setup_time
setup_time_build:
	test -n $(PRJDIR)
	cd $(PRJDIR); qmake -spec qws/linux-arm-gnueabi-g++
	make $(SMP_FLAG) -C $(PRJDIR)

.PHONY: setup_time_install
setup_time_install: PRJDIR := $(CURDIR)/setup_time
setup_time_install:
	test -n $(PRJDIR)
	install -D -m 0755 $(PRJDIR)/setup_time $(LDIR)/root/setup_time

.PHONY: setup_time_clean
setup_time_clean: PRJDIR := $(CURDIR)/setup_time
setup_time_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && make -C $(PRJDIR) distclean

# ##########################
#
# splash
#

.PHONY: splash
splash: splash_clean splash_build splash_install

.PHONY: splash_build
splash_build: PRJDIR := $(CURDIR)/splash
splash_build:
	test -n $(PRJDIR)
	cd $(PRJDIR); qmake -spec qws/linux-arm-gnueabi-g++
	make $(SMP_FLAG) -C $(PRJDIR)

.PHONY: splash_install
splash_install: PRJDIR := $(CURDIR)/splash
splash_install:
	test -n $(PRJDIR)
	install -D -m 0755 $(PRJDIR)/splash $(LDIR)/root/splash

.PHONY: splash_clean
splash_clean: PRJDIR := $(CURDIR)/splash
splash_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && make -C $(PRJDIR) distclean

# ##########################
#
# cgic_work
#

.PHONY: cgic_work
cgic_work: cgic_work_clean cgic_work_build cgic_work_install

.PHONY: cgic_work_build
cgic_work_build: PRJDIR := $(CURDIR)/cgic_work
cgic_work_build:
	test -n $(PRJDIR)
	make $(SMP_FLAG) -C $(PRJDIR) $(TOOLCHAIN_FLAG)

.PHONY: cgic_work_install
cgic_work_install: PRJDIR := $(CURDIR)/cgic_work
cgic_work_install:
	test -n $(PRJDIR)
	make -C $(PRJDIR) $(TOOLCHAIN_FLAG) install

.PHONY: cgic_work_clean
cgic_work_clean: PRJDIR := $(CURDIR)/cgic_work
cgic_work_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && make -C $(PRJDIR) $(TOOLCHAIN_FLAG) clobber

# ##########################
#
# ATCMControl_runtime_system
#

.PHONY: ATCMControl_runtime_system
ATCMControl_runtime_system: ATCMControl_runtime_system_clean ATCMControl_runtime_system_build ATCMControl_runtime_system_install

.PHONY: ATCMControl_runtime_system_build
ATCMControl_runtime_system_build: PRJDIR := $(CURDIR)/ATCMControl_runtime_system
ATCMControl_runtime_system_build:
	test -n $(PRJDIR)
	make -j1 -C $(PRJDIR) -f _fcrts.mak TARGET=4CPC DEBUG=0 PRODUCT="USE_CROSSTABLE" $(TOOLCHAIN_FLAG) all

.PHONY: ATCMControl_runtime_system_install
ATCMControl_runtime_system_install: PRJDIR := $(CURDIR)/ATCMControl_runtime_system
ATCMControl_runtime_system_install:
	test -n $(PRJDIR)
	install -D -m 0755 $(PRJDIR)/bin/fcrts $(LDIR)/root/fcrts

.PHONY: ATCMControl_runtime_system_clean
ATCMControl_runtime_system_clean: PRJDIR := $(CURDIR)/ATCMControl_runtime_system
ATCMControl_runtime_system_clean:
	test -n $(PRJDIR)
	-test -d $(PRJDIR) && make -j1 -C $(PRJDIR) -f _fcrts.mak TARGET=4CPC DEBUG=0 PRODUCT="USE_CROSSTABLE" $(TOOLCHAIN_FLAG) clobber

# ##########################
#
# factory_data
#

.PHONY: factory_data
factory_data: factory_data_clean factory_data_build factory_data_install

.PHONY: factory_data_build
factory_data_build: PRJDIR := $(CURDIR)
factory_data_build:
	test -n $(PRJDIR)
	tar czvf $(PRJDIR)/factory_data.tar.gz --exclude=.svn --exclude=.git -C $(PRJDIR)/localfs .

.PHONY: factory_data_install
factory_data_install: PRJDIR := $(CURDIR)
factory_data_install:
	test -n $(PRJDIR)
	mv $(PRJDIR)/factory_data.tar.gz $(LDIR)

.PHONY: factory_data_clean
factory_data_clean: PRJDIR := $(CURDIR)
factory_data_clean:
	test -n $(PRJDIR)
	rm -f $(LDIR)/factory_data.tar.gz

# ##########################
#
# localfs_rpm
#

.PHONY: localfs_rpm
localfs_rpm: localfs_rpm_clean localfs_rpm_build localfs_rpm_install

.PHONY: localfs_rpm_build
localfs_rpm_build: PRJDIR := $(CURDIR)
localfs_rpm_build:
	test -n $(PRJDIR)
	mkdir -p $(LFSDIR)

.PHONY: localfs_rpm_install
localfs_rpm_install: PRJDIR := $(CURDIR)
localfs_rpm_install:
	test -n $(PRJDIR)
	tar cjvf $(LFSDIR)/../local.tar.bz2 --exclude=.svn -C $(LDIR) .
	rm -rf $(RPMTMPDIR)/{*,.??*}
	install -D -m 644 $(LFSDIR)/../local.tar.bz2 $(RPMDIR)/SOURCES/local.tar.bz2
	rpmbuild --define 'rel $(RELEASE)' --define '_topdir $(RPMDIR)' --dbpath $(RPMTMPDIR)/rpmdb --target arm --define '_target_cpu arm' --define '_arch arm' --define '_prefix /' --define '_rpmdir $(RPMDIR)/RPMS' -bb --clean --rmsource $(SPECDIR)/local.spec

.PHONY: localfs_rpm_clean
localfs_rpm_clean: PRJDIR := $(CURDIR)
localfs_rpm_clean:
	test -n $(PRJDIR)



# ##########################
# Utils

.PHONY: clean
clean: ATCMControl_runtime_system_clean cgic_work_clean factory_data_clean local_prepare_clean setup_time_clean splash_clean
	sudo rm -rf $(LFSDIR) $(LDIR)
