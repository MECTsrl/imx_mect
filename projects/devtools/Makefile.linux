# TODO set the proper version.
ATCM_VERSION := 1.2.3-dummy

export PATH := /usr/lib/ccache:/usr/lib64/ccache:$(PATH)
export LC_ALL := en_US.UTF-8

FTP_DIRECTORY := $(CURDIR)/../../src

# libcsv
#
LC_VER := 3.0.3
LC_DIRECTORY = libcsv-$(LC_VER)
LC_LIB_A = $(LC_DIRECTORY)/.libs/libcsv.a

# Qt
#
QT_VER := 4.8.5
QT_DIRECTORY := qt-everywhere-opensource-src-$(QT_VER)
export QT_INST_DIR := $(CURDIR)/qt
QT_DESIGNER_PLUGIN_DIR = $(QT_INST_DIR)/plugins/designer

# Qt Creator
#
QTC_VER := 2.8.1
QTC_DIRECTORY := qt-creator-$(QTC_VER)-src
# NOTE: archive and build directories should be
# NOTE: on the same branch and at the same depth.
QTC_BUILD_DIR = $(QTC_DIRECTORY)-build
export QTC_INST_DIR := $(CURDIR)/qtc

# Qwt 6.1 mutiaxes
#
QWT_VER := 6.1
QWT_DIRECTORY := qwt-$(QWT_VER)-multiaxes
QWT_BUILD_DIR = $(CURDIR)/$(QWT_DIRECTORY)-build

# MECT Qt Creator plugins
#
MP_DIRECTORY := ../mect_plugins

MP_PATCH_PATHS = $(FTP_DIRECTORY)/mect_plugins-build_inst_paths.patch
MP_PATCH_QRC_INSTPATH = $(FTP_DIRECTORY)/mect_plugins-qrc_inst_paths.patch

# MECT Cross Table Editor
#
CTE_DIRECTORY = $(QTC_DIRECTORY)/src/plugins/cte

# DEB packages
#
MECT_INST_ROOT := /opt/MECT/MSversion
DEB_ROOT := deb
# Qt
DEB_QT_PKGVER := 1
DEB_QT_NAME = mect-qt
DEB_QT_DIR_NAME = mect_qt
DEB_QT_PKG_ROOT = $(DEB_ROOT)/$(DEB_QT_DIR_NAME)_$(QT_VER)-$(DEB_QT_PKGVER)
DEB_QT_ROOT = $(DEB_QT_PKG_ROOT)/$(MECT_INST_ROOT)
DEB_QT_MD_DIR = $(DEB_QT_PKG_ROOT)/DEBIAN
DEB_QT_MD_CTRL = $(DEB_QT_MD_DIR)/control
# Qt Creator
DEB_QTC_PKGVER := 1
DEB_QTC_NAME = mect-qt-creator
DEB_QTC_DIR_NAME = mect_qt_creator
DEB_QTC_PKG_ROOT = $(DEB_ROOT)/$(DEB_QTC_DIR_NAME)_$(QTC_VER)-$(DEB_QTC_PKGVER)
DEB_QTC_ROOT = $(DEB_QTC_PKG_ROOT)/$(MECT_INST_ROOT)
DEB_QTC_MD_DIR = $(DEB_QTC_PKG_ROOT)/DEBIAN
DEB_QTC_MD_CTRL = $(DEB_QTC_MD_DIR)/control


# TODO Use for embeded targets
#

# Development files from root file system
RFS_DIRECTORY := rootfs
RFS_ARCHIVE := $(RFS_DIRECTORY)_dev.zip


# Progs
QMAKE := $(CURDIR)/$(QT_DIRECTORY)/bin/qmake

# Parallel build
NPROCS := $(shell nproc)
NPROCS := $(shell expr $(NPROCS) + 1)


.PHONY: all
all: libs qt qtc qwt mp

.PHONY: libs
libs: $(LC_LIB_A)

$(LC_LIB_A):
	test -d $(LC_DIRECTORY)
	cd $(LC_DIRECTORY); ./configure
	$(MAKE) -C $(LC_DIRECTORY)

.PHONY: qt
qt:
	test -d $(CURDIR)/$(QT_DIRECTORY)
	cd $(CURDIR)/$(QT_DIRECTORY); MAKEFLAGS=-j$(NPROC) ./configure \
	    --prefix=$(QT_INST_DIR) \
	    -xplatform linux-g++ \
	    -confirm-license \
	    -declarative \
	    -fast \
	    -fontconfig \
	    -host-little-endian \
	    -little-endian \
	    -no-3dnow \
	    -no-accessibility \
	    -no-javascript-jit \
	    -no-largefile \
	    -nomake demos \
	    -nomake examples \
	    -no-mmx \
	    -no-multimedia \
	    -no-phonon \
	    -no-phonon-backend \
	    -no-qt3support \
	    -no-scripttools \
	    -no-sse \
	    -no-sse2 \
	    -no-sse3 \
	    -no-ssse3 \
	    -no-stl \
	    -no-svg \
	    -no-webkit \
	    -no-xmlpatterns \
	    -opensource \
	    -plugin-sql-sqlite \
	    -qt-gfx-transformed \
	    -qt-kbd-tty \
	    -release \
	    -script \
	    -shared \
	    -sm \
	    -v
	$(MAKE) -j$(NPROCS) -C $(CURDIR)/$(QT_DIRECTORY)
	$(MAKE) -C $(CURDIR)/$(QT_DIRECTORY) install

.PHONY: qtc
qtc:
	mkdir -p $(QTC_BUILD_DIR)
	cd $(QTC_BUILD_DIR); $(QMAKE) -r ../$(QTC_DIRECTORY)/qtcreator.pro
	$(MAKE) -j $(NPROCS) -C $(QTC_BUILD_DIR)
	$(MAKE) -C $(QTC_BUILD_DIR) INSTALL_ROOT=$(QTC_INST_DIR) install

.PHONY: qwt
qwt:
	mkdir -p $(QWT_BUILD_DIR)
	cd $(QWT_BUILD_DIR); $(QMAKE) -r ../$(QWT_DIRECTORY)/qwt.pro
	$(MAKE) -j $(NPROCS) -C $(QWT_BUILD_DIR)
	$(MAKE) -C $(QWT_BUILD_DIR) INSTALL_ROOT= install

.PHONY: mp
mp:
	# TODO Changes should be in the repo and the patches removed.
	# Ignore patching errors.
	-patch -d $(MP_DIRECTORY) -p1 -N -i $(MP_PATCH_PATHS)
	-patch -d $(MP_DIRECTORY) -p1 -N -i $(MP_PATCH_QRC_INSTPATH)
	cd $(MP_DIRECTORY)/qt_plugins; $(QMAKE) qt_designer_plugins.pro -r -config store -config trend -config recipe -config alarms CONFIG+=release DEFINES+=ATCM_VERSION=$(ATCM_VERSION)
	$(MAKE) -j $(NPROCS) -C $(MP_DIRECTORY)/qt_plugins
	$(MAKE) -C $(MP_DIRECTORY)/qt_plugins INSTALL_ROOT= install


.PHONY: deb
deb: clean-deb
	# Qt Creator
	mkdir -p $(DEB_QTC_ROOT)
	cp -a --reflink=auto $(QTC_INST_DIR)/* $(DEB_QTC_ROOT)
	mkdir -p $(DEB_QTC_MD_DIR)
	echo "Package: $(DEB_QTC_NAME)" >> $(DEB_QTC_MD_CTRL)
	echo "Version: $(QTC_VER)-$(DEB_QTC_PKGVER)" >> $(DEB_QTC_MD_CTRL)
	echo "Section: base" >> $(DEB_QTC_MD_CTRL)
	echo "Priority: optional" >> $(DEB_QTC_MD_CTRL)
	echo "Architecture: i386" >> $(DEB_QTC_MD_CTRL)
	echo "Depends: libc6" >> $(DEB_QTC_MD_CTRL)
	echo "Maintainer: Mihai Lazarescu <mlazarescu@mect.it>" >> $(DEB_QTC_MD_CTRL)
	echo "Description: Qt Creator for development for MECT TPAC devices." >> $(DEB_QTC_MD_CTRL)
	dpkg-deb --build $(DEB_QTC_PKG_ROOT)
	rm -rf $(DEB_QTC_PKG_ROOT) $(DEB_QTC_MD_DIR)
	# Qt
	mkdir -p $(DEB_QT_ROOT)
	cp -a --reflink=auto $(QT_INST_DIR)/* $(DEB_QT_ROOT)
	mkdir -p $(DEB_QT_MD_DIR)
	echo "Package: $(DEB_QT_NAME)" >> $(DEB_QT_MD_CTRL)
	echo "Version: $(QT_VER)-$(DEB_QT_PKGVER)" >> $(DEB_QT_MD_CTRL)
	echo "Section: base" >> $(DEB_QT_MD_CTRL)
	echo "Priority: optional" >> $(DEB_QT_MD_CTRL)
	echo "Architecture: i386" >> $(DEB_QT_MD_CTRL)
	echo "Depends: libc6" >> $(DEB_QT_MD_CTRL)
	echo "Maintainer: Mihai Lazarescu <mlazarescu@mect.it>" >> $(DEB_QT_MD_CTRL)
	echo "Description: Qt for development for MECT TPAC devices." >> $(DEB_QT_MD_CTRL)
	dpkg-deb --build $(DEB_QT_PKG_ROOT)
	rm -rf $(DEB_QT_PKG_ROOT) $(DEB_QT_MD_DIR)


.PHONY: clean
clean: clean-qt clean-qtc clean-qwt clean-mp clean-deb

.PHONY: clean-qt
clean-qt:
	-if test -d $(QT_DIRECTORY); then $(MAKE) -C $(QT_DIRECTORY) clean; fi

.PHONY: clean-qtc
clean-qtc:
	-if test -d $(QTC_BUILD_DIR); then $(MAKE) -C $(QTC_BUILD_DIR) clean; fi

.PHONY: clean-qwt
clean-qwt:
	-if test -d $(QWT_BUILD_DIR); then $(MAKE) -C $(QWT_BUILD_DIR) clean; fi

.PHONY: clean-mp
clean-mp:
	-if test -d $(MP_DIRECTORY)/qt_plugins; then $(MAKE) -C $(MP_DIRECTORY)/qt_plugins clean; fi

.PHONY: clean-deb
clean-deb:
	rm -rf $(DEB_ROOT)


.PHONY: buildclean
buildclean: buildclean-qt buildclean-qtc buildclean-qwt clean-mp

.PHONY: buildclean-qt
buildclean-qt:
	-if test -r $(QT_DIRECTORY)/Makefile; then $(MAKE) -C $(QT_DIRECTORY) distclean; fi

.PHONY: buildclean-qtc
buildclean-qtc:
	-if test -r $(QTC_BUILD_DIR)/Makefile; then $(MAKE) -C $(QTC_BUILD_DIR) distclean; fi
	rm -rf $(QTC_BUILD_DIR)

.PHONY: buildclean-qwt
buildclean-qwt:
	-if test -r $(QWT_BUILD_DIR)/Makefile; then $(MAKE) -C $(QWT_BUILD_DIR) distclean; fi
	rm -rf $(QWT_BUILD_DIR)

# vim: set noexpandtab:
