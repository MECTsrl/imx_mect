# TODO set the proper version.
ATCM_VERSION := 1.2.3-dummy

# Set dummy default version.
ifeq ($(strip $(MECT_BUILD_RELEASE)),)
    MECT_BUILD_RELEASE := 2.1.0
endif

MAKEFILE_NAME := $(lastword $(MAKEFILE_LIST))

export LC_ALL := C

export WINEARCH := win32
export WINEPREFIX := $(CURDIR)/wine
export WINEDEBUG := -all

DRIVE_C = $(WINEPREFIX)/drive_c

DISPLAY_SAVED := $(DISPLAY)
export DISPLAY :=


SRC_DIRECTORY := $(CURDIR)/../../src

# MinGW
#
MGW_ARCHIVE = $(SRC_DIRECTORY)/mingw-get-0.6.2-mingw32-beta-20131004-1-bin.zip
MGW_INST_DIR = $(DRIVE_C)/MinGW

MGW_PROF_DEF = $(SRC_DIRECTORY)/mingw-profile-defaults.xml

MAKE := wine mingw32-make

# Qt
#
QT_VER := 4.8.5
QT_DIRECTORY := qt-everywhere-opensource-src-$(QT_VER)
QT_INST_DIR_H = $(DRIVE_C)/MECT/Qt-$(QT_VER)
export QT_INST_DIR := C:/MECT/Qt-$(QT_VER)
QT_BIN_DIR = $(QT_INST_DIR)/bin
QT_BIN_DIR := $(subst /,\\\\,$(QT_BIN_DIR))

# Qt ARM
#
QT_ARM_PREBARCH = Qt-4.8.5-arm.zip
QT_ARM_INST_DIR_H = $(DRIVE_C)/MECT/Qt-$(QT_VER)-arm
export QT_ARM_INST_DIR = C:/MECT/Qt-$(QT_VER)-arm
QT_ARM_BIN_DIR = $(QT_ARM_INST_DIR)/bin
QT_ARM_BIN_DIR := $(subst /,\\\\,$(QT_ARM_BIN_DIR))
QT_ARM_INSTALLS := \
    bin \
    changes-4.8.5 \
    imports \
    include \
    INSTALL \
    LGPL_EXCEPTION.txt \
    lib \
    LICENSE.FDL \
    LICENSE.GPL3 \
    LICENSE.LGPL \
    mkspecs \
    plugins \
    projects.pro \
    qmake \
    README \
    src \
    templates \
    tmp \
    tools \
    translations \
    util \


# Qt Creator
#
QTC_VER := 2.8.1
QTC_DIRECTORY := qt-creator-$(QTC_VER)-src
# NOTE: No install. Build in the installation directory.
QTC_BUILD_DIR := $(CURDIR)/$(QTC_DIRECTORY)-build
QTC_INST_DIR_H := $(DRIVE_C)/MECT/Qt-Creator-$(QTC_VER)
export QTC_INST_DIR := C:/MECT/Qt-Creator-$(QTC_VER)
QTC_BIN_DIR = $(QTC_INST_DIR)/bin
QTC_BIN_DIR := $(subst /,\\\\,$(QTC_BIN_DIR))

# Qwt 6.1 mutiaxes
#
QWT_VER := 6.1
QWT_DIRECTORY := qwt-$(QWT_VER)-multiaxes
QWT_BUILD_DIR := $(CURDIR)/$(QWT_DIRECTORY)-build

QWT_PATCH_NODEBUG = $(SRC_DIRECTORY)/qwt-6.1-multiaxes-no_debug.patch

# MECT Qt Creator plugins
#
MP_DIRECTORY := ../mect_plugins
ifeq ($(shell expr "$$(wine --version)" : "wine-1\\.6"),8)
	# Makefile.Release binds install path to c:
	MP_INST_DIR :=
else
	MP_INST_DIR := $(QT_INST_DIR)
endif

MP_PATCH_PATHS = $(SRC_DIRECTORY)/mect_plugins-build_inst_paths.patch
MP_PATCH_QRC_INSTPATH = $(SRC_DIRECTORY)/mect_plugins-qrc_inst_paths.patch

# MECT Suite installer
INSTALLER_DIR := $(CURDIR)/installer

# TODO Use for embeded targets
#

# Development files from root file system
RFS_DIRECTORY := rootfs
RFS_ARCHIVE := $(RFS_DIRECTORY)_dev.zip

# ARM cross compiler (Code Sourcery)
XCCC_ARCH := ../../src/Sourcery_G++_Lite.tar.xz
XCCC_INSTALL_DIR = xccs
XCCC_INSTALL_PATH_H = $(DRIVE_C)/$(XCCC_INSTALL_DIR)
XCCC_INSTALL_PATH = C:/$(XCCC_INSTALL_DIR)
XCCC_BIN_PATH := $(subst /,\\\\,$(XCCC_INSTALL_PATH))\\\\bin

# Perl 5.24
PERL_ARCH := ../../src/perl-5.24.0-mingw32.zip
PERL_INSTALL_DIR = MinGW
PERL_INSTALL_PATH_H = $(DRIVE_C)/$(PERL_INSTALL_DIR)/perl-5.24.0
PERL_INSTALL_PATH = C:/$(PERL_INSTALL_DIR)/perl-5.24.0
PERL_BIN_PATH := $(subst /,\\\\,$(PERL_INSTALL_PATH))\\\\bin


# Progs
QMAKE = wine $(QT_INST_DIR_H)/bin/qmake.exe

# Parallel build
NPROCS := $(shell nproc)
NPROCS := $(shell expr $(NPROCS) + 1)

# Sanitize terminal configuration.
SANE := if tty > /dev/null 2>&1; then stty sane; fi


.PHONY: all
all:
	make -f $(MAKEFILE_NAME) wine
	make -f $(MAKEFILE_NAME) tools
	make -f $(MAKEFILE_NAME) qt
	make -f $(MAKEFILE_NAME) install-qt
	# FIXME ARM build is not working
	#make -f $(MAKEFILE_NAME) qt_arm
	#make -f $(MAKEFILE_NAME) install-qt_arm
	make -f $(MAKEFILE_NAME) install-prebuilt-qt_arm
	make -f $(MAKEFILE_NAME) qwt
	make -f $(MAKEFILE_NAME) qtc
	make -f $(MAKEFILE_NAME) mp
	make -f $(MAKEFILE_NAME) installer

.PHONY: wine
wine: $(WINEPREFIX)

$(WINEPREFIX):
	DISPLAY= wineboot --init

.PHONY: tools
tools: wine
	# MinGW
	rm -rf $(MGW_INST_DIR)
	mkdir -p $(MGW_INST_DIR)
	unzip -q -o -d $(MGW_INST_DIR) $(MGW_ARCHIVE)
	rm -rf $(PERL_INSTALL_PATH_H)
	# ARM cross compiler (Code Sourcery)
	rm -rf $(XCCC_INSTALL_PATH_H)
	mkdir -p $(XCCC_INSTALL_PATH_H)
	tar xJf $(XCCC_ARCH) -C $(XCCC_INSTALL_PATH_H)
	# Windows setup
	install -m 644 -D $(MGW_PROF_DEF) $(MGW_INST_DIR)/var/lib/mingw-get/data/profile.xml
	sed -i 's|  <repository uri="http://prdownloads.sourceforge.net/mingw/%F.xml.lzma?download">|  <repository uri="http://www.mect.it/archive/mingw/%F.xml.lzma">|' $(MGW_INST_DIR)/var/lib/mingw-get/data/profile.xml
	install -m 644 -D $(MGW_PROF_DEF) $(MGW_INST_DIR)/var/lib/mingw-get/data/defaults.xml
	sed -i 's|  <repository uri="http://prdownloads.sourceforge.net/mingw/%F.xml.lzma?download">|  <repository uri="http://www.mect.it/archive/mingw/%F.xml.lzma">|' $(MGW_INST_DIR)/var/lib/mingw-get/data/defaults.xml
	-wineserver -k		# Sync the registry
	sed -i '/^"PATH"=/ s/C:\\\\MinGW\\\\bin;//g' $(WINEPREFIX)/system.reg
	sed -i '/^"PATH"=/ s/"C:/"C:\\\\MinGW\\\\bin;C:/' $(WINEPREFIX)/system.reg
	# MinGW & MSYS setup
	wine mingw-get install mingw32-base msys-base mingw32-gcc-g++ msys-rebase
	# Perl setup
	unzip -q -o -d $(DRIVE_C)/$(PERL_INSTALL_DIR) $(PERL_ARCH)
	rsync -a $(PERL_INSTALL_PATH_H)/ $(MGW_INST_DIR)/msys/1.0/
	-wineserver -k		# Sync the registry
	sed -i '/^"PATH"=/ s/C:\\\\MinGW\\\\msys\\\\1.0\\\\bin;//g' $(WINEPREFIX)/system.reg
	sed -i '/^"PATH"=/ s/"C:/"C:\\\\MinGW\\\\msys\\\\1.0\\\\bin;C:/' $(WINEPREFIX)/system.reg
	sed -i '/^"PATH"=/ s/"C:/"$(XCCC_BIN_PATH);C:/' $(WINEPREFIX)/system.reg
	sed -i '/^"PATH"=/ s/;$(QT_BIN_DIR)//g' $(WINEPREFIX)/system.reg
	sed -i '/^"PATH"=/ s/"$$/;$(QT_BIN_DIR)"/' $(WINEPREFIX)/system.reg
	sed -i '/^"PATH"=/ s/;$(QTC_BIN_DIR)//g' $(WINEPREFIX)/system.reg
	sed -i '/^"PATH"=/ s/"$$/;$(QTC_BIN_DIR)"/' $(WINEPREFIX)/system.reg

.PHONY: qt
qt:
	make -f $(MAKEFILE_NAME) rebase
	make -f $(MAKEFILE_NAME) do_qt
	make -f $(MAKEFILE_NAME) rebase

.PHONY: do_qt
do_qt:
	test -d $(QT_DIRECTORY)
	cd $(QT_DIRECTORY); MAKEFLAGS=-j$(NPROC) wine configure \
	    -confirm-license \
	    -declarative \
	    -fast \
	    -fontconfig \
	    -little-endian \
	    -no-3dnow \
	    -no-accessibility \
	    -no-libtiff \
	    -nomake demos \
	    -nomake examples \
	    -no-mmx \
	    -no-multimedia \
	    -no-phonon \
	    -no-phonon-backend \
	    -no-qt3support \
	    -no-scripttools \
	    -no-sse \
	    -no-sse2 \
	    -no-stl \
	    -no-webkit \
	    -no-xmlpatterns \
	    -opensource \
	    -platform win32-g++-4.6 \
	    -plugin-sql-sqlite \
	    -release \
	    -script \
	    -shared
	$(MAKE) -j$(NPROCS) -C $(QT_DIRECTORY); $(SANE)

.PHONY: install-qt
install-qt:
	make -f $(MAKEFILE_NAME) clean-qt
	mkdir -p `dirname $(QT_INST_DIR_H)`
	cp -a --reflink=auto $(QT_DIRECTORY) $(QT_INST_DIR_H)
	echo '[Paths]' > '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Prefix = $(QT_INST_DIR)' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Documentation = doc' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Headers = include' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Libraries = lib' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Binaries = bin' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Plugins = plugins' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Imports = imports' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Data = .' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Translations = translations' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Settings = .' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Examples = examples' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	echo 'Demos = demos' >> '$(QT_INST_DIR_H)/bin/qt.conf'
	for m in `find $(QT_INST_DIR_H)/mkspecs -name qmake.conf -print`; do echo 'QMAKE_INCDIR += "."' >> $$m; done
	for m in `find $(QT_INST_DIR_H)/lib -name \*.prl -print`; do sed -i 's|[Zz]:$(CURDIR)/$(QT_DIRECTORY)|$(QT_INST_DIR)|' $$m; done

.PHONY: qt_arm
qt_arm:
	make -f $(MAKEFILE_NAME) rebase
	make -f $(MAKEFILE_NAME) do_qt_arm
	make -f $(MAKEFILE_NAME) rebase

.PHONY: do_qt_arm
do_qt_arm:
	test -d $(QT_DIRECTORY)
	make -f $(MAKEFILE_NAME) buildclean-qt
	cd $(QT_DIRECTORY); MAKEFLAGS=-j$(NPROC) wine configure \
	    -confirm-license \
	    -fast \
	    -fontconfig \
	    -little-endian \
	    -no-3dnow \
	    -no-accessibility \
	    -no-declarative \
	    -no-libtiff \
	    -nomake demos \
	    -nomake examples \
	    -no-mmx \
	    -no-multimedia \
	    -no-phonon \
	    -no-phonon-backend \
	    -no-qt3support \
	    -no-script \
	    -no-scripttools \
	    -no-sse \
	    -no-sse2 \
	    -no-stl \
	    -no-webkit \
	    -no-xmlpatterns \
	    -opensource \
	    -platform win32-g++-4.6 \
	    -plugin-sql-mysql \
	    -release \
	    -shared \
	    -xplatform qws/linux-g++-mx
	#$(MAKE) -j$(NPROCS) -C $(QT_DIRECTORY); $(SANE)
	$(MAKE) -j1 -C $(QT_DIRECTORY); $(SANE)

.PHONY: install-qt_arm
install-qt_arm:
	test -n '$(QT_DIRECTORY)'
	test -n '$(QT_ARM_INST_DIR_H)'
	make -f $(MAKEFILE_NAME) clean-qt
	rm -rf '$(QT_ARM_INST_DIR_H)'
	mkdir -p '$(QT_ARM_INST_DIR_H)'
	for s in $(QT_ARM_INSTALLS); do \
	    cp -a --reflink=auto $(QT_DIRECTORY)/$$s $(QT_ARM_INST_DIR_H); \
	done
	echo '[Paths]' > '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Prefix = $(QT_ARM_INST_DIR)' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Documentation = doc' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Headers = include' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Libraries = lib' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Binaries = bin' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Plugins = plugins' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Imports = imports' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Data = .' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Translations = translations' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Settings = .' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Examples = examples' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	echo 'Demos = demos' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	for m in `find $(QT_ARM_INST_DIR_H)/mkspecs -name qmake.conf -print`; do echo 'QMAKE_INCDIR += "."' >> $$m; done
	for m in `find $(QT_ARM_INST_DIR_H)/lib -name \*.prl -print`; do sed -i 's|[Zz]:$(CURDIR)/$(QT_DIRECTORY)|$(QT_INST_DIR)|' $$m; done

.PHONY: install-prebuilt-qt_arm
install-prebuilt-qt_arm:
	test -n '$(QT_ARM_INST_DIR_H)'
	test -r '$(SRC_DIRECTORY)/$(QT_ARM_PREBARCH)'
	rm -rf $(QT_ARM_INST_DIR_H)
	mkdir -p `dirname $(QT_ARM_INST_DIR_H)`
	unzip -q -o -d `dirname $(QT_ARM_INST_DIR_H)` $(SRC_DIRECTORY)/$(QT_ARM_PREBARCH)
	test -d '$(QT_ARM_INST_DIR_H)'
	### echo '[Paths]' > '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Prefix = $(QT_ARM_INST_DIR)' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Documentation = doc' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Headers = include' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Libraries = lib' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Binaries = bin' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Plugins = plugins' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Imports = imports' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Data = .' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Translations = translations' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Settings = .' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Examples = examples' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### echo 'Demos = demos' >> '$(QT_ARM_INST_DIR_H)/bin/qt.conf'
	### for m in `find $(QT_ARM_INST_DIR_H)/mkspecs -name qmake.conf -print`; do echo 'QMAKE_INCDIR += "."' >> $$m; done
	### for m in `find $(QT_ARM_INST_DIR_H)/lib -name \*.prl -print`; do sed -i 's|[Cc]:/Qt485/imx28/qt-everywhere-opensource-src-4.8.5|$(QT_INST_DIR)|' $$m; done

.PHONY: qtc
qtc:
	make -f $(MAKEFILE_NAME) rebase
	make -f $(MAKEFILE_NAME) do_qtc
	make -f $(MAKEFILE_NAME) rebase

.PHONY: do_qtc
do_qtc:
	mkdir -p $(QTC_BUILD_DIR)
	cd $(QTC_BUILD_DIR); $(QMAKE) -r ../$(QTC_DIRECTORY)/qtcreator.pro
	$(MAKE) -j $(NPROCS) -C $(QTC_BUILD_DIR); $(SANE)
	$(MAKE) -C $(QTC_BUILD_DIR) INSTALL_ROOT=$(QTC_INST_DIR) install; $(SANE)

.PHONY: qwt
qwt:
	make -f $(MAKEFILE_NAME) rebase
	make -f $(MAKEFILE_NAME) do_qwt
	make -f $(MAKEFILE_NAME) rebase

.PHONY: do_qwt
do_qwt:
	mkdir -p $(QWT_BUILD_DIR)
	cd $(QWT_BUILD_DIR); $(QMAKE) -r ../$(QWT_DIRECTORY)/qwt.pro
	patch -d $(QWT_BUILD_DIR) -p1 < $(QWT_PATCH_NODEBUG)
	$(MAKE) -j $(NPROCS) -C $(QWT_BUILD_DIR); $(SANE)
	$(MAKE) -C $(QWT_BUILD_DIR) INSTALL_ROOT= install; $(SANE)

.PHONY: mp
mp:
	make -f $(MAKEFILE_NAME) rebase
	make -f $(MAKEFILE_NAME) do_mp
	make -f $(MAKEFILE_NAME) rebase
	make -f $(MAKEFILE_NAME) do_qt_tutorial
	make -f $(MAKEFILE_NAME) rebase

.PHONY: do_mp
do_mp:
	# TODO Changes should be in the repo and the patches removed.
	# Ignore patching errors.
	-patch -d $(MP_DIRECTORY) -p1 -N -i $(MP_PATCH_PATHS)
	-patch -d $(MP_DIRECTORY) -p1 -N -i $(MP_PATCH_QRC_INSTPATH)
	cd $(MP_DIRECTORY)/qt_plugins; $(QMAKE) qt_designer_plugins.pro -r -config store -config trend -config recipe -config alarms CONFIG+=release DEFINES+=ATCM_VERSION=$(ATCM_VERSION)
	if grep -rIq 'c:$$(INSTALL_ROOT)' $(MP_DIRECTORY); then sed -i '/c:$$(INSTALL_ROOT)/ s/c:$$(INSTALL_ROOT)/$$(INSTALL_ROOT)/g;' `grep -rIl 'c:$$(INSTALL_ROOT)' $(MP_DIRECTORY)`; fi # Old wines are broken. :-)
	$(MAKE) -j $(NPROCS) -C $(MP_DIRECTORY)/qt_plugins; $(SANE)
	$(MAKE) -C $(MP_DIRECTORY)/qt_plugins INSTALL_ROOT=$(MP_INST_DIR) install; $(SANE)

.PHONY: do_qt_tutorial
do_qt_tutorial:
	# TODO create .qhp files in Qt Creator tree.
	test -d $(MP_DIRECTORY)/qt_help/tutorial
	mkdir -p $(QTC_INST_DIR)/doc/qch
	for h in doc.qhp doc_eng.qhp; do \
	    wine $(QT_INST_DIR_H)/bin/qhelpgenerator.exe $(MP_DIRECTORY)/qt_help/tutorial/$$h -o $(QTC_INST_DIR)/doc/qch/`basename $$h .qhp`.qch; \
	done

.PHONY: installer
installer:
	make -C $(INSTALLER_DIR) MECT_BUILD_RELEASE=$(MECT_BUILD_RELEASE)


# Utils
.PHONY: run-qtc
run-qtc: export WINEDEBUG :=
run-qtc: export DISPLAY := $(DISPLAY_SAVED)
run-qtc:
	wine $(QTC_INST_DIR)/bin/qtcreator.exe

# msys-1.0.dll rebase is a workaround for a bug in Cygwin's use of persistent memory
.PHONY: rebase
rebase:
	-wineserver -k
	cp $(DRIVE_C)/MinGW/msys/1.0/bin/msys-1.0.dll $(DRIVE_C)/msys-1.0.dll
	wine rebase.exe -b 0x50000000 C:/msys-1.0.dll
	cp $(DRIVE_C)/msys-1.0.dll $(DRIVE_C)/MinGW/msys/1.0/bin/msys-1.0.dll
	$(SANE)


.PHONY: clean
clean: clean-wine clean-qt clean-qtc clean-qwt clean-mp

.PHONY: clean-wine
clean-wine:

.PHONY: clean-qt
clean-qt:
	-if test -d $(QT_DIRECTORY); then \
	    $(MAKE) -C $(QT_DIRECTORY) clean; \
	    $(SANE); \
	    find $(QT_DIRECTORY)/qmake -name \*.o -print0 | xargs -0 rm -f; \
	fi

.PHONY: clean-qtc
clean-qtc:
	-if test -d $(QTC_BUILD_DIR); then $(MAKE) -C $(QTC_BUILD_DIR) clean; $(SANE); fi

.PHONY: clean-qwt
clean-qwt:
	-if test -d $(QWT_BUILD_DIR); then $(MAKE) -C $(QWT_BUILD_DIR) clean; $(SANE); fi

.PHONY: clean-mp
clean-mp:
	-if test -d $(MP_DIRECTORY)/qt_plugins; then $(MAKE) -C $(MP_DIRECTORY)/qt_plugins clean; $(SANE); fi


.PHONY: buildclean
buildclean: buildclean-wine buildclean-qt buildclean-qtc buildclean-qwt clean-mp

.PHONY: buildclean-wine
buildclean-wine:
	#rm -rf $(WINEPREFIX)

.PHONY: buildclean-qt
buildclean-qt:
	-if test -r $(QT_DIRECTORY)/Makefile; then $(MAKE) -C $(QT_DIRECTORY) distclean; $(SANE); fi
	if test -d $(QT_DIRECTORY); then \
	    find $(QT_DIRECTORY)/qmake -name \*.o -print0 | xargs -0 rm -f; \
	    find $(QT_DIRECTORY)/lib -name \*.prl -print0 | xargs -0 rm -f; \
	    find $(QT_DIRECTORY)/bin \( -name \*.dll -o -name \*.exe \) -print0 | xargs -0 rm -f; \
	    rm -f $(QT_DIRECTORY)/{.qmake,configure}.cache; \
	    find $(QT_DIRECTORY) \( \
		   -path $(QT_DIRECTORY)/src/3rdparty/freetype/Makefile \
		-o -path $(QT_DIRECTORY)/src/3rdparty/freetype/src/tools/ftrandom/Makefile \
		-o -path $(QT_DIRECTORY)/src/3rdparty/Makefile \
		-o -path $(QT_DIRECTORY)/src/3rdparty/ptmalloc/Makefile \
	    \) -prune -o -name Makefile -print0 | xargs -0 rm -f; \
	    find $(QT_DIRECTORY) \( \
		   -name \*.Release \
		-o -name \*.Debug \
		-o -name \*_resource.rc \
	    \) -print0 | xargs -0 rm -f; \
	    rm -rf $(QT_DIRECTORY)/imports/Qt; \
	    rm -rf $(QT_DIRECTORY)/lib/pkgconfig; \
	    rm -rf $(QT_DIRECTORY)/mkspecs/default; \
	    rm -f  $(QT_DIRECTORY)/mkspecs/qconfig.pri; \
	    rm -f  $(QT_DIRECTORY)/qmake/qmake.exe; \
	    rm -f  $(QT_DIRECTORY)/src/corelib/global/qconfig.cpp; \
	    rm -f  $(QT_DIRECTORY)/src/corelib/global/qconfig.h; \
	    rm -rf $(QT_DIRECTORY)/src/script/tmp; \
	    rm -rf $(QT_DIRECTORY)/src/tools/bootstrap/debug; \
	    rm -rf $(QT_DIRECTORY)/src/tools/bootstrap/release; \
	fi

.PHONY: buildclean-qtc
buildclean-qtc:
	-if test -r $(QTC_BUILD_DIR)/Makefile; then $(MAKE) -C $(QTC_BUILD_DIR) distclean; $(SANE); fi
	rm -rf $(QTC_BUILD_DIR)

.PHONY: buildclean-qwt
buildclean-qwt:
	-if test -r $(QWT_BUILD_DIR)/Makefile; then $(MAKE) -C $(QWT_BUILD_DIR) distclean; $(SANE); fi
	rm -rf $(QWT_BUILD_DIR)


.PHONY: cmd
cmd: export WINEDEBUG :=
cmd: export DISPLAY := $(DISPLAY_SAVED)
cmd:
	#wineconsole cmd
	#winecfg
	#
	#winetricks dlls list
	#winetricks mfc42
	#
	#wine mingw-get remove msys-perl
	#wine c:/ATCMControl/Engineering/bin/4ceng.exe; $(SANE)
	#wine qt-everywhere-opensource-src-4.8.5/bin/qmake.exe -query QMAKE_XSPEC
	#wine qt-everywhere-opensource-src-4.8.5/configure.exe --help

.PHONY: ctc
ctc: export WINEDEBUG :=
ctc: export DISPLAY := $(DISPLAY_SAVED)
ctc:
	wine qt-creator-2.8.1-src-build/bin/ctc.exe
