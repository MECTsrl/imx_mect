#!/bin/sh
# dhclient-script for Linux. Dan Halbert, March, 1997.
# Updated for Linux 2.[12] by Brian J. Murrell, January 1999.
# No guarantees about this. I'm a novice at the details of Linux
# networking.

# Notes:

# 0. This script is based on the netbsd script supplied with dhcp-970306.

# 1. ifconfig down apparently deletes all relevant routes and flushes
# the arp cache, so this doesn't need to be done explicitly.

# 2. The alias address handling here has not been tested AT ALL.
# I'm just going by the doc of modern Linux ip aliasing, which uses
# notations like eth0:0, eth0:1, for each alias.

# 3. I have to calculate the network address, and calculate the broadcast
# address if it is not supplied. This might be much more easily done
# by the dhclient C code, and passed on.

# 4. TIMEOUT not tested. ping has a flag I don't know, and I'm suspicious
# of the $1 in its args.

make_resolv_conf() {
  if [ -n "$new_domain_name" -o -n "$new_domain_name_servers" ]
  then
    echo "# autogenerated by /sbin/dhclient-script" > /etc/resolv.conf
    chmod 644 /etc/resolv.conf
  fi
  if [ -n "$new_domain_name" ]
  then
    echo "search $new_domain_name" >> /etc/resolv.conf
  fi
  if [ -n "$new_domain_name_servers" ]
  then
    for nameserver in $new_domain_name_servers
    do
      echo "nameserver $nameserver" >> /etc/resolv.conf
    done
  fi
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
  exit_status=$1
  if [ -f /etc/dhclient-exit-hooks ]; then
    . /etc/dhclient-exit-hooks
  fi
# probably should do something with exit status of the local script
  exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
  exit_status=0
  . /etc/dhclient-enter-hooks
  # allow the local script to abort processing of this state
  # local script must set exit_status variable to nonzero.
  if [ $exit_status -ne 0 ]; then
    exit $exit_status
  fi
fi

release=`uname -r`
release=`expr $release : '\(.*\)\..*'`
relminor=`echo $release |sed -e 's/[0-9]*\.\([0-9][0-9]*\)\(\..*\)*$/\1/'`
relmajor=`echo $release |sed -e 's/\([0-9][0-9]*\)\..*$/\1/'`

if [ -n "$new_broadcast_address" ]; then
  new_broadcast_arg="broadcast $new_broadcast_address"
fi
if [ -n "$old_broadcast_address" ]; then
  old_broadcast_arg="broadcast $old_broadcast_address"
fi
if [ -n "$new_subnet_mask" ]; then
  new_subnet_arg="netmask $new_subnet_mask"
fi
if [ -n "$old_subnet_mask" ]; then
  old_subnet_arg="netmask $old_subnet_mask"
fi
if [ -n "$alias_subnet_mask" ]; then
  alias_subnet_arg="netmask $alias_subnet_mask"
fi

if [ "$reason" = MEDIUM ]; then
  # Linux doesn't do mediums (ok, ok, media).
  exit_with_hooks 0
fi

if [ "$reason" = PREINIT ]; then
  if [ -n "$alias_ip_address" ]; then
    # Bring down alias interface. Its routes will disappear too.
    ifconfig $interface:0- inet 0
  fi
  if [ $relmajor -lt 2 ] || ( [ $relmajor -eq 2 ] && [ $relminor -eq 0 ] )
   then
    ifconfig $interface inet 0.0.0.0 netmask 0.0.0.0 \
		broadcast 255.255.255.255 up
    # Add route to make broadcast work. Do not omit netmask.
    route add default dev $interface netmask 0.0.0.0
  else
    ifconfig $interface 0 up
  fi

  # We need to give the kernel some time to get the interface up.
  sleep 1

  exit_with_hooks 0
fi

if [ "$reason" = ARPCHECK ] || [ "$reason" = ARPSEND ]; then
  exit_with_hooks 0
fi
  
if [ "$reason" = BOUND ] || [ "$reason" = RENEW ] || \
   [ "$reason" = REBIND ] || [ "$reason" = REBOOT ]; then
  current_hostname=`hostname`
  if [ -z "$current_hostname" ] || \
     [ "$current_hostname" = "$old_host_name" ]; then
    if [ -z "$current_hostname" ] || \
       [ "$new_host_name" != "$old_host_name" ]; then
      hostname $new_host_name
    fi
  fi
    
  if [ -n "$old_ip_address" ] && [ -n "$alias_ip_address" ] && \
		[ "$alias_ip_address" != "$old_ip_address" ]; then
    # Possible new alias. Remove old alias.
    ifconfig $interface:0- inet 0
  fi
  if [ -n "$old_ip_address" ] && [ "$old_ip_address" != "$new_ip_address" ]; then
    # IP address changed. Bringing down the interface will delete all routes,
    # and clear the ARP cache.
    ifconfig $interface inet 0 down

  fi
  if [ -z "$old_ip_address" ] || [ "$old_ip_address" != "$new_ip_address" ] || \
     [ "$reason" = BOUND ] || [ "$reason" = REBOOT ]; then

    ifconfig $interface inet $new_ip_address $new_subnet_arg \
							$new_broadcast_arg
    # Add a network route to the computed network address.
    if [ $relmajor -lt 2 ] || \
		( [ $relmajor -eq 2 ] && [ $relminor -eq 0 ] ); then
      route add -net $new_network_number $new_subnet_arg dev $interface
    fi
    for router in $new_routers; do
      route add default gw $router
    done
  fi
  if [ "$new_ip_address" != "$alias_ip_address" ] && [ -n "$alias_ip_address" ];
   then
    ifconfig $interface:0- inet 0
    ifconfig $interface:0 inet $alias_ip_address $alias_subnet_arg
    route add -host $alias_ip_address $interface:0
  fi
  make_resolv_conf
  exit_with_hooks 0
fi

if [ "$reason" = EXPIRE ] || [ "$reason" = FAIL ] || [ "$reason" = RELEASE ] \
   || [ "$reason" = STOP ]; then
  if [ -n "$alias_ip_address" ]; then
    # Turn off alias interface.
    ifconfig $interface:0- inet 0
  fi
  if [ -n "$old_ip_address" ]; then
    # Shut down interface, which will delete routes and clear arp cache.
    ifconfig $interface inet 0 down
  fi
  if [ -n "$alias_ip_address" ]; then
    ifconfig $interface:0 inet $alias_ip_address $alias_subnet_arg
    route add -host $alias_ip_address $interface:0
  fi
  exit_with_hooks 0
fi

if [ "$reason" = TIMEOUT ]; then
  if [ -n "$alias_ip_address" ]; then
    ifconfig $interface:0- inet 0
  fi
  ifconfig $interface inet $new_ip_address $new_subnet_arg \
					$new_broadcast_arg
  set $new_routers
  ############## what is -w in ping?
  if ping -q -c 1 $1; then
    if [ "$new_ip_address" != "$alias_ip_address" ] && \
			[ -n "$alias_ip_address" ]; then
      ifconfig $interface:0 inet $alias_ip_address $alias_subnet_arg
      route add -host $alias_ip_address dev $interface:0
    fi
    if [ "$relmajor" -lt 2 ] || \
		( [ "$relmajor" -eq 2 ] && [ "$relminor" -eq 0 ] ); then
      route add -net $new_network_number
    fi
    for router in $new_routers; do
      route add default gw $router
    done
    make_resolv_conf
    exit_with_hooks 0
  fi
  ifconfig $interface inet 0 down
  exit_with_hooks 1
fi

exit_with_hooks 0
