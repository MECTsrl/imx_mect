.\" Automatically generated by Pod::Man version 1.02
.\" Sat Jul 21 11:16:32 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "RPM::Error 3"
.TH RPM::Error 3 "perl v5.6.0" "2001-04-27" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1RPM:\s0:Error \- Functions to supplement the internal error management of \s-1RPM\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use RPM::Error;
\&    use RPM::Constants ':rpmerr';
.Ve
.Vb 1
\&    set_error_callback(sub { ... });
.Ve
.Vb 1
\&    rpm_error(RPMERR_DBOPEN, "Error opening RPM DB: $!");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fB\s-1RPM:\s0:Error\fR package provides access to some functions that work with
(but do not replace) the special \f(CW\*(C`$RPM::err\*(C'\fR variable. These routines allow
for reporting errors through the \fB\s-1RPM\s0\fR facility, clearing the error variable,
and registering a callback function to be invoked whenever a new error is
raised.
.PP
None of these routines are required for normal use of the special variable
\&\f(CW\*(C`$RPM::err\*(C'\fR (see the RPM manpage).
.SH "USAGE"
.IX Header "USAGE"
The following routines are exported by \fB\s-1RPM:\s0:Error\fR:
.Ip "rpm_error($code, \f(CW$message\fR)" 4
.IX Item "rpm_error($code, $message)"
Report an error through the internal facility used by \fBrpm\fR. By using this
function, the special error variable is set up to have a dual-nature: When
evaluated in a numeric context, it returns the numerical code \f(CW\*(C`$code\*(C'\fR. When
evaluated as a string, it will return \f(CW\*(C`$message\*(C'\fR. The value of \f(CW\*(C`$code\*(C'\fR
should be (but is not required to be) one of the values exported from the
\&\fB\s-1RPM:\s0:Constants\fR package via the \fB:rpmerr\fR tag. \f(CW\*(C`$message\*(C'\fR may be any
string value.
.Ip "\fIclear_errors()\fR" 4
.IX Item "clear_errors()"
Clears both the numeric and string values of \f(CW\*(C`$RPM::err\*(C'\fR.
.Ip "$old_cb = set_error_callback($subr)" 4
.IX Item "$old_cb = set_error_callback($subr)"
Set a (new) callback to be invoked whenever a new error is flagged. Returns
the old (existing) callback value if there was one, \f(CW\*(C`undef\*(C'\fR otherwise.
.Sp
The parameter to this call should be either a subroutine reference or a
closure. A subroutine name may be passed; if so, it should either be given
a package qualification or exist in the \f(CW\*(C`main::\*(C'\fR namespace. The routine,
when invoked, will be passed the numeric code and the message string being
raised as the error. Note that the callback may be invoked by internal error
flagging in the core \fBrpm\fR library, as well as by calls to \fBrpm_error\fR
above.
.Sp
Before any user-provided callback is invoked, the \f(CW\*(C`$RPM::err\*(C'\fR variable is
set. While accessing it in a callback would be redundant, users should not
be concerned about interrupting other internal processes (in theory, that is).
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
If the value passed to \fBset_error_callback\fR is not valid, the current
callback is set to a null value.
.SH "CAVEATS"
.IX Header "CAVEATS"
The code value passed to \fBrpm_error\fR is not checked against the list of
valid constants before assignment.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the RPM manpage, the perl manpage, the rpm manpage
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy J. Ray <rjray@blackperl.com>
