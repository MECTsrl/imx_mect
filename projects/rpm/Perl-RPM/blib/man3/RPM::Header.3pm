.\" Automatically generated by Pod::Man version 1.02
.\" Sat Jul 21 11:16:31 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "RPM::Header 3"
.TH RPM::Header 3 "perl v5.6.0" "2001-04-27" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1RPM:\s0:Header \- Access to \s-1RPM\s0 package headers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use RPM::Header;
.Ve
.Vb 1
\&    tie %hdr, "RPM::Header", "rpm-3.0.4-0.48.i386.rpm" or die "$RPM::err";
.Ve
.Vb 4
\&    for (sort keys %hdr)
\&    {
\&        ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fB\s-1RPM:\s0:Header\fR package permits access to the header of a package (external
file or currently installed) as either a tied hash or a blessed hash reference.
The tags that are present in the header are expressed as keys. Retrieving
them via \f(CW\*(C`keys\*(C'\fR or \f(CW\*(C`each\*(C'\fR returns the tags in the order in which they
appear in the header. Keys may be requested without regard for letter case,
but they are always returned as all upper-case.
.PP
The return value corresponding to each key is a list reference or scalar
(or \f(CW\*(C`undef\*(C'\fR if the key is not valid), depending on the data-type of the
key. Each of the header tags are noted with one of \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR in the
\&\fB\s-1RPM:\s0:Constants\fR documentation. The \f(CW\*(C`defined\*(C'\fR keyword should be used
for testing success versus failure, as empty tags are possible. See the
\&\f(CW\*(C`scalar_tag\*(C'\fR test, below.
.PP
This is a significant change from versions prior to 0.27, in which the
return value was always a list reference. This new approach brings
\&\fB\s-1RPM:\s0:Header\fR more in line with other interfaces to \fBrpm\fR header information.
.PP
\&\fB\s-1RPM:\s0:Header\fR objects are also the native return value from keys retrieved
in the \fB\s-1RPM:\s0:Database\fR class (see the RPM::Database manpage). In these cases, the
header data is marked read-only, and attempts to alter any of the keys will
generate an error.
.PP
There are also a number of class methods implemented, which are described in
the next section.
.SH "USAGE"
.IX Header "USAGE"
.Sh "Creating an Object"
.IX Subsection "Creating an Object"
An object may be created one of two ways:
.PP
.Vb 1
\&    tie %h, "RPM::Header", "filename";
.Ve
.Vb 1
\&    $href = new RPM::Header "filename";
.Ve
The latter approach offers more direct access to the class methods, while
also permitting the usual tied-hash operations such as fetching:
.PP
.Vb 1
\&    $href->{tag}    # Such as "name" or "version"
.Ve
.Sh "Class Methods"
.IX Subsection "Class Methods"
The following methods are available to objects of this class, in addition to
the tied-hash suite of operations. If the object is a hash instead of a
hash reference, it can be used to call these methods via:
.PP
.Vb 1
\&    (tied %hash)->method_name(...)
.Ve
.Ip "filenames" 4
.IX Item "filenames"
The \fB\s-1RPM\s0\fR system attempts to save space by splitting up the file paths into
the leafs (stored by the tag \f(CW\*(C`BASENAMES\*(C'\fR), the directories (stored under
\&\f(CW\*(C`DIRNAMES\*(C'\fR) and indexes into the list of directories (stored under
\&\f(CW\*(C`DIRINDEXES\*(C'\fR). As a convenience, this method re-assembles the list of
filenames and returns it as a list reference. If an error occurs, \f(CW\*(C`undef\*(C'\fR
will be returned after \f(CW\*(C`rpm_error\*(C'\fR has been called.
.Ip "is_source" 4
.IX Item "is_source"
Returns true (1) or false (0), depending on whether the package the header
object is derived from is a source \s-1RPM\s0.
.Ip "size" 4
.IX Item "size"
Return the size of the header, in bytes, within the disk file containing the
associated package. The value is also returned for those headers within the
database.
.Ip "scalar_tag(\s-1TAG\s0)" 4
.IX Item "scalar_tag(TAG)"
Returns a true/false value (1 or 0) based on whether the value returned by
the specified tag is a scalar or an array reference. Useful in place of
using \f(CW\*(C`ref\*(C'\fR to test the fetched values. \fB\s-1TAG\s0\fR may be either a string (name)
or a number (imported from the \fB\s-1RPM:\s0:Constants\fR tag \f(CW\*(C`:rpmtag\*(C'\fR). This
method may be called as a class (static) method.
.Ip "tagtype(\s-1TAG\s0)" 4
.IX Item "tagtype(TAG)"
Given a tag \fI\s-1TAG\s0\fR, return the type as a numerical value. The valid types
can be imported from the \fB\s-1RPM:\s0:Constants\fR package via the import-tag
\&\*(L":rpmtype\*(R", and are:
.RS 4
.Ip "\s-1RPM_NULL_TYPE\s0" 4
.IX Item "RPM_NULL_TYPE"
Used internally by \fBrpm\fR.
.Ip "\s-1RPM_BIN_TYPE\s0" 4
.IX Item "RPM_BIN_TYPE"
The data returned is a single chunk of binary data. It has been converted to
a single \*(L"string\*(R" in Perl terms, but may contain nulls within it. The
\&\fB\f(BIlength()\fB\fR keyword should return the correct size for the chunk.
.Ip "\s-1RPM_CHAR_TYPE\s0" 4
.IX Item "RPM_CHAR_TYPE"
All items are single-character in nature. Note that since Perl does not
distinguish single characters versus strings in the way that C does, these
are stored as single-character strings. It is a tradeoff of efficiency over
memory.
.Ip "\s-1RPM_INT8_TYPE\s0" 4
.IX Item "RPM_INT8_TYPE"
All items are integers no larger than 8 bits wide.
.Ip "\s-1RPM_INT16_TYPE\s0" 4
.IX Item "RPM_INT16_TYPE"
All items are integers no larger than 16 bits wide.
.Ip "\s-1RPM_INT32_TYPE\s0" 4
.IX Item "RPM_INT32_TYPE"
All items are integers no larger than 32 bits wide.
.Ip "\s-1RPM_STRING_TYPE\s0" 4
.IX Item "RPM_STRING_TYPE"
.Ip "\s-1RPM_I18NSTRING_TYPE\s0" 4
.IX Item "RPM_I18NSTRING_TYPE"
.Ip "\s-1RPM_STRING_ARRAY_TYPE\s0" 4
.IX Item "RPM_STRING_ARRAY_TYPE"
These three are functionally similar from the Perl perspective. Currently,
\&\fB\s-1RPM\s0\fR does not export data in an I18N format, it will have been converted to
an ordinary string before being handed to the caller (in this case, before
the internal Perl/XS code receives it). The distinction between \s-1STRING\s0 and
\&\s-1STRING_ARRAY\s0 types is only relevant internally. All of these are sequences of
one or more text strings, returned in the same internal order as they are
stored within the header.
.RE
.RS 4
.RE
.Ip "\s-1NVR\s0" 4
.IX Item "NVR"
The commonly-needed data triple of (\fBname\fR, \fBversion\fR, \fBrelease\fR) may be
accessed more directly by means of this method. It returns the three values
on the stack, saving the need for three separate fetches.
.Ip "cmpver(\s-1OTHER\s0)" 4
.IX Item "cmpver(OTHER)"
Compare the version of the current header against that in the header
referenced by \f(CW\*(C`$other\*(C'\fR. The argument should be an object reference, not
a tied-hash representation of a header. Returns \-1, 0 or 1, based on the
established behavior of other comparison operators (\f(CW\*(C`cmp\*(C'\fR and \f(CW\*(C`<=>\*(C'\fR);
\&\-1 indicates that the calling object is considered less, or older, than the
passed argument. A value of 1 indicates that the calling object is greater,
or newer, than the argument. A value of 0 indicates that they are equal.
.Ip "source_name" 4
.IX Item "source_name"
If the \fB\s-1RPM:\s0:Header\fR object is created directly from a file, \s-1FTP\s0 source
or \s-1HTTP\s0 source, then that source is kept for future reference and may be
retrieved using this accessor. This will be an empty string if the header
was retrieved from the \s-1RPM\s0 database, or was built in-memory from data.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Direct binding to the internal error-management of \fBrpm\fR is still under
development. At present, most operations generate their diagnostics to
\&\s-1STDERR\s0.
.SH "CAVEATS"
.IX Header "CAVEATS"
This is currently regarded as alpha-quality software. The interface is
subject to change in future releases.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the RPM manpage, the RPM::Database manpage, the RPM::Constants manpage, the perl manpage, the rpm manpage
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy J. Ray <rjray@blackperl.com>
