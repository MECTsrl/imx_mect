# Id: mutex.ac,v 11.25 2001/08/28 13:09:19 krinsky Exp 

# Figure out mutexes for this compiler/architecture.
AC_DEFUN(AM_DEFINE_MUTEXES, [

# Mutexes we don't test for, but want the #defines to exist for
# other ports.
AH_TEMPLATE(HAVE_MUTEX_VMS, [Define to use VMS mutexes.])
AH_TEMPLATE(HAVE_MUTEX_VXWORKS, [Define to use VxWorks mutexes.])
AH_TEMPLATE(HAVE_MUTEX_WIN32, [Define to use Windows mutexes.])

AC_CACHE_CHECK([for mutexes], db_cv_mutex, [
db_cv_mutex=no

orig_libs=$LIBS

# User-specified POSIX mutexes.
#
# Assume that -lpthread exists when the user specifies POSIX mutexes.  (I
# only expect this option to be used on Solaris, which has -lpthread.)
if test "$db_cv_posixmutexes" = yes; then
	db_cv_mutex="posix_only"
fi

# User-specified UI mutexes.
#
# Assume that -lthread exists when the user specifies UI mutexes.  (I only
# expect this option to be used on Solaris, which has -lthread.)
if test "$db_cv_uimutexes" = yes; then
	db_cv_mutex="ui_only"
fi

# LWP threads: _lwp_XXX
#
# Test for LWP threads before testing for UI/POSIX threads, we prefer them
# on Solaris.  There are two reasons: the Solaris C library has UI/POSIX
# interface stubs, but they're broken, configuring them for inter-process
# mutexes doesn't return an error, but it doesn't work either.  Second,
# there's a bug in SunOS 5.7 where applications get pwrite, not pwrite64,
# if they load the C library before the appropriate threads library, e.g.,
# tclsh using dlopen to load the DB library.  Anyway, by using LWP threads
# we avoid answering lots of user questions, not to mention the bugs.
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([
#include <synch.h>
main(){
	static lwp_mutex_t mi = SHAREDMUTEX;
	static lwp_cond_t ci = SHAREDCV;
	lwp_mutex_t mutex = mi;
	lwp_cond_t cond = ci;
	exit (
	_lwp_mutex_lock(&mutex) ||
	_lwp_mutex_unlock(&mutex));
}], [db_cv_mutex="Solaris/lwp"])
fi

# UI threads: thr_XXX
#
# Try with and without the -lthread library.
if test "$db_cv_mutex" = no -o "$db_cv_mutex" = "ui_only"; then
LIBS="-lthread $LIBS"
AC_TRY_RUN([
#include <thread.h>
#include <synch.h>
main(){
	mutex_t mutex;
	cond_t cond;
	int type = USYNC_PROCESS;
	exit (
	mutex_init(&mutex, type, NULL) ||
	cond_init(&cond, type, NULL) ||
	mutex_lock(&mutex) ||
	mutex_unlock(&mutex));
}], [db_cv_mutex="UI/threads/library"])
LIBS="$orig_libs"
fi
if test "$db_cv_mutex" = no -o "$db_cv_mutex" = "ui_only"; then
AC_TRY_RUN([
#include <thread.h>
#include <synch.h>
main(){
	mutex_t mutex;
	cond_t cond;
	int type = USYNC_PROCESS;
	exit (
	mutex_init(&mutex, type, NULL) ||
	cond_init(&cond, type, NULL) ||
	mutex_lock(&mutex) ||
	mutex_unlock(&mutex));
}], [db_cv_mutex="UI/threads"])
fi
if test "$db_cv_mutex" = "ui_only"; then
	AC_MSG_ERROR([unable to find UI mutex interfaces])
fi


# POSIX.1 pthreads: pthread_XXX
#
# Try with and without the -lpthread library.
if test "$db_cv_mutex" = no -o "$db_cv_mutex" = "posix_only"; then
AC_TRY_RUN([
#include <pthread.h>
main(){
	pthread_cond_t cond;
	pthread_mutex_t mutex;
	pthread_condattr_t condattr;
	pthread_mutexattr_t mutexattr;
	exit (
	pthread_condattr_init(&condattr) ||
	pthread_condattr_setpshared(&condattr, PTHREAD_PROCESS_SHARED) ||
	pthread_mutexattr_init(&mutexattr) ||
	pthread_mutexattr_setpshared(&mutexattr, PTHREAD_PROCESS_SHARED) ||
	pthread_cond_init(&cond, &condattr) ||
	pthread_mutex_init(&mutex, &mutexattr) ||
	pthread_mutex_lock(&mutex) ||
	pthread_mutex_unlock(&mutex) ||
	pthread_mutex_destroy(&mutex) ||
	pthread_cond_destroy(&cond) ||
	pthread_condattr_destroy(&condattr) ||
	pthread_mutexattr_destroy(&mutexattr));
}], [db_cv_mutex="POSIX/pthreads"])
fi
if test "$db_cv_mutex" = no -o "$db_cv_mutex" = "posix_only"; then
LIBS="-lpthread $LIBS"
AC_TRY_RUN([
#include <pthread.h>
main(){
	pthread_cond_t cond;
	pthread_mutex_t mutex;
	pthread_condattr_t condattr;
	pthread_mutexattr_t mutexattr;
	exit (
	pthread_condattr_init(&condattr) ||
	pthread_condattr_setpshared(&condattr, PTHREAD_PROCESS_SHARED) ||
	pthread_mutexattr_init(&mutexattr) ||
	pthread_mutexattr_setpshared(&mutexattr, PTHREAD_PROCESS_SHARED) ||
	pthread_cond_init(&cond, &condattr) ||
	pthread_mutex_init(&mutex, &mutexattr) ||
	pthread_mutex_lock(&mutex) ||
	pthread_mutex_unlock(&mutex) ||
	pthread_mutex_destroy(&mutex) ||
	pthread_cond_destroy(&cond) ||
	pthread_condattr_destroy(&condattr) ||
	pthread_mutexattr_destroy(&mutexattr));
}], [db_cv_mutex="POSIX/pthreads/library"])
LIBS="$orig_libs"
fi
if test "$db_cv_mutex" = "posix_only"; then
	AC_MSG_ERROR([unable to find POSIX mutex interfaces])
fi

# msemaphore: HPPA only
# Try HPPA before general msem test, it needs special alignment.
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([
#include <sys/mman.h>
main(){
#if defined(__hppa)
	typedef msemaphore tsl_t;
	msemaphore x;
	msem_init(&x, 0);
	msem_lock(&x, 0);
	msem_unlock(&x, 0);
	exit(0);
#else
	exit(1);
#endif
}], [db_cv_mutex="HP/msem_init"])
fi

# msemaphore: AIX, OSF/1
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([
#include <sys/types.h>
#include <sys/mman.h>
main(){
	typedef msemaphore tsl_t;
	msemaphore x;
	msem_init(&x, 0);
	msem_lock(&x, 0);
	msem_unlock(&x, 0);
	exit(0);
}], [db_cv_mutex="UNIX/msem_init"])
fi

# ReliantUNIX
if test "$db_cv_mutex" = no; then
LIBS="$LIBS -lmproc"
AC_TRY_LINK([#include <ulocks.h>],
[typedef spinlock_t tsl_t;
spinlock_t x; initspin(&x, 1); cspinlock(&x); spinunlock(&x);],
[db_cv_mutex="ReliantUNIX/initspin"])
LIBS="$orig_libs"
fi

# SCO: UnixWare has threads in libthread, but OpenServer doesn't.
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([
main(){
#if defined(__USLC__)
	exit(0);
#endif
	exit(1);
}], [db_cv_mutex="SCO/x86/cc-assembly"])
fi

# abilock_t: SGI
if test "$db_cv_mutex" = no; then
AC_TRY_LINK([#include <abi_mutex.h>],
[typedef abilock_t tsl_t;
abilock_t x; init_lock(&x); acquire_lock(&x); release_lock(&x);],
[db_cv_mutex="SGI/init_lock"])
fi

# sema_t: Solaris
# The sema_XXX calls do not work on Solaris 5.5.  I see no reason to ever
# turn this test on, unless we find some other platform that uses the old
# POSIX.1 interfaces.  (I plan to move directly to pthreads on Solaris.)
if test "$db_cv_mutex" = DOESNT_WORK; then
AC_TRY_LINK([#include <synch.h>],
[typedef sema_t tsl_t;
 sema_t x;
 sema_init(&x, 1, USYNC_PROCESS, NULL); sema_wait(&x); sema_post(&x);],
[db_cv_mutex="UNIX/sema_init"])
fi

# _lock_try/_lock_clear: Solaris
# On Solaris systems without Pthread or UI mutex interfaces, DB uses the
# undocumented _lock_try _lock_clear function calls instead of either the
# sema_trywait(3T) or sema_wait(3T) function calls.  This is because of
# problems in those interfaces in some releases of the Solaris C library.
if test "$db_cv_mutex" = no; then
AC_TRY_LINK([#include <sys/machlock.h>],
[typedef lock_t tsl_t;
 lock_t x;
 _lock_try(&x); _lock_clear(&x);],
[db_cv_mutex="Solaris/_lock_try"])
fi

# _check_lock/_clear_lock: AIX
if test "$db_cv_mutex" = no; then
AC_TRY_LINK([#include <sys/atomic_op.h>],
[int x; _check_lock(&x,0,1); _clear_lock(&x,0);],
[db_cv_mutex="AIX/_check_lock"])
fi

# Alpha/gcc: OSF/1
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if defined(__alpha)
#if defined(__GNUC__)
exit(0);
#endif
#endif
exit(1);}],
[db_cv_mutex="ALPHA/gcc-assembly"])
fi

# PaRisc/gcc: HP/UX
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if defined(__hppa)
#if defined(__GNUC__)
exit(0);
#endif
#endif
exit(1);}],
[db_cv_mutex="HPPA/gcc-assembly"])
fi

# PPC/gcc:
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if defined(__powerpc__) || defined(__ppc__)
#if defined(__GNUC__)
exit(0);
#endif
#endif
exit(1);}],
[db_cv_mutex="PPC/gcc-assembly"])
fi

# Sparc/gcc: SunOS, Solaris
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if defined(__sparc__)
#if defined(__GNUC__)
	exit(0);
#endif
#endif
	exit(1);
}], [db_cv_mutex="Sparc/gcc-assembly"])
fi

# 68K/gcc: SunOS
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if (defined(mc68020) || defined(sun3))
#if defined(__GNUC__)
	exit(0);
#endif
#endif
	exit(1);
}], [db_cv_mutex="68K/gcc-assembly"])
fi

# x86/gcc: FreeBSD, NetBSD, BSD/OS, Linux
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if defined(i386) || defined(__i386__)
#if defined(__GNUC__)
	exit(0);
#endif
#endif
	exit(1);
}], [db_cv_mutex="x86/gcc-assembly"])
fi

# ia86/gcc: Linux
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if defined(__ia64)
#if defined(__GNUC__)
	exit(0);
#endif
#endif
	exit(1);
}], [db_cv_mutex="ia64/gcc-assembly"])
fi

# uts/cc: UTS
if test "$db_cv_mutex" = no; then
AC_TRY_RUN([main(){
#if defined(_UTS)
	exit(0);
#endif
	exit(1);
}], [db_cv_mutex="UTS/cc-assembly"])
fi
])

if test "$db_cv_mutex" = no; then
	AC_MSG_WARN(
	    [THREAD MUTEXES NOT AVAILABLE FOR THIS COMPILER/ARCHITECTURE.])
	ADDITIONAL_OBJS="mut_fcntl${o} $ADDITIONAL_OBJS"
else
	AC_DEFINE(HAVE_MUTEX_THREADS)
	AH_TEMPLATE(HAVE_MUTEX_THREADS, [Define if fast mutexes available.])
fi

case "$db_cv_mutex" in
68K/gcc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_68K_GCC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_68K_GCC_ASSEMBLY, [
			    Define to use the GCC compiler and 68K assembly language mutexes.]);;
AIX/_check_lock)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_AIX_CHECK_LOCK)
			AH_TEMPLATE(HAVE_MUTEX_AIX_CHECK_LOCK, [
			    Define to use the AIX _check_lock mutexes.]);;
ALPHA/gcc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_ALPHA_GCC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_ALPHA_GCC_ASSEMBLY, [
			    Define to use the GCC compiler and Alpha assembly language mutexes.]);;
HP/msem_init)		ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_HPPA_MSEM_INIT)
			AH_TEMPLATE(HAVE_MUTEX_HPPA_MSEM_INIT, [
			    Define to use the msem_XXX mutexes on HP-UX.]);;
HPPA/gcc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_HPPA_GCC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_HPPA_GCC_ASSEMBLY, [
			    Define to use the GCC compiler and PaRisc assembly language mutexes.]);;
ia64/gcc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_IA64_GCC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_IA64_GCC_ASSEMBLY, [
			    Define to use the GCC compiler and IA64 assembly language mutexes.]);;
POSIX/pthreads)		ADDITIONAL_OBJS="mut_pthread${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_PTHREADS)
			AH_TEMPLATE(HAVE_MUTEX_PTHREADS, [
			    Define to use POSIX 1003.1 pthread_XXX mutexes.]);;
POSIX/pthreads/library)	LIBS="-lpthread $LIBS"
			ADDITIONAL_OBJS="mut_pthread${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_PTHREADS)
			AH_TEMPLATE(HAVE_MUTEX_PTHREADS, [
			    Define to use POSIX 1003.1 pthread_XXX mutexes.]);;
PPC/gcc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_PPC_GCC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_PPC_GCC_ASSEMBLY, [
			    Define to use the GCC compiler and PowerPC assembly language mutexes.]);;
ReliantUNIX/initspin)	LIBS="$LIBS -lmproc"
			ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_RELIANTUNIX_INITSPIN)
			AH_TEMPLATE(HAVE_MUTEX_RELIANTUNIX_INITSPIN, [
			    Define to use Reliant UNIX initspin mutexes.]);;
SCO/x86/cc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_SCO_X86_CC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_SCO_X86_CC_ASSEMBLY, [
			    Define to use the SCO compiler and x86 assembly language mutexes.]);;
SGI/init_lock)		ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_SGI_INIT_LOCK)
			AH_TEMPLATE(HAVE_MUTEX_SGI_INIT_LOCK, [
			    Define to use the SGI XXX_lock mutexes.]);;
Solaris/_lock_try)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_SOLARIS_LOCK_TRY)
			AH_TEMPLATE(HAVE_MUTEX_SOLARIS_LOCK_TRY, [
			    Define to use the Solaris _lock_XXX mutexes.]);;
Solaris/lwp)		ADDITIONAL_OBJS="mut_pthread${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_SOLARIS_LWP)
			AH_TEMPLATE(HAVE_MUTEX_SOLARIS_LWP, [
			    Define to use the Solaris lwp threads mutexes.]);;
Sparc/gcc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_SPARC_GCC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_SPARC_GCC_ASSEMBLY, [
			    Define to use the GCC compiler and Sparc assembly language mutexes.]);;
UI/threads)		ADDITIONAL_OBJS="mut_pthread${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_UI_THREADS)
			AH_TEMPLATE(HAVE_MUTEX_UI_THREADS, [
			    Define to use the UNIX International mutexes.]);;
UI/threads/library)	LIBS="-lthread $LIBS"
			ADDITIONAL_OBJS="mut_pthread${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_UI_THREADS)
			AH_TEMPLATE(HAVE_MUTEX_UI_THREADS, [
			    Define to use the UNIX International mutexes.]);;
UNIX/msem_init)		ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_MSEM_INIT)
			AH_TEMPLATE(HAVE_MUTEX_MSEM_INIT, [
			    Define to use the msem_XXX mutexes on systems other than HP-UX.]);;
UNIX/sema_init)		ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_SEMA_INIT)
			AH_TEMPLATE(HAVE_MUTEX_SEMA_INIT, [
			    Define to use the obsolete POSIX 1003.1 sema_XXX mutexes.]);;
UTS/cc-assembly)	ADDITIONAL_OBJS="$ADDITIONAL_OBJS uts4.cc${o}"
			AC_DEFINE(HAVE_MUTEX_UTS_CC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_UTS_CC_ASSEMBLY, [
			    Define to use the UTS compiler and assembly language mutexes.]);;
x86/gcc-assembly)	ADDITIONAL_OBJS="mut_tas${o} $ADDITIONAL_OBJS"
			AC_DEFINE(HAVE_MUTEX_X86_GCC_ASSEMBLY)
			AH_TEMPLATE(HAVE_MUTEX_X86_GCC_ASSEMBLY, [
			    Define to use the GCC compiler and x86 assembly language mutexes.]);;
esac])
