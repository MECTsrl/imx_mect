Binary files linux-2.6.35.3/arch/arm/boot/Image and linux-2.6.35.3.modified/arch/arm/boot/Image differ
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/arch/arm/mach-mx28/Kconfig linux-2.6.35.3.modified/arch/arm/mach-mx28/Kconfig
--- linux-2.6.35.3/arch/arm/mach-mx28/Kconfig	2012-03-19 16:33:06.645948790 +0100
+++ linux-2.6.35.3.modified/arch/arm/mach-mx28/Kconfig	2012-03-19 12:32:45.736007705 +0100
@@ -29,5 +29,16 @@
 	depends on MACH_MX28EVK
 	default y
 	help
-	  Say Y to select the Mect modification (can, ethernet, rs485) 
-		
+	  Say Y to select the Mect modification (can, rs485) 
+config MECT_ELE01
+	bool "Mect customization for ele01 product based on i.mx28 evk board"
+	depends on MACH_MX28EVK
+	default y
+	help
+	  Say Y to select the Mect modification (ethernet, wifi,...) 
+config MECT_VAL01
+	bool "Mect customization for for val01 product based on  i.mx28 evk board"
+	depends on MACH_MX28EVK
+	default y
+	help
+	  Say Y to select the Mect modification (ethernet, ...) 		
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/arch/arm/mach-mx28/mx28evk_pins.c linux-2.6.35.3.modified/arch/arm/mach-mx28/mx28evk_pins.c
--- linux-2.6.35.3/arch/arm/mach-mx28/mx28evk_pins.c	2012-03-19 16:33:06.645948789 +0100
+++ linux-2.6.35.3.modified/arch/arm/mach-mx28/mx28evk_pins.c	2012-03-19 15:12:32.919103796 +0100
@@ -679,6 +679,18 @@
 	 },
 #endif
 
+#if defined(CONFIG_MECT_ELE01) && defined(CONFIG_ARCH_MX28) 
+	{
+	 .name = "WIFI_LAN_EN",
+	 .id = PINID_SSP3_SCK,
+	 .fun = PIN_GPIO,
+	 .voltage = PAD_3_3V,
+	 .data = 1,
+	 .output = 1,
+	 .drive = 1,
+	 },
+#endif
+
 #if defined(CONFIG_MMC_MXS) || defined(CONFIG_MMC_MXS_MODULE)
 	/* Configurations of SSP0 SD/MMC port pins */
 	{
@@ -1369,11 +1381,18 @@
 {
 	/* pwr */
 	gpio_request(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), "ENET_PWR");
-#ifdef CONFIG_MECT_CUSTOMIZATION
+
+#if defined CONFIG_MECT_VAL01
 	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 1);
 #else
 	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 0);
 #endif
+#if defined CONFIG_MECT_ELE01
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 0);
+#else
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 0);
+#endif
+
 
 	/* reset phy */
 	gpio_request(MXS_PIN_TO_GPIO(PINID_ENET0_RX_CLK), "PHY_RESET");
@@ -1393,7 +1412,16 @@
 void mx28evk_enet_io_lowerpower_enter(void)
 {
 	int i;
+#if defined CONFIG_MECT_VAL01
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 0);
+#else
 	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 1);
+#endif
+#if defined CONFIG_MECT_ELE01
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 1);
+#else
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 1);
+#endif
 	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_ENET0_RX_CLK), 0);
 	gpio_request(MXS_PIN_TO_GPIO(PINID_ENET0_TX_CLK), "ETH_INT");
 	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_ENET0_TX_CLK), 0);
@@ -1412,7 +1440,17 @@
 void mx28evk_enet_io_lowerpower_exit(void)
 {
 	int i;
+
+#if defined CONFIG_MECT_VAL01
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 1);
+#else
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 0);
+#endif
+#if defined CONFIG_MECT_ELE01
 	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 0);
+#else
+	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_SSP1_DATA3), 0);
+#endif
 	gpio_direction_output(MXS_PIN_TO_GPIO(PINID_ENET0_RX_CLK), 1);
 	gpio_free(MXS_PIN_TO_GPIO(PINID_ENET0_TX_CLK));
 	for (i = 0; i < ARRAY_SIZE(mx28evk_eth_pins); i++) {
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/arch/arm/mach-mx28/pm.c linux-2.6.35.3.modified/arch/arm/mach-mx28/pm.c
--- linux-2.6.35.3/arch/arm/mach-mx28/pm.c	2012-03-19 16:33:05.917948797 +0100
+++ linux-2.6.35.3.modified/arch/arm/mach-mx28/pm.c	2012-03-19 12:37:06.028009488 +0100
@@ -257,6 +257,7 @@
 
 static void mx28_pm_power_off(void)
 {
+	__raw_writel(0x3e770000, REGS_POWER_BASE + HW_POWER_RESET);
 	__raw_writel(BF_POWER_RESET_UNLOCK(0x3e77) | BM_POWER_RESET_PWD,
 		REGS_POWER_BASE + HW_POWER_RESET);
 }
@@ -316,7 +317,6 @@
 
 static irqreturn_t pswitch_interrupt(int irq, void *dev)
 {
-
 	/* check if irq by pswitch */
 	if (!(__raw_readl(REGS_POWER_BASE + HW_POWER_CTRL) &
 		BM_POWER_CTRL_PSWITCH_IRQ))
@@ -340,11 +340,14 @@
 	kthread_run(suspend_thread_fn, NULL, "pswitch");
 	__raw_writel(BM_POWER_CTRL_PSWITCH_IRQ,
 		REGS_POWER_BASE + HW_POWER_CTRL_CLR);
+
 	__raw_writel(BM_POWER_CTRL_POLARITY_PSWITCH |
 		BM_POWER_CTRL_ENIRQ_PSWITCH,
 		REGS_POWER_BASE + HW_POWER_CTRL_SET);
+
 	__raw_writel(BM_POWER_CTRL_PSWITCH_IRQ,
 		REGS_POWER_BASE + HW_POWER_CTRL_CLR);
+			
 	setup_irq(IRQ_VDD5V, &pswitch_irq);
 }
 
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/hid/Kconfig linux-2.6.35.3.modified/drivers/hid/Kconfig
--- linux-2.6.35.3/drivers/hid/Kconfig	2010-08-20 20:55:55.000000000 +0200
+++ linux-2.6.35.3.modified/drivers/hid/Kconfig	2012-02-20 09:38:21.497075819 +0100
@@ -55,6 +55,12 @@
 menu "Special HID drivers"
 	depends on HID
 
+config HID_PENMOUNT
+	tristate "PenMount USB HID TouchScreen support"
+	depends on USB_HID
+	---help---
+	Support for PenMount touch screen.
+
 config HID_3M_PCT
 	tristate "3M PCT"
 	depends on USB_HID
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/hid/Makefile linux-2.6.35.3.modified/drivers/hid/Makefile
--- linux-2.6.35.3/drivers/hid/Makefile	2010-08-20 20:55:55.000000000 +0200
+++ linux-2.6.35.3.modified/drivers/hid/Makefile	2012-02-20 09:37:02.541076221 +0100
@@ -62,6 +62,7 @@
 obj-$(CONFIG_HID_ZEROPLUS)	+= hid-zpff.o
 obj-$(CONFIG_HID_ZYDACRON)	+= hid-zydacron.o
 obj-$(CONFIG_HID_WACOM)		+= hid-wacom.o
+obj-$(CONFIG_HID_PENMOUNT)	+= hid-penmount.o
 
 obj-$(CONFIG_USB_HID)		+= usbhid/
 obj-$(CONFIG_USB_MOUSE)		+= usbhid/
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/hid/hid-core.c linux-2.6.35.3.modified/drivers/hid/hid-core.c
--- linux-2.6.35.3/drivers/hid/hid-core.c	2010-08-20 20:55:55.000000000 +0200
+++ linux-2.6.35.3.modified/drivers/hid/hid-core.c	2012-02-20 09:35:58.941076234 +0100
@@ -1384,6 +1384,8 @@
 	{ HID_USB_DEVICE(USB_VENDOR_ID_ZYDACRON, USB_DEVICE_ID_ZYDACRON_REMOTE_CONTROL) },
 
 	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_MICROSOFT, USB_DEVICE_ID_MS_PRESENTER_8K_BT) },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_PENMOUNT, USB_DEVICE_ID_PENMOUNT_P1)  },
+	{ HID_USB_DEVICE(USB_VENDOR_ID_PENMOUNT, USB_DEVICE_ID_PENMOUNT_P2)  },
 	{ }
 };
 
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/hid/hid-ids.h linux-2.6.35.3.modified/drivers/hid/hid-ids.h
--- linux-2.6.35.3/drivers/hid/hid-ids.h	2010-08-20 20:55:55.000000000 +0200
+++ linux-2.6.35.3.modified/drivers/hid/hid-ids.h	2012-02-20 09:34:29.405076339 +0100
@@ -526,5 +526,9 @@
 #define USB_DEVICE_ID_KYE_ERGO_525V	0x0087
 #define USB_DEVICE_ID_KYE_GPEN_560	0x5003
 
+//added PenMOUNT device support
+#define USB_VENDOR_ID_PENMOUNT          0x14E1
+#define USB_DEVICE_ID_PENMOUNT_P1       0x3000
+#define USB_DEVICE_ID_PENMOUNT_P2       0x3500
 
 #endif
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/hid/hid-penmount.c linux-2.6.35.3.modified/drivers/hid/hid-penmount.c
--- linux-2.6.35.3/drivers/hid/hid-penmount.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.35.3.modified/drivers/hid/hid-penmount.c	2012-02-20 09:32:30.645291919 +0100
@@ -0,0 +1,500 @@
+/*******************************************************
+*
+*  PenMount HID TouchScreen Driver
+*
+*  Copyright (c) 2011 PenMount Touch Solutions <penmount@seed.net.tw>
+*
+*******************************************************/
+
+/*******************************************************
+* This program is free software; you can redistribute it and/or modify it
+* under the terms of the GNU General Public License as published by the Free
+* Software Foundation; either version 2 of the License, or (at your option)
+* any later version.
+*******************************************************/
+
+////////////////////////////////////////////////////////
+#include <linux/module.h>
+#include <linux/hid.h>
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 38)
+#include <linux/input/mt.h>
+#else
+#include <linux/input.h>
+#endif
+////////////////////////////////////////////////////////
+#define PENMOUNT_MAXTOUCH   2
+#define PENMOUNT_MTPROTO_A  0
+#define PENMOUNT_MTPROTO_B  1
+#define PENMOUNT_ANDROID    0
+#define PENMOUNT_MAXTRACKID 0xFFFF
+
+#ifndef ABS_MT_SLOT
+#define PENMOUNT_MTPROTO   PENMOUNT_MTPROTO_A
+#else
+#define PENMOUNT_MTPROTO   PENMOUNT_MTPROTO_B
+#endif
+
+
+#ifndef USB_VENDOR_ID_PENMOUNT
+#define USB_VENDOR_ID_PENMOUNT          0x14E1
+#endif
+
+#ifndef USB_DEVICE_ID_PENMOUNT_P1
+#define USB_DEVICE_ID_PENMOUNT_P1       0x3000
+#endif
+
+#ifndef USB_DEVICE_ID_PENMOUNT_P2
+#define USB_DEVICE_ID_PENMOUNT_P2       0x3500
+#endif
+
+#ifndef USB_DEVICE_ID_PENMOUNT_6000
+#define USB_DEVICE_ID_PENMOUNT_6000     0x6000
+#endif
+
+#ifndef USB_DEVICE_ID_PENMOUNT_5000
+#define USB_DEVICE_ID_PENMOUNT_5000     0x5000
+#endif
+//------------------------------------------------------
+typedef struct tagPMTOUCH
+{
+    __u8  bUpdated    ;
+    __s32 TrackID     ;
+    __u8  Slot        ;
+    __u8  bTouch      ;
+    __u8  bTouching   ;
+    __u16 X           ;
+    __u16 Y           ;
+    __u16 LastX       ;
+    __u16 LastY       ;
+    __u8  LastState   ;
+} strPMTOUCH ;
+//------------------------------------------------------
+typedef struct tagPenMount
+{
+    __u8        MaxTouch     ;
+    __u8        MTProtocol   ;
+    __s32       TrackIDCount ;
+    strPMTOUCH  Touch[PENMOUNT_MAXTOUCH] ;
+    strPMTOUCH *pLastTouch   ;
+    strPMTOUCH *pMainTouch   ;
+
+} strPenMount ;
+////////////////////////////////////////////////////////
+static
+int PenMountHID_input_mapping ( struct hid_device *pHidDevice ,
+struct hid_input  *pHidInput  ,
+struct hid_field  *pHidField  ,
+struct hid_usage  *pHidUsage  ,
+    unsigned long    **bit        ,
+    int               *max        )
+{
+    // return > 0 : mapped
+    // return < 0 : ignore
+
+    struct input_dev   *pInputDev = pHidInput->input ;
+    strPenMount *pPenMount = (strPenMount *)hid_get_drvdata ( pHidDevice ) ;
+
+    if ( !pInputDev )
+        return 0 ;
+
+    switch ( pHidUsage->hid & HID_USAGE_PAGE )
+    {
+    case HID_UP_GENDESK :
+        switch ( pHidUsage->hid )
+        {
+        case HID_GD_X :
+            if ( pPenMount->MaxTouch > 1 )
+            {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 30)
+                hid_map_usage ( pHidInput, pHidUsage, bit, max, EV_ABS, ABS_MT_POSITION_X ) ;
+#endif
+                input_set_abs_params ( pInputDev, ABS_X, pHidField->logical_minimum, pHidField->logical_maximum, 0, 0 ) ;
+            }
+            else
+                hid_map_usage ( pHidInput, pHidUsage, bit, max, EV_ABS, ABS_X ) ;
+
+            return 1 ;
+        case HID_GD_Y :
+            if ( pPenMount->MaxTouch > 1 )
+            {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 30)
+                hid_map_usage ( pHidInput, pHidUsage, bit, max, EV_ABS, ABS_MT_POSITION_Y ) ;
+#endif
+                input_set_abs_params ( pInputDev, ABS_Y, pHidField->logical_minimum, pHidField->logical_maximum, 0, 0 ) ;
+            }
+            else
+                hid_map_usage ( pHidInput, pHidUsage, bit, max, EV_ABS, ABS_Y ) ;
+
+            return 1 ;
+        }
+        break ;
+    case HID_UP_BUTTON :
+        hid_map_usage ( pHidInput, pHidUsage, bit, max, EV_KEY, BTN_TOUCH ) ;
+        return 1 ;
+        break ;
+    case HID_UP_DIGITIZER :
+        switch ( pHidUsage->hid )
+        {
+        case HID_DG_TIPSWITCH    :
+            hid_map_usage ( pHidInput, pHidUsage, bit, max, EV_KEY, BTN_TOUCH ) ;
+            return 1 ;
+        case HID_DG_CONTACTID    :
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 30)
+            switch ( pPenMount->MTProtocol )
+            {
+            case PENMOUNT_MTPROTO_A:
+                input_set_abs_params ( pInputDev, ABS_MT_TOUCH_MAJOR, 0, 5, 0, 0 ) ;
+                break ;
+            case PENMOUNT_MTPROTO_B:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 38)
+                input_mt_init_slots  ( pInputDev, pPenMount->MaxTouch ) ;
+#elif defined(ABS_MT_SLOT)
+                hid_map_usage        ( pHidInput, pHidUsage, bit, max, EV_ABS, ABS_MT_TRACKING_ID ) ;
+                input_set_abs_params ( pInputDev, ABS_MT_TRACKING_ID, 0, PENMOUNT_MAXTRACKID, 0, 0 ) ;
+                if ( !pInputDev->mt )
+                    input_mt_create_slots ( pInputDev, pPenMount->MaxTouch ) ;
+
+                return 1 ;
+#endif
+                break ;
+            }
+            return -1 ;
+#endif
+        case HID_DG_INRANGE      :
+        case HID_DG_CONFIDENCE   :
+            return -1 ;
+        }
+        break ;
+    }
+
+    return 0 ;
+}
+//------------------------------------------------------
+static
+void PenMount_ProcessEvent ( struct input_dev   *pInputDev ,
+                            strPenMount *pPenMount ,
+                            strPMTOUCH  *pTouch    )
+{
+    if ( pTouch->bTouch )
+    {
+        if ( !pTouch->bTouching )
+        {
+            if ( ( pPenMount->MaxTouch == 1 ) && ( pTouch->Slot == 0 ) )
+                input_report_key ( pInputDev, BTN_TOUCH , 1 ) ;
+            pTouch->bTouching = 1 ;
+        }
+    }
+    else
+    {
+        if ( pTouch->bTouching )
+        {
+            if ( ( pPenMount->MaxTouch == 1 ) && ( pTouch->Slot == 0 ) )
+                input_report_key ( pInputDev, BTN_TOUCH , 0 ) ;
+            pTouch->bTouching = 0 ;
+        }
+    }
+
+    if ( ( pPenMount->MaxTouch == 1 ) && ( pTouch->Slot == 0 ) )
+    {
+        input_report_abs ( pInputDev, ABS_X  , pTouch->X ) ;
+        input_report_abs ( pInputDev, ABS_Y  , pTouch->Y ) ;
+        input_sync       ( pInputDev ) ;
+    }
+
+    pTouch->bTouch = 0 ;
+
+    return ;
+}
+//------------------------------------------------------
+static
+void PenMount_ProcessMTEvent ( struct input_dev   *pInputDev ,
+                              strPenMount *pPenMount )
+{
+    __u8 i = 0 ;
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 30)
+    if ( pPenMount->MaxTouch > 1 )
+    {
+        __u8         TouchCount = 0 ;
+
+        switch ( pPenMount->MTProtocol )
+        {
+        case PENMOUNT_MTPROTO_A :
+            for ( i = 0 ; i < pPenMount->MaxTouch ; i++ )
+            {
+                if ( ( pPenMount->pMainTouch == NULL ) && ( pPenMount->Touch[i].bTouching ) )
+                    pPenMount->pMainTouch = &pPenMount->Touch[i] ;
+
+                if ( pPenMount->Touch[i].bTouching )
+                {
+                    input_report_abs ( pInputDev, ABS_MT_TOUCH_MAJOR , 2 ) ;
+                    input_report_abs ( pInputDev, ABS_MT_POSITION_X  , pPenMount->Touch[i].X ) ;
+                    input_report_abs ( pInputDev, ABS_MT_POSITION_Y  , pPenMount->Touch[i].Y ) ;
+                    input_mt_sync    ( pInputDev ) ;
+                    TouchCount++ ;
+                }
+            }
+            if ( !TouchCount )
+                input_mt_sync ( pInputDev ) ;
+
+            break ;
+        case PENMOUNT_MTPROTO_B :
+#ifdef ABS_MT_SLOT
+            for ( i = 0 ; i < pPenMount->MaxTouch ; i++ )
+            {
+                if ( ( pPenMount->pMainTouch == NULL ) && ( pPenMount->Touch[i].bTouching ) )
+                    pPenMount->pMainTouch = &pPenMount->Touch[i] ;
+
+                if ( ( pPenMount->Touch[i].X != pPenMount->Touch[i].LastX )
+                    || ( pPenMount->Touch[i].Y != pPenMount->Touch[i].LastY )
+                    || ( pPenMount->Touch[i].bTouching != pPenMount->Touch[i].LastState ) )
+                {
+                    input_mt_slot ( pInputDev, i ) ;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 38)
+                    input_mt_report_slot_state ( pInputDev, MT_TOOL_FINGER, pPenMount->Touch[i].bTouching ) ;
+#endif
+                    if ( pPenMount->Touch[i].bTouching )
+                    {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 38)
+                        if ( pPenMount->Touch[i].TrackID < 0 )
+                            pPenMount->Touch[i].TrackID = ( pPenMount->TrackIDCount++ & 0xFFFF ) ;
+                        input_report_abs ( pInputDev, ABS_MT_TRACKING_ID , pPenMount->Touch[i].TrackID ) ;
+#endif
+                        if ( pPenMount->Touch[i].X != pPenMount->Touch[i].LastX )
+                        {
+                            input_report_abs ( pInputDev, ABS_MT_POSITION_X  , pPenMount->Touch[i].X ) ;
+                            pPenMount->Touch[i].LastX = pPenMount->Touch[i].X ;
+                        }
+                        if ( pPenMount->Touch[i].Y != pPenMount->Touch[i].LastY )
+                        {
+                            input_report_abs ( pInputDev, ABS_MT_POSITION_Y  , pPenMount->Touch[i].Y ) ;
+                            pPenMount->Touch[i].LastY = pPenMount->Touch[i].Y ;
+                        }
+                        if ( pPenMount->Touch[i].bTouching != pPenMount->Touch[i].LastState )
+                        {
+                            pPenMount->Touch[i].LastState = pPenMount->Touch[i].bTouching ;
+                        }
+                    }
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 38)
+                    else if ( pPenMount->Touch[i].TrackID != -1 )
+                    {
+                        pPenMount->Touch[i].TrackID = -1 ;
+                        input_report_abs ( pInputDev, ABS_MT_TRACKING_ID , pPenMount->Touch[i].TrackID ) ;
+                    }
+#endif
+                }
+            }
+#endif
+            break ;
+        }
+        // Single-Touch Emulation
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 38)
+        input_mt_report_pointer_emulation ( pInputDev, true ) ;
+#else
+        if ( pPenMount->pMainTouch )
+        {
+            if ( pPenMount->pMainTouch->bTouching )
+            {
+                input_report_key ( pInputDev, BTN_TOUCH , 1 ) ;
+                input_report_abs ( pInputDev, ABS_X  , pPenMount->pMainTouch->X ) ;
+                input_report_abs ( pInputDev, ABS_Y  , pPenMount->pMainTouch->Y ) ;       
+            }
+            else
+            {
+                input_report_key ( pInputDev, BTN_TOUCH , 0 ) ; 
+                pPenMount->pMainTouch = NULL ;
+            }
+        }
+#endif
+        input_sync ( pInputDev ) ;
+    }
+#endif
+
+    for ( i = 0 ; i < pPenMount->MaxTouch ; i++ )
+        pPenMount->Touch[i].bUpdated = 0 ;
+
+    return ;
+}
+//------------------------------------------------------
+static
+int PenMountHID_event ( struct hid_device *pHidDevice ,
+struct hid_field  *pHidField  ,
+struct hid_usage  *pHidUsage  ,
+    __s32              value      )
+{
+    __u8 i              = 0 ;
+    __u8 bProcessEvents = 1 ;
+    if ( !pHidDevice )
+        return 0 ;
+
+    if ( pHidDevice->claimed & HID_CLAIMED_INPUT )
+    {
+        strPenMount *pPenMount = hid_get_drvdata ( pHidDevice ) ;
+        struct input_dev   *pInputDev = pHidField->hidinput->input ;
+
+        if ( !pInputDev )
+            return 0 ;
+
+        if ( !pPenMount->pLastTouch )
+            pPenMount->pLastTouch = &(pPenMount->Touch[0]) ;
+
+        switch ( pHidUsage->hid )
+        {
+        case HID_DG_CONTACTID :
+            if ( value < pPenMount->MaxTouch )
+                pPenMount->pLastTouch = &( pPenMount->Touch[value] ) ;
+            if ( pPenMount->pLastTouch->bUpdated )
+                PenMount_ProcessMTEvent ( pInputDev, pPenMount ) ;
+            pPenMount->pLastTouch->bUpdated = 1 ;
+            break ;
+        case HID_DG_TIPSWITCH :
+            pPenMount->pLastTouch->bTouch = value ;
+            break ;
+        case HID_GD_X         :
+            pPenMount->pLastTouch->X  = value ;
+            break ;
+        case HID_GD_Y         :
+            pPenMount->pLastTouch->Y  = value ;
+            PenMount_ProcessEvent ( pInputDev, pPenMount, pPenMount->pLastTouch ) ;
+            for ( i = 0 ; i < pPenMount->MaxTouch ; i++ )
+                if ( ( !pPenMount->Touch[i].bUpdated )
+                    && ( pPenMount->Touch[i].bTouching ) )
+                    bProcessEvents = 0 ;
+            if ( bProcessEvents )
+                PenMount_ProcessMTEvent ( pInputDev, pPenMount ) ;
+            break ;
+        default :
+            /* fallback to the generic hidinput handling */
+            return 0 ;
+        }
+    }
+
+    if ( ( pHidDevice->claimed & HID_CLAIMED_HIDDEV )
+        && ( pHidDevice->hiddev_hid_event             ) )
+    {
+        pHidDevice->hiddev_hid_event ( pHidDevice, pHidField, pHidUsage, value ) ;
+    }
+
+    return 1 ;
+}
+//------------------------------------------------------
+static 
+int PenMountHID_probe (       struct hid_device    *pHidDevice ,
+                       const struct hid_device_id *pHidDevID  )
+{
+    int               ret       = 0 ;
+    int               i         = 0 ;
+    strPenMount      *pPenMount = NULL ;
+
+    pPenMount = kmalloc ( sizeof(strPenMount), GFP_KERNEL ) ;
+    if ( !pPenMount )
+        return -ENOMEM ;
+
+    memset ( pPenMount , 0 , sizeof(strPenMount) ) ;
+
+    for ( i = 0 ; i < PENMOUNT_MAXTOUCH ; i++ )
+    {
+        pPenMount->Touch[i].Slot    = i ;
+        pPenMount->Touch[i].TrackID = -1 ;
+    }
+    switch ( pHidDevID->product )
+    {
+    case USB_DEVICE_ID_PENMOUNT_P1:
+    case USB_DEVICE_ID_PENMOUNT_P2:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 30)
+        pPenMount->MaxTouch = 2 ;
+        pPenMount->MTProtocol = PENMOUNT_MTPROTO ;
+#else
+        pPenMount->MaxTouch = 1 ;
+#endif
+        break ;
+    default:
+        pPenMount->MaxTouch = 1 ;
+        break ;
+    }
+
+    pPenMount->pLastTouch = &(pPenMount->Touch[0]) ;
+
+    hid_set_drvdata ( pHidDevice , pPenMount ) ;
+
+    ret = hid_parse ( pHidDevice ) ;
+    if ( ret )
+    {
+        kfree ( pPenMount ) ;
+        return ret ;
+    }
+
+    ret = hid_hw_start ( pHidDevice, HID_CONNECT_DEFAULT ) ;
+    if ( ret )
+    {
+        kfree ( pPenMount ) ;
+        return ret ;
+    }
+
+    return ret ;
+}
+//------------------------------------------------------
+static
+void PenMountHID_remove ( struct hid_device *pHidDevice )
+{
+    if ( !pHidDevice )
+        return ;
+
+    hid_hw_stop ( pHidDevice ) ;
+    kfree ( hid_get_drvdata(pHidDevice) ) ;
+    hid_set_drvdata ( pHidDevice , NULL ) ;
+
+    return ;
+}
+////////////////////////////////////////////////////////
+static
+const struct hid_device_id PENMOUNTHID_DEVICEID [] =
+{
+    { HID_USB_DEVICE(USB_VENDOR_ID_PENMOUNT, USB_DEVICE_ID_PENMOUNT_5000) } ,
+    { HID_USB_DEVICE(USB_VENDOR_ID_PENMOUNT, USB_DEVICE_ID_PENMOUNT_6000) } ,
+    { HID_USB_DEVICE(USB_VENDOR_ID_PENMOUNT, USB_DEVICE_ID_PENMOUNT_P1)   } ,
+    { HID_USB_DEVICE(USB_VENDOR_ID_PENMOUNT, USB_DEVICE_ID_PENMOUNT_P2)   } ,
+    { }
+};
+//------------------------------------------------------
+static
+const struct hid_usage_id PENMOUNTHID_USAGETABLE[] =
+{
+    { HID_ANY_ID    , HID_ANY_ID    , HID_ANY_ID     } ,
+    { HID_ANY_ID - 1, HID_ANY_ID - 1, HID_ANY_ID - 1 }
+};
+////////////////////////////////////////////////////////
+static
+struct hid_driver PENMOUNTHID_DRIVER = 
+{
+    .name          = "Hid-PenMount"            ,
+    .id_table      = PENMOUNTHID_DEVICEID      ,
+    .probe         = PenMountHID_probe         ,
+    .remove        = PenMountHID_remove        ,
+    .input_mapping = PenMountHID_input_mapping ,
+    .usage_table   = PENMOUNTHID_USAGETABLE    ,
+    .event         = PenMountHID_event         ,
+};
+//------------------------------------------------------
+static
+int __init PenMountHID_init ( void )
+{
+    return hid_register_driver ( &PENMOUNTHID_DRIVER ) ;
+}
+//------------------------------------------------------
+static
+void __exit PenMountHID_exit ( void )
+{
+    hid_unregister_driver ( &PENMOUNTHID_DRIVER ) ;
+    return ;
+}
+//------------------------------------------------------
+module_init(PenMountHID_init);
+module_exit(PenMountHID_exit);
+////////////////////////////////////////////////////////
+MODULE_AUTHOR("PenMount Touch Solutions <penmount@seed.net.tw>");
+MODULE_DESCRIPTION("PenMount HID TouchScreen Driver");
+MODULE_LICENSE("GPL");
+MODULE_DEVICE_TABLE(hid, PENMOUNTHID_DEVICEID);
+////////////////////////////////////////////////////////
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/mmc/host/mxs-mmc.c linux-2.6.35.3.modified/drivers/mmc/host/mxs-mmc.c
--- linux-2.6.35.3/drivers/mmc/host/mxs-mmc.c	2012-03-19 16:33:05.577948796 +0100
+++ linux-2.6.35.3.modified/drivers/mmc/host/mxs-mmc.c	2012-03-19 15:48:27.508884812 +0100
@@ -1093,7 +1093,7 @@
 		err = host->errirq;
 		goto out_res;
 	}
-
+#ifndef CONFIG_MECT_ELE01
 	/* Set up MMC pins */
 	if (mmc_data->hw_init) {
 		err = mmc_data->hw_init();
@@ -1102,7 +1102,7 @@
 			goto out_res;
 		}
 	}
-
+#endif
 	host->mmc = mmc;
 	host->dev = dev;
 
@@ -1278,9 +1278,10 @@
 	host = mmc_priv(mmc);
 
 	clk_enable(host->clk);
-
+#ifndef CONFIG_MECT_ELE01
 	if (mmc_data->hw_init)
 		mmc_data->hw_init();
+#endif
 	mxs_mmc_reset(host);
 	mxs_mmc_dma_init(host, 1);
 
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/power/mxs/ddi_power_battery.c linux-2.6.35.3.modified/drivers/power/mxs/ddi_power_battery.c
--- linux-2.6.35.3/drivers/power/mxs/ddi_power_battery.c	2012-03-19 16:33:04.097948803 +0100
+++ linux-2.6.35.3.modified/drivers/power/mxs/ddi_power_battery.c	2012-03-15 14:11:45.492379169 +0100
@@ -1780,6 +1780,9 @@
 
 void ddi_power_shutdown(void)
 {
+	/*enable mask*/
+	__raw_writel(0x3e770000, REGS_POWER_BASE + HW_POWER_RESET);
+	/*power down*/
 	__raw_writel(0x3e770001, REGS_POWER_BASE + HW_POWER_RESET);
 }
 
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/power/mxs/linux.c linux-2.6.35.3.modified/drivers/power/mxs/linux.c
--- linux-2.6.35.3/drivers/power/mxs/linux.c	2012-03-19 16:33:06.537948793 +0100
+++ linux-2.6.35.3.modified/drivers/power/mxs/linux.c	2012-03-19 12:44:15.568010040 +0100
@@ -593,6 +593,7 @@
 
 		ddi_power_set_4p2_ilimit(
 				NON_USB_5V_SUPPLY_CURRENT_LIMIT_MA);
+#ifndef CONFIG_MECT_CUSTOMIZATION
 		ddi_bc_SetCurrentLimit(
 				NON_USB_5V_SUPPLY_CURRENT_LIMIT_MA /*mA*/);
 		if (regulator_set_current_limit(info->regulator,
@@ -602,6 +603,10 @@
 				NON_USB_5V_SUPPLY_CURRENT_LIMIT_MA*1000);
 		}
 		ddi_bc_SetEnable();
+#else
+		ddi_bc_SetDisable();
+		ddi_bc_SetCurrentLimit(0);
+#endif
 		goto done;
 #else
 
@@ -632,16 +637,26 @@
 	} else {
 
 		if (info->onboard_vbus5v_online == 0) {
+#ifndef CONFIG_MECT_CUSTOMIZATION
 			ddi_bc_SetCurrentLimit(
 				POWERED_USB_5V_CURRENT_LIMIT_MA/*mA*/);
 			ddi_bc_SetEnable();
+#else
+			ddi_bc_SetDisable();
+			ddi_bc_SetCurrentLimit(0);
+#endif
 		} else
 			pr_debug("DO NOT charge from onboard 5v");
 	}
 
 	if (info->is_usb_online & USB_SM_RESTART) {
 		info->is_usb_online &= ~USB_SM_RESTART;
+#ifndef CONFIG_MECT_CUSTOMIZATION
 		ddi_bc_SetEnable();
+#else
+		ddi_bc_SetDisable();
+		ddi_bc_SetCurrentLimit(0);
+#endif
 	}
 
 	info->is_usb_online |= USB_REG_SET;
@@ -1112,17 +1127,27 @@
 
 		info->is_ac_online = 1;
 		info->is_usb_online = 0;
+#ifndef CONFIG_MECT_CUSTOMIZATION
 		ddi_bc_SetCurrentLimit(
 			NON_USB_5V_SUPPLY_CURRENT_LIMIT_MA /*mA*/);
 		ddi_bc_SetEnable();
+#else
+		ddi_bc_SetDisable();
+		ddi_bc_SetCurrentLimit(0);
+#endif
 	} else if (is_usb_online()) {
 		/* usb supply connected */
 		dev_dbg(info->dev, "usb/5v present, enabling state machine\n");
 
 		info->is_ac_online = 0;
 		info->is_usb_online = 1;
+#ifndef CONFIG_MECT_CUSTOMIZATION
 		ddi_bc_SetCurrentLimit(POWERED_USB_5V_CURRENT_LIMIT_MA /*mA*/);
 		ddi_bc_SetEnable();
+#else
+		ddi_bc_SetDisable();
+		ddi_bc_SetCurrentLimit(0);
+#endif
 	} else {
 		/* not powered */
 		dev_dbg(info->dev, "%s: 5v not present\n", __func__);
@@ -1249,8 +1274,10 @@
 	cpu = clk_get(NULL, "cpu");
 	pll0 = clk_get(NULL, "ref_cpu");
 	clk_set_parent(cpu, pll0);
-	ret = platform_driver_register(&mxs_batdrv);
 #endif
+
+	ret = platform_driver_register(&mxs_batdrv);
+
 #ifdef PWRFAIL_SIGNAL
 	/* only root can write to this file (no read) */
 	file = debugfs_create_file("signalconfpid", 0200, NULL, NULL, &my_fops);

