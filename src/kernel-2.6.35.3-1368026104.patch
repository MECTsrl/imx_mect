diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/arch/arm/mach-mx28/device.c linux-2.6.35.3.modified/arch/arm/mach-mx28/device.c
--- linux-2.6.35.3/arch/arm/mach-mx28/device.c	2013-05-08 17:16:39.167517981 +0200
+++ linux-2.6.35.3.modified/arch/arm/mach-mx28/device.c	2013-05-07 16:04:21.398777480 +0200
@@ -32,6 +32,8 @@
 #include <linux/gpmi-nfc.h>
 #include <linux/fsl_devices.h>
 
+#include <linux/i2c-gpio.h>
+
 #include <asm/mach/map.h>
 
 #include <mach/hardware.h>
@@ -328,6 +330,30 @@
 		}
 		mxs_add_device(pdev, 2);
 	}
+} /*CONFIG_I2C_MXS*/
+#elif (defined (CONFIG_I2C_GPIO) || defined(CONFIG_I2C_GPIO_MODULE)) && !defined(CONFIG_MXS_AUART3_DEVICE_ENABLE)
+static struct i2c_gpio_platform_data i2c_gpio_pdata = {
+	.sda_pin		= MXS_PIN_TO_GPIO(PINID_AUART3_TX),
+	.sda_is_open_drain	= 1,
+	.scl_pin		= MXS_PIN_TO_GPIO(PINID_AUART3_RX),
+	.scl_is_open_drain	= 1,
+	.udelay			= 5,		/* 5 = 100 KHz 2 ~250 kHz with 20 = 25KHz works fine!!!!! */
+};
+
+static void __init mx28_init_i2c(void)
+{
+	struct platform_device *pdev;
+	pdev = mxs_get_device("i2c-gpio", 0);
+	if (pdev == NULL || IS_ERR(pdev))
+	{
+		printk(KERN_INFO "i2c-gpio mxs_get_device fail\n");
+		return;
+	}
+	pdev->resource = 0;
+	pdev->num_resources = 0;
+	pdev->dev.platform_data = &i2c_gpio_pdata;
+
+	mxs_add_device(pdev, 3);
 }
 #else
 static void __init mx28_init_i2c(void)
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/arch/arm/mach-mx28/mx28evk.c linux-2.6.35.3.modified/arch/arm/mach-mx28/mx28evk.c
--- linux-2.6.35.3/arch/arm/mach-mx28/mx28evk.c	2013-05-08 17:16:36.548827980 +0200
+++ linux-2.6.35.3.modified/arch/arm/mach-mx28/mx28evk.c	2013-05-07 16:06:48.852467731 +0200
@@ -42,7 +42,8 @@
 #include "mx28evk.h"
 
 static struct i2c_board_info __initdata mxs_i2c_device[] = {
-	{ I2C_BOARD_INFO("sgtl5000-i2c", 0xa), .flags = I2C_M_TEN }
+//	{ I2C_BOARD_INFO("sgtl5000-i2c", 0xa), .flags = I2C_M_TEN },
+	{ I2C_BOARD_INFO("rs5c372a", 0x32) },
 };
 
 static void __init i2c_device_init(void)
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/arch/arm/plat-mxs/device.c linux-2.6.35.3.modified/arch/arm/plat-mxs/device.c
--- linux-2.6.35.3/arch/arm/plat-mxs/device.c	2013-05-08 17:16:39.139531981 +0200
+++ linux-2.6.35.3.modified/arch/arm/plat-mxs/device.c	2013-05-07 17:19:41.845871470 +0200
@@ -139,6 +139,16 @@
 };
 #endif
 
+#if defined(CONFIG_I2C_GPIO) || defined(CONFIG_I2C_GPIO_MODULE)
+static struct platform_device gpio_i2c = {
+	.name = "i2c-gpio",
+	.id = 0,
+	.dev = {
+		.release = mxs_nop_release,
+		},
+};
+#endif
+
 #if defined(CONFIG_MTD_NAND_GPMI_NFC) || \
 	defined(CONFIG_MTD_NAND_GPMI_NFC_MODULE)
 static struct platform_device gpmi_nfc = {
@@ -556,6 +566,14 @@
 	 },
 #endif
 
+#if defined(CONFIG_I2C_GPIO) || defined(CONFIG_I2C_GPIO_MODULE)
+	{
+	 .name = "i2c-gpio",
+	 .size = 1,
+	 .pdev = &gpio_i2c,
+	 },
+#endif
+
 #if defined(CONFIG_MTD_NAND_GPMI_NFC) || \
 	defined(CONFIG_MTD_NAND_GPMI_NFC_MODULE)
 	{
diff --exclude CVS --exclude .git -uNr linux-2.6.35.3/drivers/rtc/rtc-rs5c372.c linux-2.6.35.3.modified/drivers/rtc/rtc-rs5c372.c
--- linux-2.6.35.3/drivers/rtc/rtc-rs5c372.c	2010-08-20 20:55:55.000000000 +0200
+++ linux-2.6.35.3.modified/drivers/rtc/rtc-rs5c372.c	2013-05-08 16:50:26.898041790 +0200
@@ -55,6 +55,7 @@
 #	define RS5C372_CTRL2_24		(1 << 5)
 #	define R2025_CTRL2_XST		(1 << 5)
 #	define RS5C_CTRL2_XSTP		(1 << 4)	/* only if !R2025S/D */
+#	define RS5C_CTRL2_CLEN		(1 << 3)
 #	define RS5C_CTRL2_CTFG		(1 << 2)
 #	define RS5C_CTRL2_AAFG		(1 << 1)	/* or WAFG */
 #	define RS5C_CTRL2_BAFG		(1 << 0)	/* or DAFG */
@@ -133,9 +134,9 @@
 		}
 	}
 
-	dev_dbg(&client->dev,
-		"%02x %02x %02x (%02x) %02x %02x %02x (%02x), "
-		"%02x %02x %02x, %02x %02x %02x; %02x %02x\n",
+	dev_dbg( &client->dev, 
+		"REGISTER MAP: [0] %02x \n[1] %02x \n[2]%02x \n [3](%02x) \n[4] %02x \n[5] %02x \n[6] %02x \n[7](%02x),\n "
+		"[8] %02x \n[9] %02x \n[10] %02x,\n[11] %02x \n[12] %02x \n[13] %02x; \n[14] %02x \n [15] %02x\n",
 		rs5c->regs[0],  rs5c->regs[1],  rs5c->regs[2],  rs5c->regs[3],
 		rs5c->regs[4],  rs5c->regs[5],  rs5c->regs[6],  rs5c->regs[7],
 		rs5c->regs[8],  rs5c->regs[9],  rs5c->regs[10], rs5c->regs[11],
@@ -194,7 +195,7 @@
 	/* year is 1900 + tm->tm_year */
 	tm->tm_year = bcd2bin(rs5c->regs[RS5C372_REG_YEAR]) + 100;
 
-	dev_dbg(&client->dev, "%s: tm is secs=%d, mins=%d, hours=%d, "
+	dev_dbg( &client->dev,  "%s: tm is secs=%d, mins=%d, hours=%d, "
 		"mday=%d, mon=%d, year=%d, wday=%d\n",
 		__func__,
 		tm->tm_sec, tm->tm_min, tm->tm_hour,
@@ -210,7 +211,7 @@
 	unsigned char	buf[8];
 	int		addr;
 
-	dev_dbg(&client->dev, "%s: tm is secs=%d, mins=%d, hours=%d "
+	dev_dbg( &client->dev,  "%s: tm is secs=%d, mins=%d, hours=%d "
 		"mday=%d, mon=%d, year=%d, wday=%d\n",
 		__func__,
 		tm->tm_sec, tm->tm_min, tm->tm_hour,
@@ -251,7 +252,7 @@
 		*osc = (tmp & RS5C372_TRIM_XSL) ? 32000 : 32768;
 
 	if (trim) {
-		dev_dbg(&client->dev, "%s: raw trim=%x\n", __func__, tmp);
+		dev_dbg( &client->dev,  "%s: raw trim=%x\n", __func__, tmp);
 		tmp &= RS5C372_TRIM_MASK;
 		if (tmp & 0x3e) {
 			int t = tmp & 0x3f;
@@ -271,6 +272,82 @@
 }
 #endif
 
+static int rs5c372_reset_rtc(struct i2c_client *client)
+{
+				
+	
+	
+	//rtc_wr(RTC_CTL1_REG_ADDR, 0 );
+	//rtc_wr(RTC_CTL2_REG_ADDR, RTC_CTL2_BIT_1224 | RTC_CTL2_BIT_NCLEN);	
+	struct rs5c372		*rs5c = i2c_get_clientdata(client);
+	unsigned char		buf;
+	int			status, addr;
+
+	printk ("RS5C372 Writing Control Register\n");
+
+	buf = rs5c->regs[RS5C_REG_CTRL1];
+	status = rs5c_get_regs(rs5c);
+	if (status < 0)
+		return status;
+
+	addr = RS5C_ADDR(RS5C_REG_CTRL1);
+	buf = 0x0;
+	if (i2c_smbus_write_byte_data(client, addr, buf) < 0) {
+		dev_dbg( &client->dev, KERN_WARNING "%s: can't update ctrl1 %x\n",
+			rs5c->rtc->name, buf);
+		status = -EIO;
+	} else
+		rs5c->regs[RS5C_REG_CTRL1] = buf;
+
+	buf = rs5c->regs[RS5C_REG_CTRL2];
+	status = rs5c_get_regs(rs5c);
+	if (status < 0)
+		return status;
+
+	addr = RS5C_ADDR(RS5C_REG_CTRL2);
+	buf |= (RS5C372_CTRL2_24 | RS5C_CTRL2_CLEN);
+	if (i2c_smbus_write_byte_data(client, addr, buf) < 0) {
+		dev_dbg( &client->dev, KERN_WARNING "%s: can't update ctrl2 %x\n",
+			rs5c->rtc->name, buf);
+		status = -EIO;
+	} else
+		rs5c->regs[RS5C_REG_CTRL2] = buf;
+
+	return status;
+
+}
+
+
+static int rs5c372_set_trim(struct i2c_client *client, int select)
+{
+	struct rs5c372		*rs5c = i2c_get_clientdata(client);
+	unsigned char		buf;
+	int			status, addr;
+
+	buf = rs5c->regs[RS5C372_REG_TRIM];
+	
+	dev_dbg( &client->dev, "%s current(!) trim value %x\n", __func__, buf);
+
+	status = rs5c_get_regs(rs5c);
+	if (status < 0)
+		return status;
+
+	addr = RS5C_ADDR(RS5C372_REG_TRIM);
+	if(select)
+		buf |= RS5C372_TRIM_XSL;
+	else
+		buf &= ~(RS5C372_TRIM_XSL);
+
+	if (i2c_smbus_write_byte_data(client, addr, buf) < 0) {
+		dev_dbg( &client->dev, KERN_WARNING "%s: can't update trim %x\n",
+			rs5c->rtc->name, buf);
+		status = -EIO;
+	} else
+		rs5c->regs[RS5C372_REG_TRIM] = buf;
+
+	return status;
+}
+
 static int rs5c372_rtc_read_time(struct device *dev, struct rtc_time *tm)
 {
 	return rs5c372_get_datetime(to_i2c_client(dev), tm);
@@ -278,7 +355,14 @@
 
 static int rs5c372_rtc_set_time(struct device *dev, struct rtc_time *tm)
 {
-	return rs5c372_set_datetime(to_i2c_client(dev), tm);
+	int val;
+	val = rs5c372_set_datetime(to_i2c_client(dev), tm);
+	if (val < 0)
+		return -EIO;
+	else
+		rs5c372_set_trim(to_i2c_client(dev), 0);
+	return 0;
+		
 }
 
 #if defined(CONFIG_RTC_INTF_DEV) || defined(CONFIG_RTC_INTF_DEV_MODULE)
@@ -333,7 +417,7 @@
 	}
 
 	if (i2c_smbus_write_byte_data(client, addr, buf) < 0) {
-		printk(KERN_WARNING "%s: can't update alarm\n",
+		dev_dbg( &client->dev, KERN_WARNING "%s: can't update alarm\n",
 			rs5c->rtc->name);
 		status = -EIO;
 	} else
@@ -431,7 +515,7 @@
 		addr = RS5C_ADDR(RS5C_REG_CTRL1);
 		buf[0] = rs5c->regs[RS5C_REG_CTRL1] | RS5C_CTRL1_AALE;
 		if (i2c_smbus_write_byte_data(client, addr, buf[0]) < 0)
-			printk(KERN_WARNING "%s: can't enable alarm\n",
+			dev_dbg( &client->dev, KERN_WARNING "%s: can't enable alarm\n",
 				rs5c->rtc->name);
 		rs5c->regs[RS5C_REG_CTRL1] = buf[0];
 	}
@@ -588,7 +672,7 @@
 	struct rs5c372 *rs5c372;
 	struct rtc_time tm;
 
-	dev_dbg(&client->dev, "%s\n", __func__);
+	dev_dbg( &client->dev,  "%s\n", __func__);
 
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C |
 			I2C_FUNC_SMBUS_BYTE_DATA | I2C_FUNC_SMBUS_I2C_BLOCK)) {
@@ -662,7 +746,7 @@
 
 	if (rs5c372_get_datetime(client, &tm) < 0)
 		dev_warn(&client->dev, "clock needs to be set\n");
-
+	
 	dev_info(&client->dev, "%s found, %s, driver version " DRV_VERSION "\n",
 			({ char *s; switch (rs5c372->type) {
 			case rtc_r2025sd:	s = "r2025sd"; break;
