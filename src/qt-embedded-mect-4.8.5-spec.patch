--- ltib/dist/lfs-5.1/qt/qt-embedded.spec	2013-01-09 04:58:38.000000000 +0100
+++ ltib.new/dist/lfs-5.1/qt/qt-embedded.spec	2015-10-12 10:46:10.546468000 +0200
@@ -1,41 +1,48 @@
 %define pfx /opt/freescale/rootfs/%{_target_cpu}
+%define archivename qt-everywhere-opensource-src
 
 Summary         : Qt
-Name            : qt-everywhere-opensource-src
-Version         : 4.6.0
-Release         : 0
-License         : GNU GPL
+Name            : qt-embedded
+Version         : 4.8.5
+Release         : 1
+License         : LGPL v2.1
 Vendor          : Freescale
 Packager        : Rogerio Pimentel
 Group           : System Environment/Libraries
-Source          : %{name}-%{version}.tar.gz
-BuildRoot       : %{_tmppath}/%{name}
+URL             : http://get.qt.nokia.com/qt/source/%{archivename}-%{version}.tar.gz
+Source          : %{archivename}-%{version}.tar.gz
+Patch1          : %{archivename}-%{version}-1394522957.patch
+Patch2          : %{archivename}-%{version}-1420823826.patch
+Patch3          : %{archivename}-%{version}-1420823825.patch
+BuildRoot       : %{_tmppath}/%{name}-%{version}
 Prefix          : %{pfx}
-URL             : http://get.qt.nokia.com/qt/source/qt-everywhere-opensource-src-4.6.0.tar.gz
+AutoReqProv     : no
+
+
+%if %{?toolchain:0}%{!?toolchain:1}
+
+%Package rfs
+Summary         : Trimmed qt-embedded for root file system requirements.
+Group           : Applications/File
+AutoReqProv     : no
+%Description rfs
+qt-embedded package contents restricted to just the files that
+are needed at run time on the target.
+
+%endif
+
 
 %Description
 %{summary}
 
 %Prep
-%setup
+%setup -n %{archivename}-%{version}
 
 #Checking what packages are available
 
 export XTRA_OPTS=""
 export XTRA_OPTS_CONFIG=""
 
-if [ -n "$PKG_QT_PHONON" ]
-then
-    export XTRA_OPTS="$XTRA_OPTS -multimedia -phonon -phonon-backend -lgstreamer-0.10"
-    export XTRA_OPTS_CONFIG="$XTRA_OPTS_CONFIG -lgstreamer-0.10 -lxml2 -lasound"
-fi
-
-#if PKG_AMD_GPU_BIN_MX51 is already installed, uncomment the following line to add OpenGLES 2 support
-#export XTRA_OPTS_CONFIG="$XTRA_OPTS_CONFIG -lGLESv2 -lEGL -lgsl -lc2d -lpanel2"
-
-#if PKG_MBX_BIN is already installed, uncomment the following line to add OpenGLES 1.1 support
-#export XTRA_OPTS_CONFIG="$XTRA_OPTS_CONFIG -lEGL -lEGL"
-
 mkdir mkspecs/qws/linux-g++-mx
 initscript=mkspecs/qws/linux-g++-mx/qmake.conf
 cat > $initscript << EOF
@@ -43,123 +50,103 @@
 # qmake configuration for building with arm-none-linux-gnueabi-g++
 #
 
-QMAKE_CC		= arm-none-linux-gnueabi-gcc
-QMAKE_CFLAGS		+= -pipe
-QMAKE_CFLAGS_DEPS	+= -M
-QMAKE_CFLAGS_WARN_ON	+= -Wall -W
-QMAKE_CFLAGS_WARN_OFF	+= -w
-QMAKE_CFLAGS_RELEASE	+= -O2
-QMAKE_CFLAGS_DEBUG	+= -g
-QMAKE_CFLAGS_SHLIB	+= -fPIC
-QMAKE_CFLAGS_STATIC_LIB	+= -fPIC
-QMAKE_CFLAGS_YACC	+= -Wno-unused -Wno-parentheses
-QMAKE_CFLAGS_HIDESYMS   += -fvisibility=hidden
-QMAKE_CFLAGS_PRECOMPILE += -x c-header -c \${QMAKE_PCH_INPUT} -o \${QMAKE_PCH_OUTPUT}
-QMAKE_CFLAGS_USE_PRECOMPILE += -include \${QMAKE_PCH_OUTPUT_BASE}
-
-QMAKE_CXX		= arm-none-linux-gnueabi-g++
-QMAKE_CXXFLAGS		+= \$\$QMAKE_CFLAGS
-QMAKE_CXXFLAGS_DEPS	+= \$\$QMAKE_CFLAGS_DEPS
-QMAKE_CXXFLAGS_WARN_ON	+= \$\$QMAKE_CFLAGS_WARN_ON
-QMAKE_CXXFLAGS_WARN_OFF	+= \$\$QMAKE_CFLAGS_WARN_OFF
-QMAKE_CXXFLAGS_RELEASE	+= \$\$QMAKE_CFLAGS_RELEASE
-QMAKE_CXXFLAGS_DEBUG	+= \$\$QMAKE_CFLAGS_DEBUG
-QMAKE_CXXFLAGS_SHLIB	+= \$\$QMAKE_CFLAGS_SHLIB
-QMAKE_CXXFLAGS_STATIC_LIB += \$\$QMAKE_CFLAGS_STATIC_LIB
-QMAKE_CXXFLAGS_YACC	+= \$\$QMAKE_CFLAGS_YACC
-QMAKE_CXXFLAGS_HIDESYMS += \$\$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden
-QMAKE_CXXFLAGS_PRECOMPILE += -x c++-header -c \${QMAKE_PCH_INPUT} -o \${QMAKE_PCH_OUTPUT}
-QMAKE_CXXFLAGS_USE_PRECOMPILE = \$\$QMAKE_CFLAGS_USE_PRECOMPILE
-
-QMAKE_LINK		= arm-none-linux-gnueabi-g++
-QMAKE_LINK_SHLIB	= arm-none-linux-gnueabi-g++
-QMAKE_LINK_C		= arm-none-linux-gnueabi-gcc
-QMAKE_LINK_C_SHLIB	= arm-none-linux-gnueabi-gcc
-QMAKE_LFLAGS		+=
-QMAKE_LFLAGS_RELEASE	+= -Wl,-O1
-QMAKE_LFLAGS_DEBUG	+=
-QMAKE_LFLAGS_APP	+=
-QMAKE_LFLAGS_SHLIB	+= -shared
-QMAKE_LFLAGS_PLUGIN	+= \$\$QMAKE_LFLAGS_SHLIB
-QMAKE_LFLAGS_SONAME	+= -Wl,-soname,
-QMAKE_LFLAGS_THREAD	+=
-QMAKE_LFLAGS_NOUNDEF	+= -Wl,--no-undefined
-QMAKE_RPATH		= -Wl,-rpath,
+QMAKE_CC                      =  arm-none-linux-gnueabi-gcc
+QMAKE_CFLAGS                  += -pipe
+QMAKE_CFLAGS_DEPS             += -M
+QMAKE_CFLAGS_WARN_ON          += -Wall -W
+QMAKE_CFLAGS_WARN_OFF         += -w
+QMAKE_CFLAGS_RELEASE          += -O2
+QMAKE_CFLAGS_DEBUG            += -g
+QMAKE_CFLAGS_SHLIB            += -fPIC
+QMAKE_CFLAGS_STATIC_LIB       += -fPIC
+QMAKE_CFLAGS_YACC             += -Wno-unused -Wno-parentheses
+QMAKE_CFLAGS_HIDESYMS         += -fvisibility=hidden
+QMAKE_CFLAGS_PRECOMPILE       += -x c-header -c \${QMAKE_PCH_INPUT} -o \${QMAKE_PCH_OUTPUT}
+QMAKE_CFLAGS_USE_PRECOMPILE   += -include \${QMAKE_PCH_OUTPUT_BASE}
+
+QMAKE_CXX                     =  arm-none-linux-gnueabi-g++
+QMAKE_CXXFLAGS                += \$\$QMAKE_CFLAGS
+QMAKE_CXXFLAGS_DEPS           += \$\$QMAKE_CFLAGS_DEPS
+QMAKE_CXXFLAGS_WARN_ON        += \$\$QMAKE_CFLAGS_WARN_ON
+QMAKE_CXXFLAGS_WARN_OFF       += \$\$QMAKE_CFLAGS_WARN_OFF
+QMAKE_CXXFLAGS_RELEASE        += \$\$QMAKE_CFLAGS_RELEASE
+QMAKE_CXXFLAGS_DEBUG          += \$\$QMAKE_CFLAGS_DEBUG
+QMAKE_CXXFLAGS_SHLIB          += \$\$QMAKE_CFLAGS_SHLIB
+QMAKE_CXXFLAGS_STATIC_LIB     += \$\$QMAKE_CFLAGS_STATIC_LIB
+QMAKE_CXXFLAGS_YACC           += \$\$QMAKE_CFLAGS_YACC
+QMAKE_CXXFLAGS_HIDESYMS       += \$\$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden
+QMAKE_CXXFLAGS_PRECOMPILE     += -x c++-header -c \${QMAKE_PCH_INPUT} -o \${QMAKE_PCH_OUTPUT}
+QMAKE_CXXFLAGS_USE_PRECOMPILE =  \$\$QMAKE_CFLAGS_USE_PRECOMPILE
+
+QMAKE_LINK                    =  arm-none-linux-gnueabi-g++
+QMAKE_LINK_SHLIB              =  arm-none-linux-gnueabi-g++
+QMAKE_LINK_C                  =  arm-none-linux-gnueabi-gcc
+QMAKE_LINK_C_SHLIB            =  arm-none-linux-gnueabi-gcc
+QMAKE_LFLAGS                  +=
+QMAKE_LFLAGS_RELEASE          += -Wl,-O1
+QMAKE_LFLAGS_DEBUG            +=
+QMAKE_LFLAGS_APP              +=
+QMAKE_LFLAGS_SHLIB            += -shared
+QMAKE_LFLAGS_PLUGIN           += \$\$QMAKE_LFLAGS_SHLIB
+QMAKE_LFLAGS_SONAME           += -Wl,-soname,
+QMAKE_LFLAGS_THREAD           +=
+QMAKE_LFLAGS_NOUNDEF          += -Wl,--no-undefined
+QMAKE_LFLAGS_RPATH            =  -Wl,-rpath,
 
-QMAKE_PCH_OUTPUT_EXT    = .gch
+QMAKE_PCH_OUTPUT_EXT          =  .gch
 
 # -Bsymbolic-functions (ld) support
-QMAKE_LFLAGS_BSYMBOLIC_FUNC = -Wl,-Bsymbolic-functions
-QMAKE_LFLAGS_DYNAMIC_LIST = -Wl,--dynamic-list,
+QMAKE_LFLAGS_BSYMBOLIC_FUNC   =  -Wl,-Bsymbolic-functions
+QMAKE_LFLAGS_DYNAMIC_LIST     =  -Wl,--dynamic-list,
 
-QMAKE_CFLAGS_THREAD	+= -D_REENTRANT
-QMAKE_CXXFLAGS_THREAD	+= \$\$QMAKE_CFLAGS_THREAD
+QMAKE_CFLAGS_THREAD           += -D_REENTRANT
+QMAKE_CXXFLAGS_THREAD         += \$\$QMAKE_CFLAGS_THREAD
 
-QMAKE_INCDIR          = $RPM_BUILD_DIR/../../rootfs/usr/include $RPM_BUILD_DIR/../../rootfs/usr/include/glib-2.0 \
-			$RPM_BUILD_DIR/../../rootfs/usr/lib/glib-2.0/include/ $RPM_BUILD_DIR/../../rootfs/usr/include/gstreamer-0.10/ \
-			$RPM_BUILD_DIR/../../rootfs/usr/include/libxml2/ $RPM_BUILD_DIR/../../rootfs/usr/include/freetype2
-QMAKE_LIBDIR          = $RPM_BUILD_DIR/../../rootfs/usr/lib
-QMAKE_INCDIR_X11      =
-QMAKE_LIBDIR_X11      =
-QMAKE_INCDIR_QT       = \$\$[QT_INSTALL_HEADERS]
-QMAKE_LIBDIR_QT       = \$\$[QT_INSTALL_LIBS]
-QMAKE_INCDIR_OPENGL   = $RPM_BUILD_DIR/../../rootfs/usr/include/GL
-QMAKE_LIBDIR_OPENGL   = $RPM_BUILD_DIR/../../rootfs/usr/lib
-QMAKE_INCDIR_POWERVR  = $RPM_BUILD_DIR/../../rootfs/usr/include
-QMAKE_INCDIR_OPENGL_ES1 = $RPM_BUILD_DIR/../../rootfs/usr/include/GLES
-QMAKE_LIBDIR_OPENGL_ES1 = $RPM_BUILD_DIR/../../rootfs/usr/lib
-QMAKE_INCDIR_OPENGL_ES1CL = $RPM_BUILD_DIR/../../rootfs/usr/include/GLES
-QMAKE_LIBDIR_OPENGL_ES1CL = $RPM_BUILD_DIR/../../rootfs/usr/lib
-QMAKE_INCDIR_OPENGL_ES2 = $RPM_BUILD_DIR/../../rootfs/usr/include/GLES2
-QMAKE_LIBDIR_OPENGL_ES2 = $RPM_BUILD_DIR/../../rootfs/usr/lib
-QMAKE_INCDIR_EGL      = $RPM_BUILD_DIR/../../rootfs/usr/include/GL
-QMAKE_LIBDIR_EGL      = $RPM_BUILD_DIR/../../rootfs/usr/lib
-QMAKE_INCDIR_OPENVG   =
-QMAKE_LIBDIR_OPENVG   =
-
-QMAKE_LIBS            = -lglib-2.0 -lgthread-2.0 -lz -lgmodule-2.0 -lgobject-2.0 -lts -lfreetype $XTRA_OPTS_CONFIG
-QMAKE_LIBS_DYNLOAD    = -ldl
-QMAKE_LIBS_X11        =
-QMAKE_LIBS_X11SM      =
-QMAKE_LIBS_NIS        = -lnsl
-QMAKE_LIBS_EGL        = -lEGL
-QMAKE_LIBS_OPENGL     = -lGLU -lGL
-QMAKE_LIBS_OPENGL_QT  = -lGL
-QMAKE_LIBS_OPENGL_ES1 = -lGLESv1_CM
-QMAKE_LIBS_OPENGL_ES1CL = -lGLES_CL
-QMAKE_LIBS_OPENGL_ES2 = -lGLESv2
-QMAKE_LIBS_OPENVG     = -lOpenVG
-QMAKE_LIBS_THREAD     = -lpthread
-QMAKE_LIBS_EGL	      = -lEGL
-
-QMAKE_MOC             = \$\$[QT_INSTALL_BINS]/moc
-QMAKE_UIC             = \$\$[QT_INSTALL_BINS]/uic
-
-QMAKE_AR              = arm-none-linux-gnueabi-ar cqs
-QMAKE_OBJCOPY         = arm-none-linux-gnueabi-objcopy
-QMAKE_RANLIB          = arm-none-linux-gnueabi-ranlib
-
-QMAKE_TAR             = tar -cf
-QMAKE_GZIP            = gzip -9f
-
-QMAKE_COPY            = cp -f
-QMAKE_COPY_FILE       = \$(COPY)
-QMAKE_COPY_DIR        = \$(COPY) -r
-QMAKE_MOVE            = mv -f
-QMAKE_DEL_FILE        = rm -f
-QMAKE_DEL_DIR         = rmdir
-QMAKE_STRIP           = arm-none-linux-gnueabi-strip
-QMAKE_STRIPFLAGS_LIB += --strip-unneeded
-QMAKE_CHK_DIR_EXISTS  = test -d
-QMAKE_MKDIR           = mkdir -p
-QMAKE_INSTALL_FILE    = install -m 644 -p
-QMAKE_INSTALL_PROGRAM = install -m 755 -p
-
-MAKEFILE_GENERATOR      = UNIX
-TEMPLATE                = app
-CONFIG                 += qt warn_on release incremental link_prl
-QT                     += core gui network
-QMAKE_INCREMENTAL_STYLE = sublib
+%if %{?toolchain:1}%{!?toolchain:0}
+QMAKE_INCDIR                  =  %{toolchain_install_dir}/include %{toolchain_install_dir}/include/glib-2.0 %{toolchain_install_dir}/lib/glib-2.0/include/
+QMAKE_LIBDIR                  =  %{toolchain_install_dir}/lib
+QMAKE_LIBS                    =
+%else
+QMAKE_INCDIR                  =  $RPM_BUILD_DIR/../../rootfs/usr/include $RPM_BUILD_DIR/../../rootfs/usr/include/glib-2.0 $RPM_BUILD_DIR/../../rootfs/usr/lib/glib-2.0/include/
+QMAKE_LIBDIR                  =  $RPM_BUILD_DIR/../../rootfs/usr/lib
+QMAKE_LIBS                    =  -lglib-2.0 -lgthread-2.0 -lz -lgmodule-2.0 -lgobject-2.0 -lts -lfreetype
+%endif
+QMAKE_INCDIR_X11              =
+QMAKE_LIBDIR_X11              =
+QMAKE_LIBS_DYNLOAD            =  -ldl
+QMAKE_LIBS_X11                =
+QMAKE_LIBS_X11SM              =
+QMAKE_LIBS_NIS                =  -lnsl
+QMAKE_LIBS_THREAD             =  -lpthread
+
+
+QMAKE_MOC                     =  \$\$[QT_INSTALL_BINS]/moc
+QMAKE_UIC                     =  \$\$[QT_INSTALL_BINS]/uic
+
+QMAKE_AR                      =  arm-none-linux-gnueabi-ar cqs
+QMAKE_OBJCOPY                 =  arm-none-linux-gnueabi-objcopy
+QMAKE_RANLIB                  =  arm-none-linux-gnueabi-ranlib
+
+QMAKE_TAR                     =  tar -cf
+QMAKE_GZIP                    =  gzip -9f
+
+QMAKE_COPY                    =  cp -f
+QMAKE_COPY_FILE               =  \$(COPY)
+QMAKE_COPY_DIR                =  \$(COPY) -r
+QMAKE_MOVE                    =  mv -f
+QMAKE_DEL_FILE                =  rm -f
+QMAKE_DEL_DIR                 =  rmdir
+QMAKE_STRIP                   =  arm-none-linux-gnueabi-strip
+QMAKE_CHK_DIR_EXISTS          =  test -d
+QMAKE_MKDIR                   =  mkdir -p
+QMAKE_INSTALL_FILE            =  install -m 644 -p
+QMAKE_INSTALL_PROGRAM         =  install -m 755 -p
+
+MAKEFILE_GENERATOR            =  UNIX
+TEMPLATE                      =  app
+CONFIG                        += qt warn_on release incremental link_prl
+QT                            += core gui
+QMAKE_INCREMENTAL_STYLE       =  sublib
 
 load(qt_config)
 EOF
@@ -173,10 +160,12 @@
 
 EOF
 chmod 744 $initscript
+%patch1 -p1
+%patch2 -p1
+%patch3 -p1
 
 %Build
-
-export PATH=$UNSPOOF_PATH
+test -n "$UNSPOOF_PATH" && export PATH=$UNSPOOF_PATH
 
 # Unset compiler to prevent gcc being used when the cross
 # tools should be used. (Trolltech issue# 138807)
@@ -185,32 +174,104 @@
 # Unset PLATFORM because this is used as host machine.
 unset PLATFORM
 
-#if PKG_AMD_GPU_BIN_MX51 is already installed, uncomment the following line to add OpenGLES 2 support
-#export XTRA_OPTS="$XTRA_OPTS -opengl es2"
+./configure \
+%if %{?toolchain:1}%{!?toolchain:0}
+	--prefix=%{toolchain_install_dir} \
+%else
+	--prefix=$RPM_BUILD_DIR/../../rootfs/usr/local/Trolltech \
+	-plugin-sql-mysql \
+	-qt-mouse-tslib \
+%endif
+	-xplatform qws/linux-g++-mx \
+	-confirm-license \
+	-embedded arm \
+	-fast \
+	-fontconfig \
+	-host-little-endian \
+	-little-endian \
+	-no-3dnow \
+	-no-accessibility \
+	-no-declarative \
+	-no-javascript-jit \
+	-no-largefile \
+	-nomake demos \
+	-nomake examples \
+	-no-mmx \
+	-no-multimedia \
+	-no-phonon \
+	-no-phonon-backend \
+	-no-qt3support \
+	-no-script \
+	-no-scripttools \
+	-no-sse \
+	-no-sse2 \
+	-no-sse3 \
+	-no-ssse3 \
+	-no-stl \
+	-no-svg \
+	-no-webkit \
+	-no-xmlpatterns \
+	-opensource \
+	-plugin-sql-sqlite \
+	-qt-gfx-linuxfb \
+	-qt-gfx-transformed \
+	-qt-gfx-vnc \
+	-qt-kbd-tty \
+	-release \
+	-shared \
+	-sm \
+	-v \
+	$XTRA_OPTS
 
-#if PKG_MBX_BIN is already installed, uncomment the following line to add OpenGLES 1.1 support
-#export XTRA_OPTS="$XTRA_OPTS -opengl es1"
+make -j`grep -c ^processor /proc/cpuinfo`
 
-./configure --prefix=$RPM_BUILD_DIR/../../rootfs/usr/local/Trolltech -embedded arm -xplatform qws/linux-g++-mx -release \
-	-qt-gfx-linuxfb -qt-kbd-tty -qt-mouse-tslib -little-endian -host-little-endian -fontconfig -sm -v -opensource -confirm-license $XTRA_OPTS
+%Install
+test -n "$UNSPOOF_PATH" && export PATH=$UNSPOOF_PATH
 
-make
+%if %{?toolchain:1}%{!?toolchain:0}
 
-%Install
+make INSTALL_ROOT=%{buildroot} install
+
+%else
 
-export PATH=$UNSPOOF_PATH
-install -d $RPM_BUILD_ROOT/%{pfx}/usr/local/Trolltech
-install -d $RPM_BUILD_ROOT/%{pfx}/usr/lib
-
-cp -a demos $RPM_BUILD_ROOT/%{pfx}/usr/local/Trolltech
-cp -a examples $RPM_BUILD_ROOT/%{pfx}/usr/local/Trolltech
-cp -a lib/* $RPM_BUILD_ROOT/%{pfx}/usr/lib
+install -d $RPM_BUILD_ROOT/%{pfx}%{_prefix}/lib
+cp -a lib/* $RPM_BUILD_ROOT/%{pfx}%{_prefix}/lib
+$TOOLCHAIN_PATH/bin/${TOOLCHAIN_PREFIX}strip --strip-unneeded $RPM_BUILD_ROOT/%{pfx}%{_prefix}/lib/libQt*.so.%{version}
+test -x plugins/sqldrivers/libqsqlite.so && install -m 644 plugins/sqldrivers/libqsqlite.so $RPM_BUILD_ROOT/%{pfx}%{_prefix}/lib
+test -x plugins/sqldrivers/libqsqlmysql.so && install -m 644 plugins/sqldrivers/libqsqlmysql.so $RPM_BUILD_ROOT/%{pfx}%{_prefix}/lib
 
-export PATH=$SPOOF_PATH
+%endif
+
+%if %{?toolchain:0}%{!?toolchain:1}
+
+cd %{_builddir}/%{archivename}-%{version}
+( cd $RPM_BUILD_ROOT; find .%{pfx} \( \( -not -type d \) -o \( -type d -empty \) \) -print | sed 's/^\.//' ) > all_files.lst
+sed '
+    \,^%{pfx}%{_libdir}/pkgconfig, d;
+    \,^%{pfx}%{_libdir}/libQtTest, d;
+    \,^%{pfx}%{_libdir}/libQt3Support, d;
+    \,^%{pfx}%{_libdir}/libQtWebKit, d;
+    /\.l\?a$/ d;
+' all_files.lst > rfs_files.lst
+
+%endif
 
 %Clean
 rm -rf $RPM_BUILD_ROOT
 
+%if %{?toolchain:1}%{!?toolchain:0}
+
 %Files
 %defattr(-,root,root)
-%{pfx}/*
+%{toolchain_install_dir}/*
+
+%else
+
+%Files -f all_files.lst
+%defattr(-,root,root)
+
+
+%Files rfs -f rfs_files.lst
+%defattr(-,root,root)
+
+%endif
