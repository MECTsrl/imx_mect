<!--
* Copyright (C) 2010-2011, Freescale Semiconductor, Inc. All Rights Reserved.
* The CFG element contains a list of recognized usb devices.
*  DEV elements provide a name, class, vid and pid for each device.
*
* Each LIST element contains a list of update instructions.
*  "Install" - Erase media and install firmware.
*  "Update" - Update firmware only.
*
* Each CMD element contains one update instruction of attribute type.
*  "pull" - Does UtpRead(body, file) transaction.
*  "push" - Does UtpWrite(body, file) transaction.
*  "drop" - Does UtpCommand(body) then waits for device to disconnect.
*  "boot" - Finds configured device, forces it to "body" device and downloads "file".
*  "find" - Waits for "timeout" seconds for the "body" device to connect.
*  "show" - Parse and show device info in "file".  
-->

<UCL>
  <CFG>
    <STATE name="Recovery" dev="IMX28"/>
    <STATE name="Updater"   dev="Updater" />  
    <DEV name="IMX28" vid="15A2" pid="004F"/>
    <DEV name="Updater" vid="066F" pid="37FF" />
  </CFG>
  <LIST name="Singlechip NAND" desc="Install on singlechip NAND">
    <CMD type="boot" body="Recovery" file="updater_ivt.sb" timeout="60">Booting Update Firmware.</CMD>
    <CMD type="find" body="Updater" timeout="180"/>
    <CMD type="push" body="mknod class/mtd,mtd0,/dev/mtd0"/>
    <CMD type="push" body="mknod class/mtd,mtd1,/dev/mtd1"/>
    <CMD type="push" body="mknod class/misc,ubi_ctrl,/dev/ubi_ctrl"/>
    <!-- UBI image support
    * If the user has ubi image, he can use below command to program ubi image to certain mtd device.
    * <CMD type="push" body="pipe ubiformat /dev/mtdX -y -f - -S @FILESIZE" file="files/ubi.img">Sending and writting rootfs</CMD>
    *
    * If @FILESIZE is not supported at host tool, please replace it with real file size in byte.
    -->
    <CMD type="push" body="$ flash_eraseall /dev/mtd0">Erasing rootfs partition 0</CMD>
    <CMD type="push" body="$ flash_eraseall /dev/mtd1">Erasing rootfs partition 1</CMD>
    <CMD type="push" body="send" file="files/imx28_ivt_linux.sb" >Sending u-boot Image.</CMD>
    <CMD type="push" body="$ kobs-ng init $FILE">Flashing firmware</CMD>
    <CMD type="push" body="$ ubiattach /dev/ubi_ctrl -m 1 -d 0">Attaching UBI partition</CMD>
    <CMD type="push" body="mknod class/ubi,ubi0,/dev/ubi0"/>
    <!-- 
		create the root partition with size 64MiB
	-->
	<CMD type="push" body="$ ubimkvol /dev/ubi0 -n 0 -N rootfs0 -s 80MiB">Creating rootfs UBI volumes</CMD>
    <!-- 
		create the data partition with the remaining space
	-->
    <CMD type="push" body="$ ubimkvol /dev/ubi0 -n 1 -N local -m">Creating local UBI volumes</CMD>
    
	<CMD type="push" body="$ mkdir -p /mnt/ubi0; mount -t ubifs ubi0_0 /mnt/ubi0" />
    <CMD type="push" body="pipe tar -jxv -C /mnt/ubi0" file="files/rootfs.tar.bz2">Transfer rootfs</CMD>
	<CMD type="push" body="frf">Finish Flashing NAND</CMD>
    <CMD type="push" body="$ umount /mnt/ubi0">Unmounting rootfs</CMD>

    <CMD type="push" body="$ mkdir -p /mnt/ubi1; mount -t ubifs ubi0_1 /mnt/ubi1" />
    <CMD type="push" body="pipe tar -jxv -C /mnt/ubi1" file="files/local.tar.bz2">Transfer local</CMD>
	<CMD type="push" body="frf">Finish Flashing NAND</CMD>
    <CMD type="push" body="$ umount /mnt/ubi1">Unmounting local</CMD>

    <CMD type="push" body="$ echo Update Complete!">Done</CMD>
  </LIST>

  <LIST name="Bootstream NAND" desc="Install on singlechip NAND only bootstream">
    <CMD type="boot" body="Recovery" file="updater_ivt.sb" timeout="60">Booting Update Firmware.</CMD>
    <CMD type="find" body="Updater" timeout="180"/>
    <CMD type="push" body="mknod class/mtd,mtd0,/dev/mtd0"/>
    <CMD type="push" body="mknod class/misc,ubi_ctrl,/dev/ubi_ctrl"/>
    <CMD type="push" body="$ flash_eraseall /dev/mtd0">Erasing rootfs partition 0</CMD>
    <CMD type="push" body="send" file="files/imx28_ivt_linux.sb" >Sending u-boot Image.</CMD>
    <CMD type="push" body="$ kobs-ng init $FILE">Flashing firmware</CMD>
    <CMD type="push" body="$ echo Update Complete!">Done</CMD>
  </LIST>

  <LIST name="SD(with uboot)" desc="Install to SD card">
    <CMD type="boot" body="Recovery" file="updater_ivt.sb">Booting Update Firmware.</CMD>
    <CMD type="find" body="Updater" timeout="180"/>
    <CMD type="push" body="mknod block,mmcblk0,/dev/mmcblk0,block"/>
	 <!-- instruction to create the SD card -->
    <CMD type="push" body="send" file="fdisk-u.input">Sending fdisk input</CMD>
    <CMD type="push" body="$ fdisk -u /dev/mmcblk0 < $FILE">Partitioning SD card</CMD>
    <CMD type="push" body="mknod block/mmcblk0,mmcblk0p1,/dev/mmcblk0p1,block"/>
    <CMD type="push" body="mknod block/mmcblk0,mmcblk0p2,/dev/mmcblk0p2,block"/>
    <CMD type="push" body="mknod block/mmcblk0,mmcblk0p3,/dev/mmcblk0p3,block"/>
    <CMD type="push" body="send" file="files/uboot_ivt.sb">Sending u-boot Image.</CMD>
    <CMD type="push" body="$ sdimage -f $FILE -d /dev/mmcblk0">Writing linux image</CMD>
    <CMD type="push" body="send" file="files/uImage">Sending kernel image</CMD>
    <CMD type="push" body="$ dd if=$FILE of=/dev/mmcblk0 ibs=512 seek=256 conv=sync,notrunc">Writing kernel image</CMD>
    <CMD type="push" body="$ mkfs.ext3 -j /dev/mmcblk0p3">Formatting rootfs partition</CMD>
    <CMD type="push" body="$ mkdir -p /mnt/mmcblk0p3"/> 
    <CMD type="push" body="$ mount /dev/mmcblk0p3 /mnt/mmcblk0p3"/>
    <CMD type="push" body="pipe tar -jxv -C /mnt/mmcblk0p3" file="files/rootfs.tar.bz2">Sending and writting rootfs</CMD>
    <CMD type="push" body="frf">Finishing rootfs write</CMD>
    <CMD type="push" body="$ umount /mnt/mmcblk0p3">Unmounting rootfs partition</CMD>
    <CMD type="push" body="$ echo Update Complete!">Done</CMD>
  </LIST>

  <LIST name="SD(without uboot)" desc="Install to SD card">
    <CMD type="boot" body="Recovery" file="updater_ivt.sb" >Booting Update Firmware.</CMD>
    <CMD type="find" body="Updater" timeout="180"/>
    <CMD type="push" body="mknod block,mmcblk0,/dev/mmcblk0,block"/>
    <!-- instruction to create the SD card -->
	<CMD type="push" body="send" file="fdisk-u.input">Sending fdisk input</CMD>
    <CMD type="push" body="$ fdisk -u /dev/mmcblk0 < $FILE">Partitioning SD card</CMD>
    <CMD type="push" body="mknod block/mmcblk0,mmcblk0p1,/dev/mmcblk0p1,block"/>
    <CMD type="push" body="mknod block/mmcblk0,mmcblk0p2,/dev/mmcblk0p2,block"/>
    <CMD type="push" body="mknod block/mmcblk0,mmcblk0p3,/dev/mmcblk0p3,block"/>
    <CMD type="push" body="send" file="files/linux_ivt.sb" >Sending Linux Image.</CMD>
    <CMD type="push" body="$ sdimage -f $FILE -d /dev/mmcblk0">Writing linux image</CMD>
    <CMD type="push" body="$ mkdir -p /mnt/mmcblk0p3"/> 
    <CMD type="push" body="$ mkfs.ext3 -j /dev/mmcblk0p3">Formatting rootfs partition</CMD>
    <CMD type="push" body="$ mount /dev/mmcblk0p3 /mnt/mmcblk0p3"/>
    <CMD type="push" body="pipe tar -jxv -C /mnt/mmcblk0p3" file="files/rootfs.tar.bz2">Sending and writting rootfs</CMD>
    <CMD type="push" body="frf">Finishing rootfs write</CMD>
    <CMD type="push" body="$ umount /mnt/mmcblk0p3">Unmounting rootfs partition</CMD>
    <CMD type="push" body="$ echo Update Complete!">Done</CMD>
  </LIST>

</UCL>
