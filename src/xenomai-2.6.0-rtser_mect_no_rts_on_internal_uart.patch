--- a/ksrc/drivers/serial/rt_imx_mxs_auart.c	2016-09-23 21:31:30.590347260 +0200
+++ b/ksrc/drivers/serial/rt_imx_mxs_auart.c	2016-09-23 23:19:21.115749506 +0200
@@ -49,7 +49,7 @@
 
 #define DRIVER_NAME		"xeno_imx_mxs_auart"
 
-#define AUART_FIFO_SIZE 16
+#define AUART_FIFO_SIZE		16
 #define IN_BUFFER_SIZE		4096
 #define OUT_BUFFER_SIZE		4096
 
@@ -70,40 +70,40 @@
 	struct list_head rx_done;
 	struct list_head free;
 	struct tasklet_struct rx_task;
-	struct rtdm_device rtdm_dev;	/* RTDM device structure */
+	struct rtdm_device rtdm_dev;		/* RTDM device structure */
 };
 
 struct rt_imx_mxs_auart_ctx {
-	struct rtser_config config;	/* current device configuration */
+	struct rtser_config config;		/* current device configuration */
 
-	rtdm_irq_t irq_handle;		/* device IRQ handle */
-	rtdm_lock_t lock;		/* lock to protect context struct */
+	rtdm_irq_t irq_handle;			/* device IRQ handle */
+	rtdm_lock_t lock;			/* lock to protect context struct */
 
-	int in_head;			/* RX ring buffer, head pointer */
-	int in_tail;			/* RX ring buffer, tail pointer */
-	size_t in_npend;		/* pending bytes in RX ring */
-	int in_nwait;			/* bytes the user waits for */
-	rtdm_event_t in_event;		/* raised to unblock reader */
-	char in_buf[IN_BUFFER_SIZE];	/* RX ring buffer */
-	volatile unsigned long in_lock; /* single-reader lock */
-	uint64_t *in_history;		/* RX timestamp buffer */
-
-	int out_head;			/* TX ring buffer, head pointer */
-	int out_tail;			/* TX ring buffer, tail pointer */
-	size_t out_npend;		/* pending bytes in TX ring */
-	rtdm_event_t out_event;		/* raised to unblock writer */
-	char out_buf[OUT_BUFFER_SIZE];	/* TX ring buffer */
-	rtdm_mutex_t out_lock;		/* single-writer mutex */
-
-	uint64_t last_timestamp;	/* timestamp of last event */
-	int ioc_events;			/* recorded events */
-	rtdm_event_t ioc_event;		/* raised to unblock event waiter */
+	int in_head;				/* RX ring buffer, head pointer */
+	int in_tail;				/* RX ring buffer, tail pointer */
+	size_t in_npend;			/* pending bytes in RX ring */
+	int in_nwait;				/* bytes the user waits for */
+	rtdm_event_t in_event;			/* raised to unblock reader */
+	char in_buf[IN_BUFFER_SIZE];		/* RX ring buffer */
+	volatile unsigned long in_lock; 	/* single-reader lock */
+	uint64_t *in_history;			/* RX timestamp buffer */
+
+	int out_head;				/* TX ring buffer, head pointer */
+	int out_tail;				/* TX ring buffer, tail pointer */
+	size_t out_npend;			/* pending bytes in TX ring */
+	rtdm_event_t out_event;			/* raised to unblock writer */
+	char out_buf[OUT_BUFFER_SIZE];		/* TX ring buffer */
+	rtdm_mutex_t out_lock;			/* single-writer mutex */
+
+	uint64_t last_timestamp;		/* timestamp of last event */
+	int ioc_events;				/* recorded events */
+	rtdm_event_t ioc_event;			/* raised to unblock event waiter */
 	volatile unsigned long ioc_event_lock;	/* single-waiter lock */
 
-	int ier_status;			/* IER cache */
-	int mcr_status;			/* MCR cache */
-	int status;			/* cache for LSR + soft-states */
-	int saved_errors;		/* error cache for RTIOC_GET_STATUS */
+	int ier_status;				/* IER cache */
+	int mcr_status;				/* MCR cache */
+	int status;				/* cache for LSR + soft-states */
+	int saved_errors;			/* error cache for RTIOC_GET_STATUS */
 
 	/*
 	 * The port structure holds all the information about the UART
@@ -111,18 +111,20 @@
 	 */
 	struct rt_imx_mxs_auart_port *port;
 
-	/* TODO: Place holder pending the porting of Xenomai RS485 flag. */
-	int rs485;
+	/* Flags for driver-side handling the RTS line in RS485 mode. */
+#define RS485_RTS_RQ_MASK	0x0001		/* The driver operates in RS485 mode. */
+#define RS485_RTS_AL_MASK	0x0002		/* The alarm for RTS timing exists. */
+	uint32_t rs485;				/* Flags for RS485 mode */
 
-	RTIME char_time_ns; /* one character time in ns on wire */
-	RT_ALARM rts_deassert;
+	RTIME char_time_ns; 			/* one character time in ns on wire */
+	RT_ALARM rts_deassert;			/* Xenomai alarm to time RTS deassert */
 };
 
-#define PARITY_MASK             0x03
-#define DATA_BITS_MASK          0x03
-#define STOP_BITS_MASK          0x01
-#define FIFO_MASK               0xC0
-#define EVENT_MASK              0x0F
+#define PARITY_MASK		0x03
+#define DATA_BITS_MASK		0x03
+#define STOP_BITS_MASK		0x01
+#define FIFO_MASK		0xC0
+#define EVENT_MASK		0x0F
 
 static const struct rtser_config default_config = {
 	.config_mask = 0xFFFF,
@@ -148,16 +150,16 @@
 {
 	struct rt_imx_mxs_auart_ctx *ctx = (struct rt_imx_mxs_auart_ctx *)data;
 
-    //rtdm_printk("%s(%d): rts_deassert_func\n", DRIVER_NAME, ctx->port->port.line);
-    if (!(__raw_readl(ctx->port->port.membase + HW_UARTAPP_STAT) & BM_UARTAPP_STAT_BUSY)) {
+	//rtdm_printk("%s(%d): rts_deassert_func\n", DRIVER_NAME, ctx->port->port.line);
+	if (!(__raw_readl(ctx->port->port.membase + HW_UARTAPP_STAT) & BM_UARTAPP_STAT_BUSY)) {
 		rt_alarm_stop(&ctx->rts_deassert);
 
 		/* TX completed. Deassert RTS and enable RX. */
 		__raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
 		__raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
 
-        rtdm_event_signal(&ctx->out_event);
-    }
+		rtdm_event_signal(&ctx->out_event);
+	}
 }
 
 static inline struct rt_imx_mxs_auart_port *
@@ -171,47 +173,52 @@
 {
 	struct rt_imx_mxs_auart_port *port = ctx->port;
 	int count;
-    int ch;
+	int ch;
 
-    if (!testbits(ctx->ier_status, IER_TX))
-        return; // spurious interrupt
+	if (!testbits(ctx->ier_status, IER_TX))
+		return;		// spurious interrupt
 
 	/* Transfer pending bytes to TX FIFO. */
-    count = 0;
-    while (!(__raw_readl(port->port.membase + HW_UARTAPP_STAT) & BM_UARTAPP_STAT_TXFF)) {
-        if (ctx->out_npend == 0)
-            break;
+	count = 0;
+	while (!(__raw_readl(port->port.membase + HW_UARTAPP_STAT) & BM_UARTAPP_STAT_TXFF)) {
+		if (ctx->out_npend == 0)
+			break;
 
 		ch = ctx->out_buf[ctx->out_head++];
 		__raw_writel(ch, port->port.membase + HW_UARTAPP_DATA);
 
 		ctx->out_head &= (OUT_BUFFER_SIZE - 1);
-        ++count;
-        --ctx->out_npend;
+		++count;
+		--ctx->out_npend;
 	}
 
-    if (ctx->out_npend > 0) {
+	if (ctx->out_npend > 0) {
 		__raw_writel(BM_UARTAPP_INTR_TXIEN, port->port.membase + HW_UARTAPP_INTR_SET);
 	} else {
 		__raw_writel(BM_UARTAPP_INTR_TXIEN, port->port.membase + HW_UARTAPP_INTR_CLR);
-        ctx->ier_status &= ~IER_TX;
-        if (ctx->rs485) {
-			/* Deassert RTS at most one frame after the TX FIFO and SR are flushed. */
-            RTIME value = count * ctx->char_time_ns;
-            // RTIME interval = TM_INFINITE; /* the alarm will not be reloaded after it has expired */
-            RTIME interval = ctx->char_time_ns;
-            if (value < 50000)
-                value = 50000; // limit for i.MX28
-
-            if (interval < 50000)
-                interval = 50000; // limit for i.MX28
-
-            rt_alarm_start(&ctx->rts_deassert, value, interval);
-            //rtdm_printk("%s(%d): start in %llu at %llu\n", DRIVER_NAME, ctx->port->port.line, value, interval);
-        } else {
-            rtdm_event_signal(&ctx->out_event);
-        }
-    }
+		ctx->ier_status &= ~IER_TX;
+		if (ctx->rs485 & RS485_RTS_RQ_MASK) {
+			if (ctx->rs485 & RS485_RTS_AL_MASK) {
+				/* Deassert RTS at most one frame after the TX FIFO and SR are flushed. */
+				RTIME value = count * ctx->char_time_ns;
+				// RTIME interval = TM_INFINITE; /* the alarm will not be reloaded after it has expired */
+				RTIME interval = ctx->char_time_ns;
+				if (value < 50000)
+					value = 50000; // i.MX28 limit
+
+				if (interval < 50000)
+					interval = 50000; // i.MX28 limit
+
+				rt_alarm_start(&ctx->rts_deassert, value, interval);
+				//rtdm_printk("%s(%d): start in %llu at %llu\n", DRIVER_NAME, ctx->port->port.line, value, interval);
+			} else {
+				rtdm_printk("%s(%d): alarm for RTS line timing not defined.\n", DRIVER_NAME, ctx->port->port.line);
+				rtdm_event_signal(&ctx->out_event);
+			}
+		} else {
+			rtdm_event_signal(&ctx->out_event);
+		}
+	}
 }
 
 static int
@@ -222,64 +229,69 @@
 	int rbytes = 0;
 	int lsr = 0;
 
-    /* we are here if RX data ready or RX timeout or RX errors
-     * i.e. (BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS  | BM_UARTAPP_INTR_FEIS
-     *     | BM_UARTAPP_INTR_RXISk | BM_UARTAPP_INTR_RTIS)
-     */
-    do {
-        register u32 data;
-        register int n;
-        register int invalid_chars;
-
-        data = __raw_readl(port->port.membase + HW_UARTAPP_DATA);
-        stat = __raw_readl(port->port.membase + HW_UARTAPP_STAT);
-
-        /* flags management, relative to the previous read HW_UARTAPP_DATA */
-        if (stat & BM_UARTAPP_STAT_BERR) {
-            /* NOTE Here we ignore break requests. */
-            stat &= ~BM_UARTAPP_STAT_BERR;
+	/* we are here if RX data ready or RX timeout or RX errors
+	 * i.e. (BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS | BM_UARTAPP_INTR_FEIS
+	 *     | BM_UARTAPP_INTR_RXISk | BM_UARTAPP_INTR_RTIS)
+	 */
+	do {
+		register u32 data;
+		register int n;
+		register int invalid_chars;
+
+		data = __raw_readl(port->port.membase + HW_UARTAPP_DATA);
+		stat = __raw_readl(port->port.membase + HW_UARTAPP_STAT);
+
+		/* flags management, relative to the previous read HW_UARTAPP_DATA */
+		if (stat & BM_UARTAPP_STAT_BERR) {
+			/* NOTE Here we ignore break requests. */
+			stat &= ~BM_UARTAPP_STAT_BERR;
 			ctx->port->port.icount.brk++;
 			lsr |= RTSER_LSR_BREAK_IND;
 		}
+
 		if (stat & BM_UARTAPP_STAT_PERR) {
-            stat &= ~BM_UARTAPP_STAT_PERR;
+			stat &= ~BM_UARTAPP_STAT_PERR;
 			port->port.icount.parity++;
 			lsr |= RTSER_LSR_PARITY_ERR;
-        }
-        if (stat & BM_UARTAPP_STAT_FERR) {
+		}
+
+		if (stat & BM_UARTAPP_STAT_FERR) {
 			stat &= ~BM_UARTAPP_STAT_FERR;
 			port->port.icount.frame++;
 			lsr |= RTSER_LSR_FRAMING_ERR;
-        }
+		}
+
 		if (stat & BM_UARTAPP_STAT_OERR) {
-            /* any write to the status register will clear this */
-            port->port.icount.overrun++;
+			/* any write to the status register will clear this */
+			port->port.icount.overrun++;
 			lsr |= RTSER_LSR_OVERRUN_ERR;
-        }
-        __raw_writel(stat, port->port.membase + HW_UARTAPP_STAT);
+		}
+
+		__raw_writel(stat, port->port.membase + HW_UARTAPP_STAT);
+
+		/* save the valid received characters */
+		invalid_chars = (stat & BM_UARTAPP_STAT_RXBYTE_INVALID) >> BP_UARTAPP_STAT_RXBYTE_INVALID;
+		for (n = 0; n < 1; ++n) { // NB: the other three characters can only be used when DMA is on
+			if (!(invalid_chars & (1 << n))) {
+				register u8 c = (data >> (n * 8)) & 0x000000FF;
+
+				ctx->in_buf[ctx->in_tail] = c;
+
+				if (ctx->in_history)
+					ctx->in_history[ctx->in_tail] = *timestamp;
+
+				ctx->in_tail = (ctx->in_tail + 1) & (IN_BUFFER_SIZE - 1);
 
-        /* save the valid received characters */
-        invalid_chars = (stat & BM_UARTAPP_STAT_RXBYTE_INVALID) >> BP_UARTAPP_STAT_RXBYTE_INVALID;
-        for (n = 0; n < 1; ++n) { // NB: the other three characters can only be used when DMA is on
-            if (!(invalid_chars & (1 << n))) {
-                register u8 c = (data >> (n * 8)) & 0x000000FF;
-
-                ctx->in_buf[ctx->in_tail] = c;
-
-                if (ctx->in_history)
-                    ctx->in_history[ctx->in_tail] = *timestamp;
-
-                ctx->in_tail = (ctx->in_tail + 1) & (IN_BUFFER_SIZE - 1);
-
-                if (++ctx->in_npend > IN_BUFFER_SIZE) {
-                    ctx->in_npend--;
-
-                    lsr |= RTSER_SOFT_OVERRUN_ERR;
-                }
-                ++rbytes;
-            }
-        }
-    } while (!((stat & BM_UARTAPP_STAT_RXFE) || (rbytes > AUART_FIFO_SIZE)));
+				if (++ctx->in_npend > IN_BUFFER_SIZE) {
+					ctx->in_npend--;
+
+					lsr |= RTSER_SOFT_OVERRUN_ERR;
+				}
+
+				++rbytes;
+			}
+		}
+	} while (!((stat & BM_UARTAPP_STAT_RXFE) || (rbytes > AUART_FIFO_SIZE)));
 
 	/* Save new errors */
 	ctx->status |= lsr;
@@ -307,9 +319,9 @@
 			ctrl2 |= BM_UARTAPP_CTRL2_CTSEN /* | BM_UARTAPP_CTRL2_RTSEN */;
 		else
 			ctrl2 &= ~BM_UARTAPP_CTRL2_CTSEN /* & ~BM_UARTAPP_CTRL2_RTSEN */;
-	}
-	else
+	} else {
 		ctrl2 &= ~BM_UARTAPP_CTRL2_CTSEN /* & ~BM_UARTAPP_CTRL2_RTSEN */;
+	}
 
 	/* Set loopback. */
 	if (mcr & RTSER_MCR_LOOP)
@@ -330,15 +342,16 @@
 	ctx = (struct rt_imx_mxs_auart_ctx *)context->dev_private;
 
 	switch (request) {
-		case RTSER_RTIOC_GET_CONFIG:
-			if (user_info)
-				err = rtdm_safe_copy_to_user(user_info, arg, &ctx->config, sizeof(struct rtser_config));
-			else
-				memcpy(arg, &ctx->config, sizeof(struct rtser_config));
+	case RTSER_RTIOC_GET_CONFIG:
+		if (user_info)
+			err = rtdm_safe_copy_to_user(user_info, arg, &ctx->config, sizeof(struct rtser_config));
+		else
+			memcpy(arg, &ctx->config, sizeof(struct rtser_config));
 
-			break;
+		break;
 
-		case RTSER_RTIOC_SET_CONFIG: {
+	case RTSER_RTIOC_SET_CONFIG:
+		{
 			struct rtser_config *config;
 			struct rtser_config config_buf;
 			uint64_t *hist_buf = NULL;
@@ -347,34 +360,35 @@
 
 			if (user_info) {
 				err = rtdm_safe_copy_from_user(user_info, &config_buf, arg, sizeof(struct rtser_config));
-				if (err)
-					return err;
+			if (err)
+				return err;
 
-				config = &config_buf;
-			}
+			config = &config_buf;
+		}
 
-			/* Invalid baudrate? */
-			if (testbits(config->config_mask, RTSER_SET_BAUD) && (config->baud_rate > clk_get_rate(ctx->port->clk) / 16 || config->baud_rate <= 0))
-				return -EINVAL;
-
-			if (testbits(config->config_mask, RTSER_SET_TIMESTAMP_HISTORY)) {
-				/* Reject in RT context since we allocate/free the buffer. */
-				if (rtdm_in_rt_context())
-					return -ENOSYS;
+		/* Invalid baudrate? */
+		if (testbits(config->config_mask, RTSER_SET_BAUD) && (config->baud_rate > clk_get_rate(ctx->port->clk) / 16 || config->baud_rate <= 0))
+			return -EINVAL;
+
+		if (testbits(config->config_mask, RTSER_SET_TIMESTAMP_HISTORY)) {
+			/* Reject in RT context since we allocate/free the buffer. */
+			if (rtdm_in_rt_context())
+				return -ENOSYS;
 
-				if (testbits(config->timestamp_history, RTSER_RX_TIMESTAMP_HISTORY))
-					hist_buf = kmalloc(IN_BUFFER_SIZE * sizeof(nanosecs_abs_t), GFP_KERNEL);
-			}
+			if (testbits(config->timestamp_history, RTSER_RX_TIMESTAMP_HISTORY))
+				hist_buf = kmalloc(IN_BUFFER_SIZE * sizeof(nanosecs_abs_t), GFP_KERNEL);
+		}
 
-			rt_imx_mxs_auart_set_config(ctx, config, &hist_buf);
+		rt_imx_mxs_auart_set_config(ctx, config, &hist_buf);
 
-			if (hist_buf)
-				kfree(hist_buf);
+		if (hist_buf)
+			kfree(hist_buf);
 
-			break;
-		}
+		break;
+	}
 
-		case RTSER_RTIOC_GET_STATUS: {
+	case RTSER_RTIOC_GET_STATUS:
+		{
 			int status;
 			int msr;
 
@@ -395,8 +409,7 @@
 				status_buf.line_status = status;
 				status_buf.modem_status = msr;
 				err = rtdm_safe_copy_to_user(user_info, arg, &status_buf, sizeof(struct rtser_status));
-			}
-			else {
+			} else {
 				((struct rtser_status *)arg)->line_status = 0;
 				((struct rtser_status *)arg)->modem_status = msr;
 			}
@@ -404,28 +417,29 @@
 			break;
 		}
 
-		case RTSER_RTIOC_GET_CONTROL:
-			if (user_info)
-				err = rtdm_safe_copy_to_user(user_info, arg, &ctx->mcr_status, sizeof(int));
-			else
-				*(int *)arg = ctx->mcr_status;
+	case RTSER_RTIOC_GET_CONTROL:
+		if (user_info)
+			err = rtdm_safe_copy_to_user(user_info, arg, &ctx->mcr_status, sizeof(int));
+		else
+			*(int *)arg = ctx->mcr_status;
 
-			break;
+		break;
 
-		case RTSER_RTIOC_SET_CONTROL: {
-			int new_mcr = (long)arg;
+	case RTSER_RTIOC_SET_CONTROL: {
+		int new_mcr = (long)arg;
 
-			rtdm_lock_get_irqsave(&ctx->lock, lock_ctx);
+		rtdm_lock_get_irqsave(&ctx->lock, lock_ctx);
 
-			ctx->mcr_status = new_mcr;
-			rt_imx_mxs_auart_set_mcr(ctx, new_mcr);
+		ctx->mcr_status = new_mcr;
+		rt_imx_mxs_auart_set_mcr(ctx, new_mcr);
 
-			rtdm_lock_put_irqrestore(&ctx->lock, lock_ctx);
+		rtdm_lock_put_irqrestore(&ctx->lock, lock_ctx);
 
-			break;
-		}
+		break;
+	}
 
-		case RTSER_RTIOC_WAIT_EVENT: {
+	case RTSER_RTIOC_WAIT_EVENT:
+		{
 			struct rtser_event ev = {
 				.rxpend_timestamp = 0
 			};
@@ -484,7 +498,8 @@
 			break;
 		}
 
-		case RTSER_RTIOC_BREAK_CTL: {
+	case RTSER_RTIOC_BREAK_CTL:
+		{
 			rtdm_lock_get_irqsave(&ctx->lock, lock_ctx);
 
 			rt_imx_mxs_auart_break_ctl(ctx, (int)arg);
@@ -494,8 +509,8 @@
 			break;
 		}
 
-		default:
-			err = -ENOTTY;
+	default:
+		err = -ENOTTY;
 	}
 
 	return err;
@@ -504,10 +519,21 @@
 static void
 rt_imx_mxs_auart_start_tx(struct rt_imx_mxs_auart_ctx *ctx)
 {
-    ctx->ier_status |= IER_TX;
+	ctx->ier_status |= IER_TX;
+
+	/* The driver should handle the RTS line. */
+	if (ctx->rs485 & RS485_RTS_RQ_MASK) {
+		/* No alarm set for RTS line timing. */
+		if (!(ctx->rs485 & RS485_RTS_AL_MASK)) {
+			char name[42];
+
+			sprintf(name, "rts_deassert_%d", ctx->port->port.line);
+			rt_alarm_create(&ctx->rts_deassert, name, rts_deassert_func, (void *)ctx);
+
+			ctx->rs485 |= RS485_RTS_AL_MASK;
+		}
 
-	if (ctx->rs485) {
-		/* Disable RX and assert RTS to start the TX. */
+		/* Disable RX and assert RTS to start TX. */
 		__raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_CLR);
 		__raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_CLR);
 	}
@@ -515,101 +541,96 @@
 	/* Enable TX interrupts. */
 	__raw_writel(BM_UARTAPP_INTR_TXIEN, ctx->port->port.membase + HW_UARTAPP_INTR_SET);
 
-    rt_imx_mxs_auart_tx_chars(ctx); /* this call from the syscall */
+	rt_imx_mxs_auart_tx_chars(ctx); /* this call from the syscall */
 }
 
 static int
 rt_imx_mxs_auart_irq_handle(rtdm_irq_t *irq_context)
 {
-    int retval = RTDM_IRQ_NONE;
-    uint64_t timestamp = rtdm_clock_read();
-    struct rt_imx_mxs_auart_ctx *ctx;
-    int rbytes = 0;
-    int events = 0;
-    u32 istat;
-    struct rt_imx_mxs_auart_port *port;
-
-    ctx = rtdm_irq_get_arg(irq_context, struct rt_imx_mxs_auart_ctx);
-    port = ctx->port;
-
-    rtdm_lock_get(&ctx->lock);
-
-    istat = __raw_readl(port->port.membase + HW_UARTAPP_INTR);
-
-    /* RX data ready or RX timeout or other RX errors
-     * NB: RTIS helps in getting here as soon as the data ended and the FIFO was not yet full
-     */
-    if (istat & (BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS | BM_UARTAPP_INTR_FEIS
-                 | BM_UARTAPP_INTR_RXIS | BM_UARTAPP_INTR_RTIS)) {
-        __raw_writel((BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS | BM_UARTAPP_INTR_FEIS
-                      | BM_UARTAPP_INTR_RTIS | BM_UARTAPP_INTR_RXIS), port->port.membase + HW_UARTAPP_INTR_CLR);
-        rbytes += rt_imx_mxs_auart_rx_chars(ctx, &timestamp);
-        events |= RTSER_EVENT_RXPEND;
-        retval = RTDM_IRQ_HANDLED;
-    }
-
-    /* TX ready */
-    if (istat & BM_UARTAPP_INTR_TXIS) {
-        __raw_writel(BM_UARTAPP_INTR_TXIS, port->port.membase + HW_UARTAPP_INTR_CLR);
-        rt_imx_mxs_auart_tx_chars(ctx); /* this call from the irq handler */
-        retval = RTDM_IRQ_HANDLED;
-    }
-
-    /* Modem CTS */
-    if (istat & BM_UARTAPP_INTR_CTSMIS) {
-        __raw_writel(BM_UARTAPP_INTR_CTSMIS, port->port.membase + HW_UARTAPP_INTR_CLR);
-        retval = RTDM_IRQ_HANDLED;
-    }
-
-    if (ctx->in_nwait > 0) {
-        if ((ctx->in_nwait <= rbytes) || ctx->status) {
-            ctx->in_nwait = 0;
-
-            rtdm_event_signal(&ctx->in_event);
-        }
-        else {
-            ctx->in_nwait -= rbytes;
-        }
-    }
-
-    if (ctx->status)
-        events |= RTSER_EVENT_ERRPEND;
-
-    if (testbits(events, ctx->config.event_mask)) {
-        int old_events = ctx->ioc_events;
-
-        ctx->last_timestamp = timestamp;
-        ctx->ioc_events = events;
-
-        if (!old_events)
-            rtdm_event_signal(&ctx->ioc_event);
-    }
-
-    rtdm_lock_put(&ctx->lock);
-
-    /* Modem status interrupt bits are undefined after reset and DSRMIS, DCDMIS and RIMIS are not supported.
-     * So, we ignore them.
-     */
-    if (istat & (BM_UARTAPP_INTR_DSRMIS | BM_UARTAPP_INTR_DCDMIS | BM_UARTAPP_INTR_RIMIS)) {
-        __raw_writel((BM_UARTAPP_INTR_DSRMIS | BM_UARTAPP_INTR_DCDMIS | BM_UARTAPP_INTR_RIMIS),
-                     port->port.membase + HW_UARTAPP_INTR_CLR);
-        /* i.MX28 always sets these bits up the first time, so print nothing */
-    }
-    if (istat & (BM_UARTAPP_INTR_ABDIS)) {
-        __raw_writel(BM_UARTAPP_INTR_ABDIS, port->port.membase + HW_UARTAPP_INTR_CLR);
-        rtdm_printk("%s(%d): unhandled status 0x%08x\n", DRIVER_NAME, ctx->port->port.line, istat);
-    }
-
-    /* Diagnostic output (out of rtdm_lock) */
-    if (istat & (BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS | BM_UARTAPP_INTR_FEIS)) {
-        rtdm_printk("%s(%d): error(s):%s%s%s%s\n", DRIVER_NAME, ctx->port->port.line,
-               (istat & BM_UARTAPP_INTR_OEIS) ? " OEIS" : "",
-               (istat & BM_UARTAPP_INTR_BEIS) ? " BEIS" : "",
-               (istat & BM_UARTAPP_INTR_PEIS) ? " PEIS" : "",
-               (istat & BM_UARTAPP_INTR_FEIS) ? " FEIS" : "");
-    }
+	int retval = RTDM_IRQ_NONE;
+	uint64_t timestamp = rtdm_clock_read();
+	struct rt_imx_mxs_auart_ctx *ctx;
+	int rbytes = 0;
+	int events = 0;
+	u32 istat;
+	struct rt_imx_mxs_auart_port *port;
+
+	ctx = rtdm_irq_get_arg(irq_context, struct rt_imx_mxs_auart_ctx);
+	port = ctx->port;
+
+	rtdm_lock_get(&ctx->lock);
 
-    return retval;
+	istat = __raw_readl(port->port.membase + HW_UARTAPP_INTR);
+
+	/* RX data ready or RX timeout or other RX errors
+	 * NB: RTIS helps in getting here as soon as the data ended and the FIFO was not yet full
+	 */
+	if (istat & (BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS | BM_UARTAPP_INTR_FEIS | BM_UARTAPP_INTR_RXIS | BM_UARTAPP_INTR_RTIS)) {
+		__raw_writel((BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS | BM_UARTAPP_INTR_FEIS | BM_UARTAPP_INTR_RTIS | BM_UARTAPP_INTR_RXIS), port->port.membase + HW_UARTAPP_INTR_CLR);
+		rbytes += rt_imx_mxs_auart_rx_chars(ctx, &timestamp);
+		events |= RTSER_EVENT_RXPEND;
+		retval = RTDM_IRQ_HANDLED;
+	}
+
+	/* TX ready */
+	if (istat & BM_UARTAPP_INTR_TXIS) {
+		__raw_writel(BM_UARTAPP_INTR_TXIS, port->port.membase + HW_UARTAPP_INTR_CLR);
+		rt_imx_mxs_auart_tx_chars(ctx); /* this call from the irq handler */
+		retval = RTDM_IRQ_HANDLED;
+	}
+
+	/* Modem CTS */
+	if (istat & BM_UARTAPP_INTR_CTSMIS) {
+		__raw_writel(BM_UARTAPP_INTR_CTSMIS, port->port.membase + HW_UARTAPP_INTR_CLR);
+		retval = RTDM_IRQ_HANDLED;
+	}
+
+	if (ctx->in_nwait > 0) {
+		if ((ctx->in_nwait <= rbytes) || ctx->status) {
+			ctx->in_nwait = 0;
+
+			rtdm_event_signal(&ctx->in_event);
+		} else {
+			ctx->in_nwait -= rbytes;
+		}
+	}
+
+	if (ctx->status)
+		events |= RTSER_EVENT_ERRPEND;
+
+	if (testbits(events, ctx->config.event_mask)) {
+		int old_events = ctx->ioc_events;
+
+		ctx->last_timestamp = timestamp;
+		ctx->ioc_events = events;
+
+		if (!old_events)
+			rtdm_event_signal(&ctx->ioc_event);
+	}
+
+	rtdm_lock_put(&ctx->lock);
+
+	/* Modem status interrupt bits are undefined after reset and DSRMIS, DCDMIS and RIMIS are not supported.
+	 * So, we ignore them.
+	 */
+	if (istat & (BM_UARTAPP_INTR_DSRMIS | BM_UARTAPP_INTR_DCDMIS | BM_UARTAPP_INTR_RIMIS))
+		/* i.MX28 always sets these bits up the first time, so print nothing */
+		__raw_writel((BM_UARTAPP_INTR_DSRMIS | BM_UARTAPP_INTR_DCDMIS | BM_UARTAPP_INTR_RIMIS), port->port.membase + HW_UARTAPP_INTR_CLR);
+
+	if (istat & (BM_UARTAPP_INTR_ABDIS)) {
+		__raw_writel(BM_UARTAPP_INTR_ABDIS, port->port.membase + HW_UARTAPP_INTR_CLR);
+		rtdm_printk("%s(%d): unhandled status 0x%08x\n", DRIVER_NAME, ctx->port->port.line, istat);
+	}
+
+	/* Diagnostic output (out of rtdm_lock) */
+	if (istat & (BM_UARTAPP_INTR_OEIS | BM_UARTAPP_INTR_BEIS | BM_UARTAPP_INTR_PEIS | BM_UARTAPP_INTR_FEIS))
+		rtdm_printk("%s(%d): error(s):%s%s%s%s\n", DRIVER_NAME, ctx->port->port.line,
+			   (istat & BM_UARTAPP_INTR_OEIS) ? " OEIS" : "",
+			   (istat & BM_UARTAPP_INTR_BEIS) ? " BEIS" : "",
+			   (istat & BM_UARTAPP_INTR_PEIS) ? " PEIS" : "",
+			   (istat & BM_UARTAPP_INTR_FEIS) ? " FEIS" : "");
+
+	return retval;
 }
 
 static inline void
@@ -620,7 +641,7 @@
 	/* Deassert soft reset request. */
 	__raw_writel(BM_UARTAPP_CTRL0_SFTRST, u->membase + HW_UARTAPP_CTRL0_CLR);
 
-	/* Wait at least a microsecond for SFTRST to deassert. */
+	/* Wait at least one microsecond for SFTRST to deassert. */
 	for (i = 0; (__raw_readl(u->membase + HW_UARTAPP_CTRL0) & BM_UARTAPP_CTRL0_SFTRST) && (i < 10000); i++)
 		udelay(1);
 
@@ -645,7 +666,7 @@
 	/* Remove the soft reset request. */
 	__raw_writel(BM_UARTAPP_CTRL0_SFTRST, u->membase + HW_UARTAPP_CTRL0_CLR);
 
-	/* Wait at least a microsecond for soft reset request to deassert. */
+	/* Wait at least one microsecond for soft reset request to deassert. */
 	for (i = 0; (__raw_readl(u->membase + HW_UARTAPP_CTRL0) & BM_UARTAPP_CTRL0_SFTRST) && (i < 10000); i++)
 		udelay(1);
 
@@ -696,7 +717,7 @@
 	if (testbits(config->config_mask, RTSER_SET_STOP_BITS))
 		ctx->config.stop_bits = config->stop_bits & STOP_BITS_MASK;
 
-	/* Timeout manipulation is not atomic.  The user should
+	/* Timeout manipulation is not atomic.	The user should
 	   not use and change the timeouts at the same time. */
 	if (testbits(config->config_mask, RTSER_SET_TIMEOUT_RX))
 		ctx->config.rx_timeout = config->rx_timeout;
@@ -716,8 +737,7 @@
 				if (!ctx->in_history)
 					err = -ENOMEM;
 			}
-		}
-		else {
+		} else {
 			*in_history_ptr = ctx->in_history;
 			ctx->in_history = NULL;
 		}
@@ -737,19 +757,19 @@
 	if (testbits(config->config_mask, RTSER_SET_HANDSHAKE))
 		ctx->config.handshake = config->handshake;
 
-    if (testbits(config->config_mask, RTSER_SET_MECT_RTS_MASK)) {
-        /* MECT RS485 half-duplex: RTS set / clear with automatic stop / start of the receiver channel */
+	if (testbits(config->config_mask, RTSER_SET_MECT_RTS_MASK)) {
+		/* MECT RS485 half-duplex: RTS set / clear with automatic stop / start of the receiver channel */
 		ctx->config.mect_rts = config->mect_rts;
-        if (ctx->config.mect_rts == RTSER_MECT_RTS_SET) {
-            // enable RTS and then the receive channel since we are going to receive
-            __raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
-            __raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
-        } else if (ctx->config.mect_rts == RTSER_MECT_RTS_CLR) {
-            // disable the receive channel and then RTS since we are going to transmit
-            __raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_CLR);
-            __raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_CLR);
-        }
-    }
+		if (ctx->config.mect_rts == RTSER_MECT_RTS_SET) {
+			// enable RTS and then the receive channel since we are going to receive
+			__raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
+			__raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
+		} else if (ctx->config.mect_rts == RTSER_MECT_RTS_CLR) {
+			// disable the receive channel and then RTS since we are going to transmit
+			__raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_CLR);
+			__raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_CLR);
+		}
+	}
 
 	/*
 	 * Configure the hardware.
@@ -759,17 +779,17 @@
 					   | RTSER_SET_STOP_BITS
 					   | RTSER_SET_PARITY
 					   | RTSER_SET_BAUD
-                       | RTSER_SET_EVENT_MASK))) {
-        u32 ctrl;
+					   | RTSER_SET_EVENT_MASK))) {
+		u32 ctrl;
 		u32 ctrl2;
-        u32 div;
-        u32 ctrl0;
-        u32 to_bits;
+		u32 div;
+		u32 ctrl0;
+		u32 to_bits;
 
 		/* Get HW configuration. */
-        ctrl = __raw_readl(ctx->port->port.membase + HW_UARTAPP_LINECTRL);
-        ctrl2 = __raw_readl(ctx->port->port.membase + HW_UARTAPP_CTRL2);
-        ctrl0 = __raw_readl(ctx->port->port.membase + HW_UARTAPP_CTRL0);
+		ctrl = __raw_readl(ctx->port->port.membase + HW_UARTAPP_LINECTRL);
+		ctrl2 = __raw_readl(ctx->port->port.membase + HW_UARTAPP_CTRL2);
+		ctrl0 = __raw_readl(ctx->port->port.membase + HW_UARTAPP_CTRL0);
 
 		/* Enable FIFO. */
 		ctrl |= BM_UARTAPP_LINECTRL_FEN;
@@ -814,73 +834,80 @@
 			if (((div + 1) * ctx->config.baud_rate - uc) < (uc - div * ctx->config.baud_rate))
 				div++;
 		}
-#define HACK
-#ifdef HACK
-        if (ctx->config.baud_rate == 225000 && ctx->port->port.line == 3) {
-            ctx->rs485 = 0;
-            rtdm_printk("%s(%d): full-duplex enabled\n", DRIVER_NAME, ctx->port->port.line);
-        }
-#endif
-
-        ctrl &= ~BF_UARTAPP_LINECTRL_BAUD_DIVFRAC(0xffffffff);
-        ctrl |= BF_UARTAPP_LINECTRL_BAUD_DIVFRAC(div);
-
-        ctrl &= ~BF_UARTAPP_LINECTRL_BAUD_DIVINT(0xffffffff);
-        ctrl |= BF_UARTAPP_LINECTRL_BAUD_DIVINT(div >> 6);
-
-        {
-            /* computing variables at the given serial config */
-            register u32 bit_time_ns = 1000000000 / ctx->config.baud_rate;
-            register u32 char_bits = 1;
-            if (ctx->config.data_bits == RTSER_8_BITS)
-                char_bits += 8;
-            else
-                char_bits += 7;
-            if ((ctx->config.parity == RTSER_ODD_PARITY) || (ctx->config.parity == RTSER_EVEN_PARITY))
-                char_bits += 1;
-            if (ctx->config.stop_bits == RTSER_2_STOPB)
-                char_bits += 2;
-            else
-                char_bits += 1;
-            ctx->char_time_ns = char_bits * bit_time_ns;
-            //rtdm_printk("%s(%d): char_time_ns=%llu\n", DRIVER_NAME, ctx->port->port.line, ctx->char_time_ns);
-
-            /* the Modbus RTU reception requires an inter-character timeout:
-             * -- for baudrates <= 19200 the timeout is 1.5 chars = 1.5 * (1 + data_bits + parity + stop_bits)
-             * -- for higher baudrates the timeout is fixed to 0.750 s
-             */
-            if (ctx->config.baud_rate <= 19200) {
-                to_bits = 15 * char_bits / 10;
-            } else {
-                u32 timeout_ns = 750000; // 0.750 ms
-                to_bits = timeout_ns / bit_time_ns;
-            }
-        }
-        /* the i.MX28 rx timeout is in "8 bit-times" and there is a "7 bit" base ("1" --> 15 bit times) */
-        if (to_bits >= 7) {
-            to_bits = to_bits - 7;
-        } else {
-            to_bits = 0;
-        }
-        to_bits = to_bits / 8;
 
-        ctrl0 &= ~BF_UARTAPP_CTRL0_RXTIMEOUT(0x7ff);
-        ctrl0 |= BF_UARTAPP_CTRL0_RXTIMEOUT(to_bits);
+		/* TODO Replace this hackish detection with a proper IOCTL. */
+		/* Do NOT handle the RTS line. */
+		if ((ctx->config.baud_rate == 225000) && (ctx->port->port.line == 3)) {
+			ctx->rs485 &= ~RS485_RTS_RQ_MASK;
+
+			rtdm_printk("%s(%d): switch to full-duplex mode\n", DRIVER_NAME, ctx->port->port.line);
+		} else {
+			ctx->rs485 |= RS485_RTS_RQ_MASK;
+
+			rtdm_printk("%s(%d): switch to half-duplex mode\n", DRIVER_NAME, ctx->port->port.line);
+		}
+
+		ctrl &= ~BF_UARTAPP_LINECTRL_BAUD_DIVFRAC(0xffffffff);
+		ctrl |= BF_UARTAPP_LINECTRL_BAUD_DIVFRAC(div);
+
+		ctrl &= ~BF_UARTAPP_LINECTRL_BAUD_DIVINT(0xffffffff);
+		ctrl |= BF_UARTAPP_LINECTRL_BAUD_DIVINT(div >> 6);
+
+		{
+			/* computing variables at the given serial config */
+			register u32 bit_time_ns = 1000000000 / ctx->config.baud_rate;
+			register u32 char_bits = 1;
+
+			if (ctx->config.data_bits == RTSER_8_BITS)
+				char_bits += 8;
+			else
+				char_bits += 7;
+
+			if ((ctx->config.parity == RTSER_ODD_PARITY) || (ctx->config.parity == RTSER_EVEN_PARITY))
+				char_bits += 1;
 
-        /* Set up the HW. */
+			if (ctx->config.stop_bits == RTSER_2_STOPB)
+				char_bits += 2;
+			else
+				char_bits += 1;
+
+			ctx->char_time_ns = char_bits * bit_time_ns;
+			//rtdm_printk("%s(%d): char_time_ns=%llu\n", DRIVER_NAME, ctx->port->port.line, ctx->char_time_ns);
+
+			/* Modbus RTU reception requires an inter-character timeout:
+			 * -- 1.5 chars = 1.5 * (1 + data_bits + parity + stop_bits) for baudrates <= 19200
+			 * -- capped to 0.750 s for higher baudrates
+			 */
+			if (ctx->config.baud_rate <= 19200)
+				to_bits = 15 * char_bits / 10;
+			else
+				to_bits = 750000 / bit_time_ns;		// 750000 ns = 0.750 ms
+		}
+		/* i.MX28 RX timeout is set in "8 bit-times" with a "7 bit" base ("1" --> 15 bit time) */
+		if (to_bits >= 7)
+			to_bits = to_bits - 7;
+		else
+			to_bits = 0;
+		to_bits /= 8;
+
+		ctrl0 &= ~BF_UARTAPP_CTRL0_RXTIMEOUT(0x7ff);
+		ctrl0 |= BF_UARTAPP_CTRL0_RXTIMEOUT(to_bits);
+
+		/* Set up the HW. */
 		__raw_writel(ctrl, ctx->port->port.membase + HW_UARTAPP_LINECTRL);
-        __raw_writel(ctrl2, ctx->port->port.membase + HW_UARTAPP_CTRL2);
-        __raw_writel(ctrl0, ctx->port->port.membase + HW_UARTAPP_CTRL0);
+		__raw_writel(ctrl2, ctx->port->port.membase + HW_UARTAPP_CTRL2);
+		__raw_writel(ctrl0, ctx->port->port.membase + HW_UARTAPP_CTRL0);
 
-        /* always enable the Receiver */ // if (!ctx->rs485)
-        __raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
-        __raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
+		/* Always enable the receiver. */
+		__raw_writel((BM_UARTAPP_CTRL2_RTS), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
+		__raw_writel((BM_UARTAPP_CTRL2_RXE), ctx->port->port.membase + HW_UARTAPP_CTRL2_SET);
 
 		ctx->status = 0;
 		ctx->ioc_events &= ~RTSER_EVENT_ERRPEND;
 	}
 
 	rtdm_lock_put_irqrestore(&ctx->lock, lock_ctx);
+
 	return err;
 }
 
@@ -935,9 +962,9 @@
 
 						break;
 					}
-				}
-				else
+				} else {
 					memcpy(&ctx->out_buf[out_pos], in_pos, subblock);
+				}
 
 				written += subblock;
 				in_pos += subblock;
@@ -952,9 +979,9 @@
 
 					break;
 				}
-			}
-			else
+			} else {
 				memcpy(&ctx->out_buf[out_pos], in_pos, block);
+			}
 
 			written += subblock;
 			in_pos += subblock;
@@ -1062,9 +1089,9 @@
 
 						goto break_unlocked;
 					}
-				}
-				else
+				} else {
 					memcpy(out_pos, &ctx->in_buf[in_pos], subblock);
+				}
 
 				read += subblock;
 				out_pos += subblock;
@@ -1079,9 +1106,9 @@
 
 					goto break_unlocked;
 				}
-			}
-			else
+			} else {
 				memcpy(out_pos, &ctx->in_buf[in_pos], subblock);
+			}
 
 			read += subblock;
 			out_pos += subblock;
@@ -1111,13 +1138,13 @@
 
 		ret = rtdm_event_timedwait(&ctx->in_event, ctx->config.rx_timeout, &timeout_seq);
 		if (ret < 0) {
-		    if (ret == -EIDRM)
-			/* Device has been closed - return immediately. */
-			return -EBADF;
+			if (ret == -EIDRM)
+				/* Device has been closed - return immediately. */
+				return -EBADF;
 
-		    rtdm_lock_get_irqsave(&ctx->lock, lock_ctx);
+			rtdm_lock_get_irqsave(&ctx->lock, lock_ctx);
 
-            nonblocking = 1;
+			nonblocking = 1;
 			if (ctx->in_npend > 0)
 				/* Final turn: collect pending bytes before exit. */
 				continue;
@@ -1149,18 +1176,35 @@
 	struct rt_imx_mxs_auart_port *port;
 	uint64_t *in_history;
 	rtdm_lockctx_t lock_ctx;
+	RT_ALARM_INFO rts_deassert_info;
+	int retval;
 
 	ctx = (struct rt_imx_mxs_auart_ctx *)context->dev_private;
 	port = ctx->port;
 
-	rt_alarm_delete(&ctx->rts_deassert);
+	/* Wait for the alarm to expire. */
+	if (ctx->rs485 & RS485_RTS_AL_MASK) {
+		retval = rt_alarm_inquire(&ctx->rts_deassert, &rts_deassert_info);
+		/* Wait for the alarm to expire. */
+		while ((retval >= 0) && (rts_deassert_info.expiration != TM_INFINITE))
+			retval = rt_alarm_inquire(&ctx->rts_deassert, &rts_deassert_info);
+		/* Wait for the alarm to notify the expiration to the handler. */
+		while (retval > 0)
+			retval = rt_alarm_inquire(&ctx->rts_deassert, &rts_deassert_info);
+	}
 
 	rtdm_lock_get_irqsave(&ctx->lock, lock_ctx);
 
+	/* Destroy the alarm. */
+	if (ctx->rs485 & RS485_RTS_AL_MASK) {
+		rt_alarm_delete(&ctx->rts_deassert);
+
+		ctx->rs485 &= ~RS485_RTS_AL_MASK;
+	}
+
 	__raw_writel(BM_UARTAPP_CTRL0_SFTRST, port->port.membase + HW_UARTAPP_CTRL0_SET);
 
-    __raw_writel( BM_UARTAPP_INTR_OEIEN | BM_UARTAPP_INTR_BEIEN | BM_UARTAPP_INTR_PEIEN  | BM_UARTAPP_INTR_FEIEN
-        | BM_UARTAPP_INTR_RXIEN | BM_UARTAPP_INTR_RTIEN | BM_UARTAPP_INTR_CTSMIEN, port->port.membase + HW_UARTAPP_INTR_CLR);
+	__raw_writel(BM_UARTAPP_INTR_OEIEN | BM_UARTAPP_INTR_BEIEN | BM_UARTAPP_INTR_PEIEN | BM_UARTAPP_INTR_FEIEN | BM_UARTAPP_INTR_RXIEN | BM_UARTAPP_INTR_RTIEN | BM_UARTAPP_INTR_CTSMIEN, port->port.membase + HW_UARTAPP_INTR_CLR);
 
 	in_history = ctx->in_history;
 	ctx->in_history = NULL;
@@ -1187,7 +1231,6 @@
 	struct rt_imx_mxs_auart_port *port;
 	int ret;
 	uint64_t *dummy;
-	char name[42];
 
 	ctx = (struct rt_imx_mxs_auart_ctx *)context->dev_private;
 	ctx->port = (struct rt_imx_mxs_auart_port *)context->device->device_data;
@@ -1216,17 +1259,12 @@
 	ctx->status = 0;
 	ctx->saved_errors = 0;
 
-	sprintf(name, "rts_deassert_%d", port->port.line);
-	rt_alarm_create(&ctx->rts_deassert, name, rts_deassert_func, (void *)ctx);
-
-	/* TODO: Always true: place holder pending the porting of Xenomai RS485 flag. */
-	ctx->rs485 = 1;
-    ctx->char_time_ns = 1000000; /* 1 ms placeholder */
+	ctx->rs485 &= (~RS485_RTS_RQ_MASK & ~RS485_RTS_AL_MASK);
+	ctx->char_time_ns = 1000000; /* 1 ms preset */
 
 	rt_imx_mxs_auart_reset(&port->port);
 
-    __raw_writel( BM_UARTAPP_INTR_OEIEN | BM_UARTAPP_INTR_BEIEN | BM_UARTAPP_INTR_PEIEN  | BM_UARTAPP_INTR_FEIEN
-        | BM_UARTAPP_INTR_RXIEN | BM_UARTAPP_INTR_RTIEN, port->port.membase + HW_UARTAPP_INTR);
+	__raw_writel(BM_UARTAPP_INTR_OEIEN | BM_UARTAPP_INTR_BEIEN | BM_UARTAPP_INTR_PEIEN | BM_UARTAPP_INTR_FEIEN | BM_UARTAPP_INTR_RXIEN | BM_UARTAPP_INTR_RTIEN, port->port.membase + HW_UARTAPP_INTR);
 
 	__raw_writel(BM_UARTAPP_INTR_CTSMIEN, port->port.membase + HW_UARTAPP_INTR_SET);
 
@@ -1234,13 +1272,13 @@
 
 	rt_imx_mxs_auart_set_config(ctx, &default_config, &dummy);
 
-    ret = rtdm_irq_request(&ctx->irq_handle, port->port.irq, rt_imx_mxs_auart_irq_handle, 0, context->device->proc_name, ctx);
+	ret = rtdm_irq_request(&ctx->irq_handle, port->port.irq, rt_imx_mxs_auart_irq_handle, 0, context->device->proc_name, ctx);
 
-    __raw_writel(BM_UARTAPP_CTRL2_UARTEN, port->port.membase + HW_UARTAPP_CTRL2_SET);
+	__raw_writel(BM_UARTAPP_CTRL2_UARTEN, port->port.membase + HW_UARTAPP_CTRL2_SET);
 
-    //rtdm_printk("%s(%d): open %s\n", DRIVER_NAME, ctx->port->port.line, ret ? "failure" : "success");
+	//rtdm_printk("%s(%d): open %s\n", DRIVER_NAME, ctx->port->port.line, ret ? "failure" : "success");
 
-    return ret;
+	return ret;
 }
 
 static const struct rtdm_device __initdata device_tmpl = {
@@ -1358,7 +1396,7 @@
 	version = __raw_readl(port->port.membase + HW_UARTAPP_VERSION);
 	printk(
 		KERN_INFO
-        "%s on Xenomai RTDM MXS APPUART%d (v%d.%d.%d): membase=0x%p mapbase=%#x irq=%d uartclk=%d\n",
+		"%s on Xenomai RTDM MXS APPUART%d (v%d.%d.%d): membase=0x%p mapbase=%#x irq=%d uartclk=%d\n",
 		dev->device_name,
 		pdev->id,
 		(version >> 24) & 0xFF,
@@ -1387,7 +1425,7 @@
 static int __devexit
 rt_imx_mxs_auart_remove(struct platform_device *pdev)
 {
-	struct rt_imx_mxs_auart_port *port;	// s
+	struct rt_imx_mxs_auart_port *port; // s
 	struct rtdm_device *dev;
 
 	port = platform_get_drvdata(pdev);
@@ -1442,6 +1480,6 @@
 
 MODULE_AUTHOR("Mihai Lazarescu <mlazarescu@mect.it>");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("Freescale MXS application UART Xenomai RTDM driver");
+MODULE_DESCRIPTION("Xenomai RTDM driver for Freescale MXS application UART");
 
-/* vim: set tabstop=4 shiftwidth=4 : */
+/* vim: set tabstop=8 shiftwidth=8 : */
